{"version":3,"sources":["webpack:///../gatsby-theme-replica/src/templates/tags.tsx","webpack:///../gatsby-theme-replica/src/components/Tag.tsx"],"names":["TagsTemplate","_ref","data","tags","Object","entries","allMdx","nodes","reduce","acc","posts","frontmatter","forEach","tag","count","React","createElement","Layout","mode","LayoutMode","NavTab","map","_ref2","Tag","key","url","TAG_DIR","slugify","Link","to","className"],"mappings":"8FACA,wDAmDeA,UAtBiBC,IAAc,IAAb,KAAEC,GAAMD,EAGvC,MAAME,EAAOC,OAAOC,QAClBH,EAAKI,OAAOC,MAAMC,OAA+B,CAACC,EAAKC,KACrD,MAAMP,EAAOO,EAAMC,YAAYR,KAK/B,OAJAA,WAAMS,QAASC,IACb,MAAMC,EAAQL,EAAII,IAAQ,EAC1BJ,EAAII,GAAOC,EAAQ,IAEdL,GACN,KAEL,OACEM,IAAAC,cAACC,IAAM,CAACC,KAAMC,IAAWC,QACtBjB,EAAKkB,IAAIC,IAAA,IAAET,EAAKC,GAAMQ,EAAA,OACrBP,IAAAC,cAACO,IAAG,CAACC,IAAKX,EAAKA,IAAKA,EAAKC,MAAOA,S,kCC9CxC,6DAoBeS,IATWtB,IAAoB,IAAnB,IAAEY,EAAG,MAAEC,GAAOb,EACvC,MAAMwB,EAAM,IAAIC,UAAO,IAAIC,kBAAQd,GACnC,OACEE,IAAAC,cAACY,IAAI,CAACC,GAAIJ,EAAKK,UAAS,aACrBjB,EAAI,IAACE,IAAAC,cAAA,QAAMc,UAAS,iBAAoBhB","file":"component---gatsby-theme-replica-src-templates-tags-tsx-6d7543fb3187890a6bf8.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React, { FC } from 'react';\n\nimport Layout, { LayoutMode } from '../components/Layout';\nimport Tag from '../components/Tag';\n\nexport const query = graphql`\n  query TagListQuery {\n    allMdx(filter: { slug: { ne: \"README\" } }) {\n      nodes {\n        frontmatter {\n          tags\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  data: {\n    allMdx: {\n      nodes: {\n        frontmatter: {\n          tags: string[];\n        };\n      }[];\n    };\n  };\n}\n\nconst TagsTemplate: FC<Props> = ({ data }) => {\n  // todo allow sort by alphabet & count\n  // lower case\n  const tags = Object.entries(\n    data.allMdx.nodes.reduce<Record<string, number>>((acc, posts) => {\n      const tags = posts.frontmatter.tags;\n      tags?.forEach((tag) => {\n        const count = acc[tag] || 0;\n        acc[tag] = count + 1;\n      });\n      return acc;\n    }, {})\n  );\n  return (\n    <Layout mode={LayoutMode.NavTab}>\n      {tags.map(([tag, count]) => (\n        <Tag key={tag} tag={tag} count={count} />\n      ))}\n    </Layout>\n  );\n};\n\nexport default TagsTemplate;\n","import { Link } from 'gatsby';\nimport React, { FC } from 'react';\n\nimport { TAG_DIR } from '../constants/key';\nimport { slugify } from '../utils/slugify';\n\ninterface TagProps {\n  tag: string;\n  count?: number;\n}\n\nconst Tag: FC<TagProps> = ({ tag, count }) => {\n  const url = `/${TAG_DIR}/${slugify(tag)}`;\n  return (\n    <Link to={url} className={`topic-tag`}>\n      {tag} <span className={`font-semibold`}>{count}</span>\n    </Link>\n  );\n};\n\nexport default Tag;\n"],"sourceRoot":""}