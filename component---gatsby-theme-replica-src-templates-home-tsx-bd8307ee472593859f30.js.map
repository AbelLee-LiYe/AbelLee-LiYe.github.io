{"version":3,"sources":["webpack:///../gatsby-theme-replica/src/utils/calendar.ts","webpack:///../gatsby-theme-replica/src/hooks/usePosts.ts","webpack:///../gatsby-theme-replica/src/components/Calendar/ActivityTimeline.tsx","webpack:///../gatsby-theme-replica/src/components/Calendar/CalendarContext.ts","webpack:///../gatsby-theme-replica/src/components/Calendar/CalendarLegend.tsx","webpack:///../gatsby-theme-replica/src/components/Calendar/ContributionGraph.tsx","webpack:///../gatsby-theme-replica/src/components/Calendar/YearNavBar.tsx","webpack:///../gatsby-theme-replica/src/components/Calendar/index.tsx","webpack:///../gatsby-theme-replica/src/components/PostCard.tsx","webpack:///../gatsby-theme-replica/src/components/PostCardList.tsx","webpack:///../gatsby-theme-replica/src/utils/transformers/post.ts","webpack:///../gatsby-theme-replica/src/components/ReadMe.tsx","webpack:///../gatsby-theme-replica/src/templates/home.tsx"],"names":["WEEK_DAY_TEXT","MONTH_TEXT","getFirstCalendarSunday","endDate","Date","day","getDay","getTime","TOTAL_WEEKS_PER_YEAR","getMonthLabels","data","firstDate","i","sunday","month","getMonth","nextColMonth","prevColMonth","push","text","x","getDaysSvgData","dataByYear","dataByWeek","j","currentTs","currentDate","y","date","getDateString","translateX","week","usePostNodes","useStaticQuery","useDatePostsMap","posts","useRef","map","forEach","post","frontmatter","id","slug","fields","title","relativeDate","getRelativeTimeFromNow","getDatePostsMap","nodes","current","StyledWrapper","styled","ul","color","gray","light","ActivityTimeline","length","className","key","to","date-time","format","today","initialState","year","getFullYear","CalendarContext","createContext","state","dispatch","calendarReducer","action","type","payload","legendColors","green","superlight","medium","dark","CalendarLegend","StyledSvg","svg","WeekDayLabel","d","index","undefined","dx","dy","ContributionGraph","useContext","datePostsMap","monthData","useState","style","display","svgTip","setSvgTip","handleMouseEnterSvg","e","target","currentTarget","dataset","count","Number","getAttribute","toLocaleDateString","top","left","handleMouseLeaveSvg","handleSvgClick","width","height","transform","col","fillColor","slice","fill","data-date","data-count","onMouseEnter","onMouseLeave","onClick","m","YearNavBar","currentYear","selectedYear","firstYear","allMdx","total","Array","_","Calendar","useReducer","isCurrentYear","yearly","useTotal","displayPosts","Provider","value","StyledLink","Link","main","blue","PostCard","excerpt","category","tags","disqusConfig","useDisqus","size","CATEGORY_DIR","slugify","TAG_DIR","config","placeholder","PostCardList","transformPosts","ReadMe","body","mdx","useConfig","author","HomeTemplate","Layout","mode","LayoutMode","NavTab"],"mappings":"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","file":"component---gatsby-theme-replica-src-templates-home-tsx-bd8307ee472593859f30.js","sourcesContent":["import { BriefPost, PostNode } from '../types/post';\nimport { getDateString, getRelativeTimeFromNow } from './date';\n\nconst ONE_DAY_IN_MS = 24 * 60 * 60 * 1000;\nconst TOTAL_WEEKS_PER_YEAR = 52;\nexport const WEEK_DAY_TEXT = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nexport const MONTH_TEXT = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nexport const getFirstCalendarSunday = (endDate: Date = new Date()) => {\n  const day = endDate.getDay();\n  return new Date(\n    endDate.getTime() - (TOTAL_WEEKS_PER_YEAR * 7 + day) * ONE_DAY_IN_MS\n  );\n};\n\ninterface MonthData {\n  month: number;\n  x: number;\n  text: string;\n}\n\nexport const getMonthLabels = (endDate: Date) => {\n  const data: MonthData[] = [];\n  const firstDate = getFirstCalendarSunday(endDate);\n\n  for (let i = 0; i <= TOTAL_WEEKS_PER_YEAR; i++) {\n    const sunday = new Date(firstDate.getTime() + i * 7 * ONE_DAY_IN_MS);\n    const month = sunday.getMonth();\n    const nextColMonth = new Date(\n      sunday.getTime() + 7 * ONE_DAY_IN_MS\n    ).getMonth();\n\n    // avoid labels overlapping next to each cols\n    if (i === 0 && month !== nextColMonth) {\n      continue;\n    }\n\n    const prevColMonth = new Date(\n      sunday.getTime() - 7 * ONE_DAY_IN_MS\n    ).getMonth();\n    if (i === 0 || month !== prevColMonth) {\n      data.push({\n        month,\n        text: MONTH_TEXT[month],\n        x: 14 + i * 13,\n      });\n    }\n  }\n  return data;\n};\n\nexport const getDaysSvgData = (endDate: Date) => {\n  const dataByYear = [];\n  const firstDate = getFirstCalendarSunday(endDate);\n\n  for (let i = 0; i <= TOTAL_WEEKS_PER_YEAR; i++) {\n    const dataByWeek = [];\n\n    for (let j = 0; j < 7; j++) {\n      const currentTs = firstDate.getTime() + (i * 7 + j) * ONE_DAY_IN_MS;\n      const currentDate = new Date(currentTs);\n\n      if (endDate.getTime() < currentTs) break;\n      dataByWeek.push({\n        x: 14 - i,\n        y: j * 13,\n        date: getDateString(currentDate),\n      });\n    }\n\n    dataByYear.push({\n      translateX: i * 14,\n      week: dataByWeek,\n    });\n  }\n\n  return dataByYear;\n};\n\nexport const getCalendarData = (endDate: Date = new Date()) => {\n  return {\n    monthData: getMonthLabels(endDate),\n    data: getDaysSvgData(endDate),\n  };\n};\n\nexport type DatePostsMap = Record<string, BriefPost[]>;\n\nexport const getDatePostsMap = (posts: PostNode[]) => {\n  const map = {} as DatePostsMap;\n  posts?.forEach((post) => {\n    const date = getDateString(post.frontmatter.date);\n    if (!map[date]) {\n      map[date] = [];\n    }\n\n    map[date].push({\n      id: post.id,\n      slug: post.fields.slug,\n      title: post.frontmatter.title,\n      date: post.frontmatter.date,\n      relativeDate: getRelativeTimeFromNow(post.frontmatter.date),\n    });\n  });\n\n  return map;\n};\n","import { graphql, useStaticQuery } from 'gatsby';\nimport { useRef } from 'react';\n\nimport { getDatePostsMap } from '../utils/calendar';\n\nconst usePostNodes = () =>\n  useStaticQuery(graphql`\n    query AllPosts {\n      posts: allMdx(filter: { slug: { ne: \"README\" } }) {\n        nodes {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n          }\n        }\n      }\n    }\n  `);\n\nexport const useDatePostsMap = () => {\n  const { posts } = usePostNodes();\n  const ref = useRef(getDatePostsMap(posts?.nodes));\n\n  return ref.current;\n};\n\nexport default usePostNodes;\n","import { Link } from 'gatsby';\nimport React, { FC } from 'react';\nimport styled from 'styled-components';\n\nimport { color } from '../../theme';\nimport { BriefPost } from '../../types/post';\nimport { format } from '../../utils/date';\n\nconst StyledWrapper = styled.ul`\n  display: block;\n  li:not(:last-child) {\n    border-bottom: 1px solid ${color.gray.light};\n  }\n`;\n\ninterface Props {\n  posts: BriefPost[];\n}\n\nconst ActivityTimeline: FC<Props> = ({ posts }) => {\n  return posts?.length ? (\n    <StyledWrapper className={`text-sm`}>\n      {posts.map((post) => (\n        <li className={`py-2 flex justify-between`} key={post.id}>\n          <Link to={post.slug} key={post.id}>\n            {post.title}\n          </Link>\n          <time\n            className={`text-gray-main text-xs`}\n            date-time={post.date}\n            title={post.date}\n          >\n            {format(post.date)}\n          </time>\n        </li>\n      ))}\n    </StyledWrapper>\n  ) : null;\n};\n\nexport default ActivityTimeline;\n","import { Dispatch, createContext } from 'react';\n\ninterface CalendarState {\n  year: number;\n  date: string;\n  endDate: Date;\n}\n\ninterface Action<T, U extends string = string> {\n  type: U;\n  payload: T;\n}\n\ntype CalendarAction = Action<number, 'year'> | Action<string, 'date'>;\n\nconst today = new Date();\nexport const initialState: CalendarState = {\n  year: today.getFullYear(),\n  endDate: today,\n  date: '',\n};\n\nexport const CalendarContext = createContext<{\n  state: CalendarState;\n  dispatch: Dispatch<CalendarAction>;\n}>({\n  state: initialState,\n  dispatch: () => {},\n});\n\nexport const calendarReducer = (\n  state: CalendarState,\n  action: CalendarAction\n) => {\n  switch (action.type) {\n    case 'year':\n      const year = action.payload;\n      const endDate =\n        today.getFullYear() === year ? today : new Date(`${year}-12-31`);\n      return {\n        ...state,\n        date: '',\n        year,\n        endDate,\n      };\n    case 'date':\n      return {\n        ...state,\n        date: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import React, { FC } from 'react';\n\nimport { color } from '../../theme';\n\nexport const legendColors = [\n  color.gray[120],\n  color.green.superlight,\n  color.green.light,\n  color.green.medium,\n  color.green.dark,\n];\n\nconst CalendarLegend: FC = () => {\n  return (\n    <ul className={`calendar-legend`}>\n      <li className={`bg-gray-120`} />\n      <li className={`bg-green-superlight`} />\n      <li className={`bg-green-light`} />\n      <li className={`bg-green-medium`} />\n      <li className={`bg-green-dark`} />\n    </ul>\n  );\n};\n\nexport default CalendarLegend;\n","import React, { CSSProperties, FC, useContext, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { useDatePostsMap } from '../../hooks/usePosts';\nimport { WEEK_DAY_TEXT, getCalendarData } from '../../utils/calendar';\nimport { CalendarContext } from './CalendarContext';\nimport CalendarLegend, { legendColors } from './CalendarLegend';\n\nconst StyledSvg = styled.svg`\n  text {\n    fill: #767676;\n    font-size: 9px;\n  }\n\n  rect {\n    shape-rendering: geometricPrecision;\n    outline: 1px solid rgba(27, 31, 35, 0.04);\n    outline-offset: -1px;\n    rx: 2;\n    ry: 2;\n  }\n`;\n\nconst WeekDayLabel = () => {\n  return (\n    <>\n      {WEEK_DAY_TEXT.map((d, index) => (\n        <text\n          key={d}\n          className={index % 2 === 0 ? 'hidden' : undefined}\n          dx='-9'\n          dy={8 + index * 13}\n        >\n          {d}\n        </text>\n      ))}\n    </>\n  );\n};\n\ninterface SvgTipState {\n  style: CSSProperties;\n  date?: string;\n  text?: string;\n}\n\ninterface Props {\n  onDateClick?: (date: string) => void;\n}\n\nconst ContributionGraph: FC<Props> = () => {\n  const { state, dispatch } = useContext(CalendarContext);\n  const datePostsMap = useDatePostsMap();\n\n  const { data, monthData } = getCalendarData(state.endDate);\n\n  const [svgTip, setSvgTip] = useState<SvgTipState>({\n    style: { display: 'none' },\n  });\n  const handleMouseEnterSvg = (e: React.MouseEvent<SVGRectElement>) => {\n    const target = e.currentTarget;\n    const date = target.dataset.date as string;\n    const count = Number(target.dataset.count);\n    const x = Number(target.getAttribute('x'));\n    const y = Number(target.getAttribute('y'));\n\n    setSvgTip({\n      text: `${count > 0 ? count : 'No'} contribution${\n        count === 1 ? ' ' : 's '\n      }`,\n      date: new Date(date).toLocaleDateString('en', {\n        month: 'short',\n        year: 'numeric',\n        day: 'numeric',\n      }),\n      //todo fine tune svgtip position\n      style: {\n        top: y - 15 + 'px',\n        left: 150 - x * 11 + 'px',\n      },\n    });\n  };\n\n  const handleMouseLeaveSvg = () => {\n    setSvgTip({ style: { display: 'none' } });\n  };\n\n  const handleSvgClick = (e: React.MouseEvent<SVGRectElement>) => {\n    const target = e.currentTarget;\n    const date = target.dataset.date as string;\n    dispatch({\n      type: 'date',\n      payload: date,\n    });\n  };\n\n  const getRectOpacity = (date: string) => {\n    if (!state.date) return '';\n    return state.date === date ? '' : 'opacity-50';\n  };\n\n  return (\n    <div className={`relative border-b px-4 pb-2 pt-1`}>\n      <div\n        className={`overflow-hidden flex flex-col items-end xl:items-center`}\n      >\n        <StyledSvg width={722} height={112}>\n          <g transform={'translate(10, 20)'}>\n            {data.map((col) => (\n              <g\n                key={col.translateX}\n                transform={`translate(${col.translateX},0)`}\n              >\n                {col.week.map((day) => {\n                  const count = datePostsMap[day.date]?.length ?? 0;\n                  const fillColor =\n                    legendColors[count] ?? legendColors.slice(-1);\n\n                  return (\n                    <rect\n                      className={getRectOpacity(day.date)}\n                      key={day.date}\n                      width='10'\n                      height='10'\n                      x={day.x}\n                      y={day.y}\n                      fill={fillColor}\n                      data-date={day.date}\n                      data-count={count}\n                      onMouseEnter={handleMouseEnterSvg}\n                      onMouseLeave={handleMouseLeaveSvg}\n                      onClick={handleSvgClick}\n                    />\n                  );\n                })}\n              </g>\n            ))}\n\n            {monthData.map((m, index) => (\n              <text key={`${m.text}_${index}`} x={m.x} y={-7}>\n                {m.text}\n              </text>\n            ))}\n\n            <WeekDayLabel />\n          </g>\n        </StyledSvg>\n      </div>\n      <div\n        className={`flex flex-col md:flex-row md:justify-between md:items-center flex-wrap text-11px mt-1 md:mx-4`}\n      >\n        <a>Learn how we count contributions.</a>\n        <div className={`self-end text-gray-main items-center flex`}>\n          Less\n          <CalendarLegend />\n          More\n        </div>\n      </div>\n      <div\n        className={`absolute bg-gray-dark text-gray-light text-xs opacity-75 rounded-md p-2 whitespace-no-wrap`}\n        style={svgTip.style}\n      >\n        <strong>{svgTip.text}</strong>on {svgTip.date}\n      </div>\n    </div>\n  );\n};\n\nexport default ContributionGraph;\n","import { graphql, useStaticQuery } from 'gatsby';\nimport React, { FC, useContext } from 'react';\n\nimport { CalendarContext } from './CalendarContext';\n\ninterface Props {}\n\nconst YearNavBar: FC<Props> = () => {\n  const { state, dispatch } = useContext(CalendarContext);\n  const data = useStaticQuery(graphql`\n    query FirstPost {\n      allMdx(\n        filter: {\n          slug: { ne: \"README\" }\n          frontmatter: { date: { ne: \"null\" } }\n        }\n        sort: { fields: frontmatter___date, order: ASC }\n        limit: 1\n      ) {\n        nodes {\n          frontmatter {\n            date\n          }\n        }\n      }\n    }\n  `);\n\n  const currentYear = new Date().getFullYear();\n  const selectedYear = state.year;\n  const firstYear =\n    new Date(data.allMdx.nodes?.[0]?.frontmatter?.date).getFullYear() ||\n    currentYear;\n  const total = currentYear - firstYear + 1;\n\n  const handleClick = (year: number) => {\n    dispatch({\n      type: 'year',\n      payload: year,\n    });\n  };\n\n  return (\n    <div className={`flex-col flex w-24 sticky top-74px`}>\n      {new Array(total).fill(0).map((_, index) => (\n        <div\n          key={index}\n          onClick={() => handleClick(currentYear - index)}\n          className={`${\n            selectedYear === currentYear - index\n              ? 'bg-blue text-white hover:bg-blue'\n              : 'hover:bg-gray-100 text-gray-200'\n          } cursor-pointer rounded-md px-4 py-2 text-xs mb-2 no-underline`}\n        >\n          {currentYear - index}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default YearNavBar;\n","import React, { FC, useReducer } from 'react';\n\nimport { useDatePostsMap } from '../../hooks/usePosts';\nimport useTotal from '../../hooks/useTotal';\nimport ActivityTimeline from './ActivityTimeline';\nimport {\n  CalendarContext,\n  calendarReducer,\n  initialState,\n} from './CalendarContext';\nimport ContributionGraph from './ContributionGraph';\nimport YearNavBar from './YearNavBar';\n\ninterface Props {}\n\nconst Calendar: FC<Props> = () => {\n  const [state, dispatch] = useReducer(calendarReducer, initialState);\n  const isCurrentYear = new Date().getFullYear() === state.year;\n  const { yearly } = useTotal();\n\n  const datePostsMap = useDatePostsMap();\n  const displayPosts = datePostsMap[state.date];\n\n  return (\n    <CalendarContext.Provider value={{ state, dispatch }}>\n      <div className={`w-full flex`}>\n        <div className={`w-full md:w-10/12`}>\n          <div className={`mb-2 font-medium`}>\n            {yearly[state.year]} contributions in{' '}\n            {isCurrentYear ? 'the last year' : state.year}\n          </div>\n          <div className={`border rounded-md py-2`}>\n            <ContributionGraph />\n            <div\n              className={`w-full mt-7 text-sm p-4 flex flex-col md:flex-row`}\n            >\n              <div className={`md:w-1/2`}>\n                <div className={`pb-2`}>Activity overview</div>\n              </div>\n              <div className={`md:w-1/2 md:border-l md:pl-4`}>@svg</div>\n            </div>\n          </div>\n          <div>\n            <div className={`mt-8 mb-2 font-medium`}>Contribution activity</div>\n            <ActivityTimeline posts={displayPosts} />\n          </div>\n        </div>\n        <div className={`hidden md:block md:w-2/12 pl-8`}>\n          <YearNavBar />\n        </div>\n      </div>\n    </CalendarContext.Provider>\n  );\n};\n\nexport default Calendar;\n","import { Link } from 'gatsby';\nimport { CommentCount } from 'gatsby-plugin-disqus';\nimport React, { FC } from 'react';\nimport { AiOutlineTags } from 'react-icons/ai';\nimport { FaRegFolderOpen } from 'react-icons/fa';\nimport { GrBook, GrDrag } from 'react-icons/gr';\nimport { VscComment } from 'react-icons/vsc';\nimport styled from 'styled-components';\n\nimport { CATEGORY_DIR, TAG_DIR } from '../constants/key';\nimport useDisqus from '../hooks/useDisqus';\nimport { color } from '../theme';\nimport { BriefPost } from '../types/post';\nimport { slugify } from '../utils/slugify';\n\ninterface Props\n  extends Required<\n    Pick<\n      BriefPost,\n      'id' | 'slug' | 'title' | 'excerpt' | 'tags' | 'category' | 'date'\n    >\n  > {}\n\nconst StyledLink = styled(Link)`\n  color: ${color.gray.main};\n  margin-right: 16px;\n  height: 21px;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    color: ${color.blue};\n    text-decoration: none;\n  }\n\n  > svg {\n    margin-right: 4px;\n  }\n\n  /* hiding disqus text, show count only */\n  > span {\n    word-break: break-word;\n    display: block;\n    width: 50px;\n    overflow: hidden;\n  }\n`;\n\nconst PostCard: FC<Props> = ({\n  id,\n  slug,\n  title,\n  excerpt,\n  category,\n  tags,\n  date,\n}) => {\n  const disqusConfig = useDisqus({\n    title,\n    date,\n    slug,\n  });\n\n  return (\n    <div className={`border rounded-md p-4 flex flex-col text-sm`} key={id}>\n      <div className={`flex items-center`}>\n        <GrBook size={16} className={`mr-2`} />\n        <Link to={slug} className={`flex-grow`}>\n          {title}\n        </Link>\n        <GrDrag size={16} className={`cursor-pointer`} />\n      </div>\n      <div className={`flex-grow mt-2 mb-4 text-gray-main`}>{excerpt}</div>\n      <div className={`flex items-center`}>\n        {category && (\n          <StyledLink to={`/${CATEGORY_DIR}/${slugify(category)}`}>\n            <FaRegFolderOpen size={16} /> {category}\n          </StyledLink>\n        )}\n        {tags && tags.length > 0 && (\n          <StyledLink to={`/${TAG_DIR}`}>\n            <AiOutlineTags size={16} />\n            {tags.length}\n          </StyledLink>\n        )}\n        {disqusConfig && (\n          <StyledLink to={slug}>\n            <VscComment size={16} />\n            <CommentCount config={disqusConfig} placeholder={'0'} />\n          </StyledLink>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PostCard;\n","import { graphql, useStaticQuery } from 'gatsby';\nimport React, { FC } from 'react';\n\nimport { PostNode } from '../types/post';\nimport { transformPosts } from '../utils/transformers/post';\nimport PostCard from './PostCard';\n\ninterface QueryData {\n  allMdx: {\n    nodes: PostNode[];\n  };\n}\n\nconst PostCardList: FC = () => {\n  const data = useStaticQuery<QueryData>(graphql`\n    query HomePostCardList {\n      allMdx(\n        limit: 6\n        sort: { order: DESC, fields: frontmatter___date }\n        filter: { slug: { ne: \"README\" } }\n      ) {\n        nodes {\n          id\n          excerpt(pruneLength: 80)\n          frontmatter {\n            title\n            tags\n            category\n            date\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `);\n\n  const posts = transformPosts(data.allMdx.nodes);\n\n  return (\n    <>\n      <div className={`mb-2`}>Recent posts</div>\n      <div className={`grid gap-4 grid-cols-1 md:grid-cols-2 mb-8`}>\n        {posts?.map((post) => (\n          <PostCard {...post} key={post.id} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default PostCardList;\n","import { PostNode } from '../../types/post';\nimport { getRelativeTimeFromNow } from '../date';\n\nexport const transformPosts = (posts: PostNode[]) =>\n  posts.map(({ id, excerpt, frontmatter, fields }) => ({\n    id,\n    excerpt,\n    title: frontmatter.title,\n    tags: frontmatter.tags,\n    category: frontmatter.category,\n    slug: fields.slug,\n    relativeDate: getRelativeTimeFromNow(frontmatter.date),\n    date: frontmatter.date,\n  }));\n","import { Link, graphql, useStaticQuery } from 'gatsby';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport React, { FC } from 'react';\n\nimport useConfig from '../hooks/useConfig';\n\nconst ReadMe: FC = () => {\n  const data = useStaticQuery(graphql`\n    query README {\n      mdx(slug: { eq: \"README\" }) {\n        body\n      }\n    }\n  `);\n\n  const body = data.mdx?.body;\n  const config = useConfig();\n  return body ? (\n    <div className={`_readme border rounded-md p-6 mb-6 w-full`}>\n      <div className={`flex items-center text-xs mb-4 text-mono`}>\n        <Link\n          to={'/'}\n          className={`text-gray-dark no-underscore hover:text-blue`}\n        >\n          {config.author}\n        </Link>\n        <span className={`px-2px`}>/</span>README.\n        <span className={`text-gray-main`}>md</span>\n      </div>\n      <MDXRenderer>{body}</MDXRenderer>\n    </div>\n  ) : null;\n};\n\nexport default ReadMe;\n//TODO typography\n","import React, { FC } from 'react';\n\nimport Calendar from '../components/Calendar';\nimport Layout, { LayoutMode } from '../components/Layout';\nimport PostCardList from '../components/PostCardList';\nimport ReadMe from '../components/ReadMe';\n\nconst HomeTemplate: FC = () => {\n  return (\n    <Layout mode={LayoutMode.NavTab}>\n      <ReadMe />\n      <PostCardList />\n      <Calendar />\n    </Layout>\n  );\n};\n\nexport default HomeTemplate;\n"],"sourceRoot":""}