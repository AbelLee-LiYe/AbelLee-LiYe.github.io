{"componentChunkName":"component---gatsby-theme-replica-src-templates-post-tsx","path":"/2020/06/16/通过两点获取全部路径/","result":{"data":{"post":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"通过两点获取全部路径(string) && Return all paths from a given source to a destination(string)\",\n  \"date\": \"2020-06-16T17:50:00.000Z\",\n  \"tags\": [\"java\", \"算法\"],\n  \"category\": \"java\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// A directed graph using \\n// adjacency map representation\\npublic class Graph {\\n\\n    // No. of vertices in graph \\n    private String s;\\n\\n    // adjacency list  \\n    private Map<String, List<String>> adjMap;\\n\\n    private List<List<String>> resultList;\\n\\n    //Constructor\\n    public Graph(Map<String, List<String>> nodeMap){\\n        if (Objects.isNull(nodeMap)) {\\n            throw new NullPointerException(\\\"node map is not be null!\\\");\\n        }\\n        this.adjMap = nodeMap;\\n        this.resultList = new ArrayList<>();\\n    }\\n\\n    // Get all paths from\\n    // 's' to 'd' \\n    public List<List<String>> getAllPaths(String s, String d) {\\n        if (Objects.isNull(s) || Objects.isNull(d)) {\\n            throw new NullPointerException(\\\"source or destination must not be null\\\");\\n        }\\n\\n        if (Objects.isNull(this.s)) {\\n            this.s = s;\\n        }\\n\\n        Map<String, Boolean> isVisited = new HashMap<>(adjMap.size());\\n        List<String> pathList = new ArrayList<>();\\n\\n        // add source to pathList\\n        pathList.add(s);\\n\\n        // Call recursive utility\\n        getAllPathsUtil(s, d, isVisited, pathList);\\n\\n        return this.resultList;\\n    }\\n\\n    // A recursive function to print \\n    // all paths from 'u' to 'd'. \\n    // isVisited map keeps track of\\n    // vertices in current path. \\n    // localPathList<> stores actual \\n    // vertices in the current path \\n    private void getAllPathsUtil(String u, String d,\\n                                   Map<String, Boolean> isVisited,\\n                                   List<String> localPathList) {\\n\\n        // Mark the current node\\n        isVisited.put(u, Boolean.TRUE);\\n\\n        if (u.equals(d)) {\\n            resultList.add(new ArrayList<>(localPathList));\\n            System.out.println(localPathList); // print one finished path\\n            // if match found then no need to traverse more till depth \\n            isVisited.put(u, Boolean.FALSE);\\n            return;\\n        }\\n\\n        // Recur for all the vertices \\n        // adjacent to current vertex\\n        List<String> vertices = adjMap.get(u);\\n\\n        for (String i : vertices) {\\n            if (Objects.isNull(isVisited.get(i)) || !isVisited.get(i)) {\\n                // store current node  \\n                // in path list\\n                localPathList.add(i);\\n                getAllPathsUtil(i, d, isVisited, localPathList);\\n\\n                // remove current node \\n                // in path list\\n                localPathList.remove(i);\\n            }\\n        }\\n\\n        // Mark the current node\\n        isVisited.put(u, Boolean.FALSE);\\n    }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public class Demo {\\n    public static void main(String[] args) {\\n        Map<String, List<String>> nodeMap = new HashMap<>();\\n        nodeMap.put(\\\"0\\\", Arrays.asList(\\\"1\\\", \\\"3\\\"));\\n        nodeMap.put(\\\"1\\\", Arrays.asList(\\\"0\\\", \\\"2\\\"));\\n        nodeMap.put(\\\"2\\\", Arrays.asList(\\\"1\\\", \\\"3\\\", \\\"4\\\"));\\n        nodeMap.put(\\\"3\\\", Arrays.asList(\\\"0\\\", \\\"2\\\", \\\"4\\\"));\\n        nodeMap.put(\\\"4\\\", Arrays.asList(\\\"2\\\", \\\"3\\\"));\\n\\n        List<List<String>> allPaths = new Graph(nodeMap).getAllPaths(\\\"2\\\", \\\"4\\\");\\n        System.out.println(allPaths); // print [[2, 1, 0, 3, 4], [2, 3, 4], [2, 4]]\\n    }\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u53C2\\u8003: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.geeksforgeeks.org/find-paths-given-source-destination/\"\n  }, \"https://www.geeksforgeeks.org/find-paths-given-source-destination/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"参考:  https://www.geeksforgeeks.org/find-paths-given-source-destination/","fields":{"slug":"/2020/06/16/通过两点获取全部路径/"},"frontmatter":{"date":"2020-06-16T17:50:00.000Z","title":"通过两点获取全部路径(string) && Return all paths from a given source to a destination(string)","tags":["java","算法"],"category":"java"},"tableOfContents":{},"timeToRead":1}},"pageContext":{"postID":"644ba7c3-3750-5f46-b3a2-db1e17173628","numericId":14,"prevPost":{"slug":"/2019/08/22/二零一九年八月下旬/","title":"二零一九年八月下旬"},"nextPost":{"slug":"/2020/06/26/Minecraft-skin-abel/","title":"Minecraft_skin_abel"},"permalink":"https://www.abellee.cn/2020/06/16/通过两点获取全部路径/"}},"staticQueryHashes":["2873555300","3400548236","822196256"]}