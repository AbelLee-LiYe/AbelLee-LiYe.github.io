{"componentChunkName":"component---gatsby-theme-replica-src-templates-tag-tsx","path":"/tags/设计模式","result":{"data":{"allMdx":{"nodes":[{"id":"6429434b-ff1c-5e05-ae3a-866bde6e36d2","excerpt":"静态代理 静态代理很简单，举个例子： 我们日常生活中，都要找人解决各种各样问题。 我们先不管到底解决的是什么问题，我们同意写成do…","frontmatter":{"title":"静态代理和动态代理","date":"2018-12-23T09:24:13.000Z","tags":["java","设计模式"]},"fields":{"slug":"/12/23/2018/静态代理和动态代理/"},"slug":""},{"id":"3072bc13-12fb-5f82-b4ed-b679494ee8eb","excerpt":"建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 一个 Builder 类会一步一步构造最终的对象。该 Builder…","frontmatter":{"title":"java建造者模式","date":"2018-12-20T01:30:33.000Z","tags":["java","设计模式"]},"fields":{"slug":"/12/20/2018/java建造者模式/"},"slug":"java"},{"id":"9f027e38-9fd5-56db-aece-2ead4074d3d8","excerpt":"Spring的笔记写了一半，突然想复习一下工厂模式，所以写一篇。 前言 面向对象设计的基本原则 谈到工厂模式我要先提一下，面向对象设计的基本原则： 单一职责原则（Single Responsibility Principle） 每一个类应该专注于做一件事情。 里氏替换原则（Liskov Substitution Principle…","frontmatter":{"title":"java工厂模式","date":"2018-12-20T01:18:36.000Z","tags":["java","设计模式"]},"fields":{"slug":"/12/20/2018/java工厂模式/"},"slug":"java"}],"totalCount":3}},"pageContext":{"tag":"设计模式"}},"staticQueryHashes":["2873555300","3400548236"]}