{"componentChunkName":"component---gatsby-theme-replica-src-templates-tag-tsx","path":"/tags/java","result":{"data":{"allMdx":{"nodes":[{"id":"279a0a92-3bb8-510c-b416-165194b4e5f9","excerpt":"DDNS aliyun ddns 基于openjdk11开发 Feature 多主域名解析 多主机记录解析 任务轮询间隔可配置 当解析主机记录未设置过，自动创建 异步线程同时解析 jsonip.com低延迟获取公网IP docker-compose一键启动 安装 部署目录结构: 下载config.json,  wget https://raw.githubusercontent.com…","frontmatter":{"title":"aliyun_ddns","date":"2021-03-08T06:58:20.000Z","tags":["java"]},"fields":{"slug":"/2021/03/08/aliyun_ddns/"},"slug":"aliyun_ddns"},{"id":"6d8cfe9b-0f19-56e2-9df8-30e7332f838d","excerpt":"参考:  https://www.geeksforgeeks.org/find-paths-given-source-destination/","frontmatter":{"title":"通过两点获取全部路径(string) && Return all paths from a given source to a destination(string)","date":"2020-06-16T17:50:00.000Z","tags":["java","算法"]},"fields":{"slug":"/2020/06/16/通过两点获取全部路径/"},"slug":""},{"id":"3c27cbfe-7665-5bf7-8d6e-362ee4deb3cc","excerpt":"Initialization On Demand Holder idiom DoubleCheckedLocking 结语 字段延迟初始化降低了初始化类或创建实例的开销，但增加了访问被延迟初始化的字段 的开销。在大多数时候，正常的初始化要优于延迟初始化。如果确实需要对实例字段使用线程 安全的延迟初始化，请使用上面介绍的基于volatile…","frontmatter":{"title":"线程安全延迟初始化方案","date":"2019-04-07T09:43:38.000Z","tags":["java","jvm"]},"fields":{"slug":"/2019/04/07/线程安全延迟初始化方案/"},"slug":""},{"id":"723a709a-a7c3-5d61-8c31-e6bea53d5e7a","excerpt":"《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则。 1）程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。 2）监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。 3）volatile变量规则：对一个volatile…","frontmatter":{"title":"happens-before规则","date":"2019-04-07T09:27:35.000Z","tags":["java","jvm"]},"fields":{"slug":"/2019/04/07/happens-before规则/"},"slug":"happens-before"},{"id":"af61ace4-2610-5e10-80a2-7d4bc209c18a","excerpt":"静态代理 静态代理很简单，举个例子： 我们日常生活中，都要找人解决各种各样问题。 我们先不管到底解决的是什么问题，我们同意写成do…","frontmatter":{"title":"静态代理和动态代理","date":"2018-12-23T09:24:13.000Z","tags":["java","设计模式"]},"fields":{"slug":"/2018/12/23/静态代理和动态代理/"},"slug":""},{"id":"ac346f84-5941-553f-b2b9-f058a39e9d55","excerpt":"介绍 作为一名java web选手，学java就有可能做web，做web就必须用框架，学框架当然就少不了Spring Framework。作为一个可以整合其它几乎所有主流框架的Spring…","frontmatter":{"title":"spring学习笔记","date":"2018-12-20T09:03:59.000Z","tags":["java","spring"]},"fields":{"slug":"/2018/12/20/spring学习笔记/"},"slug":"spring"},{"id":"c58de59b-7367-5d61-b33e-b8366569bc17","excerpt":"建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 一个 Builder 类会一步一步构造最终的对象。该 Builder…","frontmatter":{"title":"java建造者模式","date":"2018-12-20T01:30:33.000Z","tags":["java","设计模式"]},"fields":{"slug":"/2018/12/20/java建造者模式/"},"slug":"java"},{"id":"5c6286db-0bf8-525d-bc04-dd7ae662c298","excerpt":"Spring的笔记写了一半，突然想复习一下工厂模式，所以写一篇。 前言 面向对象设计的基本原则 谈到工厂模式我要先提一下，面向对象设计的基本原则： 单一职责原则（Single Responsibility Principle） 每一个类应该专注于做一件事情。 里氏替换原则（Liskov Substitution Principle…","frontmatter":{"title":"java工厂模式","date":"2018-12-20T01:18:36.000Z","tags":["java","设计模式"]},"fields":{"slug":"/2018/12/20/java工厂模式/"},"slug":"java"}],"totalCount":8}},"pageContext":{"tag":"java"}},"staticQueryHashes":["2873555300","3400548236"]}