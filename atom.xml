<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[RSS Feed]]></title><description><![CDATA[不会写代码，也不会打人马。]]></description><link>https://www.abellee.cn</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 29 Sep 2022 16:13:59 GMT</lastBuildDate><item><title><![CDATA[Caffe DetectionOutput Layer Python Version]]></title><link>https://www.abellee.cn/2022/09/28/Caffe_DetectionOutput_layer_python_version/</link><guid isPermaLink="false">https://www.abellee.cn/2022/09/28/Caffe_DetectionOutput_layer_python_version/</guid><pubDate>Wed, 28 Sep 2022 16:28:00 GMT</pubDate><content:encoded>&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import cv2
import caffe
import numpy as np
import math
import functools
import time


class NormalizedBBox:
    def __init__(self, xmin, ymin, xmax, ymax):
        self.xmin = xmin
        self.ymin = ymin
        self.xmax = xmax
        self.ymax = ymax
        self.size = 0


def BBoxSize(
        bbox,  # type: NormalizedBBox
        normalized=True):
    if bbox.xmax &amp;lt; bbox.xmin or bbox.ymax &amp;lt; bbox.ymin:
        return 0

    width = bbox.xmax - bbox.xmin
    height = bbox.ymax - bbox.ymin
    if normalized:
        return width * height
    else:
        return (width + 1) * (height + 1)


def ClipBBox(
        bbox  # type: NormalizedBBox
):
    bbox.xmin = max(min(bbox.xmin, 1.), 0.)
    bbox.ymin = max(min(bbox.ymin, 1.), 0.)
    bbox.xmax = max(min(bbox.xmax, 1.), 0.)
    bbox.ymax = max(min(bbox.ymax, 1.), 0.)
    bbox.size = BBoxSize(bbox)
    # TODO bbox.difficult = difficult


def DecodeBBox(prior_bbox, prior_variance, code_type, variance_encoded_in_target, clip_bbox, bbox, decode_bbox):
    if code_type == 0:
        if variance_encoded_in_target:
            decode_bbox.xmin = prior_bbox.xmin + bbox.xmin
            decode_bbox.ymin = prior_bbox.ymin + bbox.ymin
            decode_bbox.xmax = prior_bbox.xmax + bbox.xmax
            decode_bbox.ymax = prior_bbox.ymax + bbox.ymax
        else:
            decode_bbox.xmin = prior_bbox.xmin + float(prior_variance[0]) * bbox.xmin
            decode_bbox.ymin = prior_bbox.ymin + float(prior_variance[1]) * bbox.ymin
            decode_bbox.xmax = prior_bbox.xmax + float(prior_variance[2]) * bbox.xmax
            decode_bbox.ymax = prior_bbox.ymax + float(prior_variance[3]) * bbox.ymax

    elif code_type == 1:
        prior_width = prior_bbox.xmax - prior_bbox.xmin
        assert prior_width &amp;gt; 0
        prior_height = prior_bbox.ymax - prior_bbox.ymin
        assert prior_height &amp;gt; 0
        prior_center_x = (prior_bbox.xmin + prior_bbox.xmax) / 2.
        prior_center_y = (prior_bbox.ymin + prior_bbox.ymax) / 2.

        if variance_encoded_in_target:
            decode_bbox_center_x = bbox.xmin * prior_width + prior_center_x
            decode_bbox_center_y = bbox.ymin * prior_height + prior_center_y
            decode_bbox_width = math.exp(bbox.xmax) * prior_width
            decode_bbox_height = math.exp(bbox.ymax) * prior_height
        else:
            decode_bbox_center_x = float(prior_variance[0]) * bbox.xmin * prior_width + prior_center_x
            decode_bbox_center_y = float(prior_variance[1]) * bbox.ymin * prior_height + prior_center_y
            decode_bbox_width = math.exp(float(prior_variance[2]) * bbox.xmax) * prior_width
            decode_bbox_height = math.exp(float(prior_variance[3]) * bbox.ymax) * prior_height

        decode_bbox.xmin = decode_bbox_center_x - decode_bbox_width / 2.
        decode_bbox.ymin = decode_bbox_center_y - decode_bbox_height / 2.
        decode_bbox.xmax = decode_bbox_center_x + decode_bbox_width / 2.
        decode_bbox.ymax = decode_bbox_center_y + decode_bbox_height / 2.

    elif code_type == 2:
        prior_width = prior_bbox.xmax - prior_bbox.xmin
        assert prior_width &amp;gt; 0
        prior_height = prior_bbox.ymax - prior_bbox.ymin
        assert prior_height &amp;gt; 0
        if variance_encoded_in_target:
            decode_bbox.xmin = prior_bbox.xmin + bbox.xmin * prior_width
            decode_bbox.ymin = prior_bbox.ymin + bbox.ymin * prior_height
            decode_bbox.xmax = prior_bbox.xmax + bbox.xmax * prior_width
            decode_bbox.ymax = prior_bbox.ymax + bbox.ymax * prior_height
        else:
            decode_bbox.xmin = prior_bbox.xmin + float(prior_variance[0]) * bbox.xmin * prior_width
            decode_bbox.ymin = prior_bbox.ymin + float(prior_variance[1]) * bbox.ymin * prior_height
            decode_bbox.xmax = prior_bbox.xmax + float(prior_variance[2]) * bbox.xmax * prior_width
            decode_bbox.ymax = prior_bbox.ymax + float(prior_variance[3]) * bbox.ymax * prior_height

    else:
        print(&amp;quot;Unknown LocLossType.&amp;quot;)

    decode_bbox.size = BBoxSize(decode_bbox)
    if clip_bbox:
        ClipBBox(decode_bbox)


def first_compare(a, b):
    if a[0] &amp;gt; b[0]:
        return 1
    elif a[0] &amp;lt; b[0]:
        return -1
    else:
        return 0


def GetMaxScoreIndex(scores, threshold, top_k):
    score_index_vec = []
    for n in range(len(scores)):
        if scores[n] &amp;gt; threshold:
            score_index_vec.append((scores[n], n))

    score_index_vec.sort(key=functools.cmp_to_key(first_compare), reverse=True)
    if -1 &amp;lt; top_k &amp;lt; len(score_index_vec):
        score_index_vec = score_index_vec[: top_k]
    return score_index_vec


def IntersectBBox(bbox1, bbox2, intersect_bbox):
    if bbox2.xmin &amp;gt; bbox1.xmax or bbox2.xmax &amp;lt; bbox1.xmin or bbox2.ymin &amp;gt; bbox1.ymax or bbox2.ymax &amp;lt; bbox1.ymin:
        intersect_bbox.xmin = 0
        intersect_bbox.ymin = 0
        intersect_bbox.xmax = 0
        intersect_bbox.ymax = 0
    else:
        intersect_bbox.xmin = max(bbox1.xmin, bbox2.xmin)
        intersect_bbox.ymin = max(bbox1.ymin, bbox2.ymin)
        intersect_bbox.xmax = min(bbox1.xmax, bbox2.xmax)
        intersect_bbox.ymax = min(bbox1.ymax, bbox2.ymax)


def JaccardOverlap(bbox1, bbox2, normalized=True):
    intersect_bbox = NormalizedBBox(0., 0., 0., 0.)
    IntersectBBox(bbox1, bbox2, intersect_bbox)
    if normalized:
        intersect_width = intersect_bbox.xmax - intersect_bbox.xmin
        intersect_height = intersect_bbox.ymax - intersect_bbox.ymin
    else:
        intersect_width = intersect_bbox.xmax - intersect_bbox.xmin + 1.
        intersect_height = intersect_bbox.ymax - intersect_bbox.ymin + 1.
    if intersect_width &amp;gt; 0 and intersect_height &amp;gt; 0:
        intersect_size = intersect_width * intersect_height
        bbox1_size = BBoxSize(bbox1)
        bbox2_size = BBoxSize(bbox2)
        return intersect_size / (bbox1_size + bbox2_size - intersect_size)
    else:
        return 0


def ApplyNMSFast(
        bboxes,
        scores,
        score_threshold,
        nms_threshold,
        eta,
        _top_k,
        indices):
    assert len(bboxes) == len(scores)
    score_index_vec = GetMaxScoreIndex(scores, score_threshold, _top_k)
    adaptive_threshold = nms_threshold

    for score_index in score_index_vec:
        idx = score_index[1]
        keep = True
        for k in range(len(indices)):
            if keep:
                kept_idx = indices[k]
                overlap = JaccardOverlap(bboxes[idx], bboxes[kept_idx])
                keep = overlap &amp;lt;= adaptive_threshold
            else:
                break
        if keep:
            indices.append(idx)
        if keep and eta &amp;lt; 1 and adaptive_threshold &amp;gt; 0.5:
            adaptive_threshold = eta


def DecodeBBoxes(prior_bboxes, prior_variances, code_type, variance_encoded_in_target, clip_bbox, bboxes,
                 decode_bboxes):
    assert len(prior_bboxes) == len(prior_variances)
    assert len(prior_bboxes) == len(bboxes)
    num_bboxes = len(prior_bboxes)
    if num_bboxes &amp;gt;= 1:
        assert len(prior_variances[0]) == 4
    for n in range(num_bboxes):
        decode_bbox = NormalizedBBox(.0, .0, .0, .0)
        DecodeBBox(prior_bboxes[n], prior_variances[n], code_type,
                   variance_encoded_in_target, clip_bbox, bboxes[n], decode_bbox)
        decode_bboxes.append(decode_bbox)


def detection_out(mreshape_loc, mbox_conf_flatten, reshape_priorbox):
    background_label_id_ = 0
    confidence_threshold_ = 0.3
    keep_top_k_ = 200
    nms_threshold_ = 0.45
    top_k_ = 400
    eta_ = 1.0
    num_classes_ = 81
    share_location_ = True
    code_type_ = 1  # 0: CORNER, 1:CENTER_SIZE, 2:CORNER_SIZE
    variance_encoded_in_target_ = False

    confidence_threshold_ = confidence_threshold_ if confidence_threshold_ else 3.40282347e+38
    top_k_ = top_k_ if top_k_ else -1
    num_priors_ = int(reshape_priorbox.shape[2] / 4)
    num_loc_classes_ = 1 if share_location_ else num_classes_

    num = mreshape_loc.shape[0]

    # Retrieve all location predictions.
    loc_data = mreshape_loc.flatten()
    num_preds_per_class = num_priors_
    num_loc_classes = num_loc_classes_
    share_location = share_location_

    # GetLocPredictions Retrieve all location predictions.
    all_loc_preds = []
    for n in range(num):
        label_bbox = {}
        offset = num_preds_per_class * num_loc_classes * 4 * n
        for p in range(num_preds_per_class):
            start_idx = offset + p * num_loc_classes * 4
            for c in range(num_loc_classes):
                label = -1 if share_location else c
                if label not in label_bbox:
                    label_bbox[label] = {}
                label_bbox[label][p] = NormalizedBBox(
                    loc_data[start_idx + c * 4],
                    loc_data[start_idx + c * 4 + 1],
                    loc_data[start_idx + c * 4 + 2],
                    loc_data[start_idx + c * 4 + 3]
                )
        all_loc_preds.append(label_bbox)

    # GetConfidenceScores Retrieve all confidences.
    all_conf_scores = []
    conf_data = mbox_conf_flatten.flatten()
    num_classes = num_classes_

    for n in range(num):
        offset = num_preds_per_class * num_classes * n
        label_scores = {}
        for p in range(num_preds_per_class):
            start_idx = offset + p * num_classes
            for c in range(num_classes):
                if c not in label_scores:
                    label_scores[c] = []
                label_scores[c].append(conf_data[start_idx + c])
        all_conf_scores.append(label_scores)

    # GetPriorBBoxes
    # Retrieve all prior bboxes. It is same within a batch since we assume all
    # images in a batch are of same dimension.
    prior_bboxes = []
    prior_variances = []
    prior_data = reshape_priorbox.flatten()
    num_priors = num_priors_

    for n in range(num_priors):
        start_idx = n * 4
        bbox = NormalizedBBox(
            float(prior_data[start_idx]),
            float(prior_data[start_idx + 1]),
            float(prior_data[start_idx + 2]),
            float(prior_data[start_idx + 3]),
        )

        bbox_size = BBoxSize(bbox)
        bbox.size = bbox_size
        prior_bboxes.append(bbox)

    for n in range(num_priors):
        start_idx = (num_priors + n) * 4
        var = []
        for j in range(4):
            var.append(prior_data[start_idx + j])
        prior_variances.append(var)

    # DecodeBBoxesAll
    all_decode_bboxes = []
    clip_bbox = False

    all_loc_preds = all_loc_preds
    prior_bboxes = prior_bboxes
    prior_variances = prior_variances
    share_location = share_location_
    num_loc_classes = num_loc_classes_
    background_label_id = background_label_id_
    code_type = code_type_
    variance_encoded_in_target = variance_encoded_in_target_
    clip = clip_bbox
    assert (len(all_loc_preds) == num)

    for n in range(num):
        decode_bboxes = {}
        for c in range(num_loc_classes):
            label = -1 if share_location else c
            if label == background_label_id:
                continue
            if label not in all_loc_preds[n]:
                print(&amp;quot;Could not find location predictions for label &amp;quot;, label)
            decode_bboxes[label] = []
            label_loc_preds = all_loc_preds[n][label]
            DecodeBBoxes(prior_bboxes, prior_variances,
                         code_type, variance_encoded_in_target, clip,
                         label_loc_preds, decode_bboxes[label])
        all_decode_bboxes.append(decode_bboxes)

    num_kept = 0
    all_indices = []

    for n in range(num):
        decode_bboxes = all_decode_bboxes[n]
        conf_scores = all_conf_scores[n]
        num_det = 0
        indices = {}
        for c in range(num_classes_):
            if c == background_label_id_:
                continue
            if c not in conf_scores:
                print(&amp;quot;Could not find confidence predictions for label &amp;quot;, c)
            if c not in indices:
                indices[c] = []
            scores = conf_scores[c]
            label = -1 if share_location_ else c
            if label not in decode_bboxes:
                print(&amp;quot;Could not find location predictions for label &amp;quot;, label)
                continue
            bboxes = decode_bboxes[label]
            ApplyNMSFast(bboxes, scores, confidence_threshold_, nms_threshold_, eta_,
                         top_k_, indices[c])
            num_det += len(indices[c])

        if keep_top_k_ &amp;gt; -1 and num_det &amp;lt; keep_top_k_:
            score_index_pairs = []
            for label in indices:
                label_indices = indices[label]

                if label not in conf_scores:
                    print(&amp;quot;Could not find location predictions for &amp;quot;, label)
                    continue

                scores = conf_scores[label]
                for j in range(len(label_indices)):
                    idx = label_indices[j]
                    assert idx &amp;lt; len(scores)
                    score_index_pairs.append((scores[idx], (label, idx)))

            score_index_pairs.sort(key=functools.cmp_to_key(first_compare), reverse=True)

            score_index_pairs = score_index_pairs[: top_k_]

            new_indices = {}
            for j in range(len(score_index_pairs)):
                label = score_index_pairs[j][1][0]
                idx = score_index_pairs[j][1][1]
                if label not in new_indices:
                    new_indices[label] = []
                new_indices[label].append(idx)
            all_indices.append(new_indices)
            num_kept += keep_top_k_
        else:
            all_indices.append(indices)
            num_kept += num_det

    top_shape = [1, 1, num_kept, 7]

    top_data = np.zeros(tuple(top_shape), dtype=&amp;#x27;float32&amp;#x27;)
    if num_kept == 0:
        print(&amp;quot;Couldn&amp;#x27;t find any detections&amp;quot;)
        top_shape[2] = num
        top_data.reshape(tuple(top_shape))
        top_data.fill(-1)
        for n in range(num):
            top_data[0 + n * 7] = n

    top_data_shape = top_data.shape
    top_data_flatten = top_data.flatten()

    keep_count = 0
    count = 0
    for n in range(num):
        conf_scores = all_conf_scores[n]
        decode_bboxes = all_decode_bboxes[n]
        print(all_indices[n])
        for label in all_indices[n]:
            if label not in conf_scores:
                print(&amp;quot;Could not find confidence predictions for &amp;quot;, label)
                continue

            scores = conf_scores[label]
            loc_label = -1 if share_location_ else label
            if loc_label not in decode_bboxes:
                print(&amp;quot;Could not find location predictions for &amp;quot;, loc_label)
                continue

            bboxes = decode_bboxes[loc_label]
            indices = all_indices[n][label]
            keep_count += len(indices)
            for j in range(len(indices)):
                idx = indices[j]
                top_data_flatten[count * 7] = n
                top_data_flatten[count * 7 + 1] = label
                top_data_flatten[count * 7 + 2] = scores[idx]
                bbox = bboxes[idx]
                top_data_flatten[count * 7 + 3] = bbox.xmin
                top_data_flatten[count * 7 + 4] = bbox.ymin
                top_data_flatten[count * 7 + 5] = bbox.xmax
                top_data_flatten[count * 7 + 6] = bbox.ymax
                count += 1

    top_data = top_data_flatten.reshape(top_data_shape)

    return top_data, keep_count


if __name__ == &amp;#x27;__main__&amp;#x27;:
    coco_net = caffe.Net(&amp;#x27;VGG_coco_SSD_512x512_iter_360000_without_detection_output.prototxt&amp;#x27;, # Cut Detection Output Layer
                         &amp;#x27;VGG_coco_SSD_512x512_iter_360000_without_detection_output.caffemodel&amp;#x27;, caffe.TEST)

    image_path = &amp;#x27;ssd.jpg&amp;#x27;
    img = cv2.imread(image_path)
    resized_img = cv2.resize(img, (512, 512))

    input_data = np.asarray(resized_img)
    input_data = input_data.transpose((2, 0, 1))
    input_data = input_data.reshape(1, 3, 512, 512)
    input_data = input_data.astype(&amp;#x27;float32&amp;#x27;)

    blue_mean = 104.0
    green_mean = 117.0
    red_mean = 123.0

    input_data[:, 0] -= blue_mean
    input_data[:, 1] -= green_mean
    input_data[:, 2] -= red_mean

    coco_net.blobs[&amp;#x27;data&amp;#x27;].data[...] = input_data

    output = coco_net.forward()
    mreshape_loc = output[&amp;#x27;mreshape_loc&amp;#x27;]
    mbox_conf_flatten = output[&amp;#x27;mbox_conf_flatten&amp;#x27;]
    reshape_priorbox = output[&amp;#x27;reshape_priorbox&amp;#x27;]

    start = time.time()
    detections, keep_count = detection_out(mreshape_loc, mbox_conf_flatten, reshape_priorbox)
    end = time.time()
    print(&amp;quot;{:.2f}&amp;quot;.format(end - start))

    # parse the output
    det_label = detections[0, 0, :, 1]
    det_conf = detections[0, 0, :, 2]
    det_xmin = detections[0, 0, :, 3]
    det_ymin = detections[0, 0, :, 4]
    det_xmax = detections[0, 0, :, 5]
    det_ymax = detections[0, 0, :, 6]

    # get topN detections
    top_k = keep_count
    topk_indexes = det_conf.argsort()[::-1][:top_k]

    top_conf = det_conf[topk_indexes]
    top_label_indexes = det_label[topk_indexes]

    top_xmin = det_xmin[topk_indexes]
    top_ymin = det_ymin[topk_indexes]
    top_xmax = det_xmax[topk_indexes]
    top_ymax = det_ymax[topk_indexes]

    for i in range(top_conf.shape[0]):
        label = int(round(det_label[i]))
        xmin = int(round(top_xmin[i] * 512.0))
        ymin = int(round(top_ymin[i] * 512.0))
        xmax = int(round(top_xmax[i] * 512.0))
        ymax = int(round(top_ymax[i] * 512.0))
        score = top_conf[i]
        print(label, score, xmin, ymin, xmax, ymax)

        cv2.rectangle(resized_img, (xmin, ymin), (xmax, ymax), (0, 255, 0), 2)
    cv2.imwrite(&amp;quot;ssd_out_cut.jpg&amp;quot;, resized_img)

&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[何时使用引用参数]]></title><description><![CDATA[…]]></description><link>https://www.abellee.cn/2022/05/05/何时使用引用参数/</link><guid isPermaLink="false">https://www.abellee.cn/2022/05/05/何时使用引用参数/</guid><pubDate>Thu, 05 May 2022 23:35:00 GMT</pubDate><content:encoded>&lt;h1&gt;何时使用引用参数&lt;/h1&gt;&lt;p&gt;使用引用参数的主要原因有两个。 &lt;/p&gt;&lt;p&gt;程序员能够修改调用函数中的数据对象。 通过传递引用而不是整个数据对象，可以提高程序的运行速度。 当数据对象较大时（如结构和类对象），第二个原因最重要。这些 也是使用指针参数的原因。这是有道理的，因为引用参数实际上是基于 指针的代码的另一个接口。那么，什么时候应使用引用、什么时候应使 用指针呢？什么时候应按值传递呢？下面是一些指导原则： 对于使用传递的值而不作修改的函数。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果数据对象很小，如内置数据类型或小型结构，则按值传递。 &lt;/li&gt;&lt;li&gt;如果数据对象是数组，则使用指针，因为这是唯一的选择，并将指 针声明为指向const的指针。 &lt;/li&gt;&lt;li&gt;如果数据对象是较大的结构，则使用const指针或const引用，以提 高程序的效率。这样可以节省复制结构所需的时间和空间。 &lt;/li&gt;&lt;li&gt;如果数据对象是类对象，则使用const引用。类设计的语义常常要求 使用引用，这是C++新增这项特性的主要原因。因此，传递类对象 参数的标准方式是按引用传递。 对于修改调用函数中数据的函数： &lt;/li&gt;&lt;li&gt;如果数据对象是内置数据类型，则使用指针。&lt;/li&gt;&lt;li&gt;如果看到诸如 fixit（&amp;amp;x）这样的代码（其中x是int），则很明显，该函数将修改 x。如果数据对象是数组，则只能使用指针。 &lt;/li&gt;&lt;li&gt;如果数据对象是结构，则使用引用或指针。 &lt;/li&gt;&lt;li&gt;如果数据对象是类对象，则使用引用。&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[brew更换源]]></title><description><![CDATA[brew更换源 重置官方源：]]></description><link>https://www.abellee.cn/2022/04/14/brew_change_source/</link><guid isPermaLink="false">https://www.abellee.cn/2022/04/14/brew_change_source/</guid><pubDate>Thu, 14 Apr 2022 14:35:00 GMT</pubDate><content:encoded>&lt;h1&gt;brew更换源&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;# 替换brew.git:
cd &amp;quot;$(brew --repo)&amp;quot;
git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git

# 替换homebrew-core.git:
cd &amp;quot;$(brew --repo)&amp;quot;/Library/Taps/homebrew/homebrew-core
git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git

# 替换homebrew-cask.git:
cd &amp;quot;$(brew --repo)&amp;quot;/Library/Taps/homebrew/homebrew-cask
git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git

# 替换homebrew-bottles:
echo &amp;#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&amp;#x27; &amp;gt;&amp;gt; ~/.bash_profile

#更新配置
source ~/.bash_profile

#验证
brew update
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;重置官方源：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;#重置brew.git:
cd &amp;quot;$(brew --repo)&amp;quot;
git remote set-url origin https://github.com/Homebrew/brew.git

#重置homebrew-core.git:
cd &amp;quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;quot;
git remote set-url origin https://github.com/Homebrew/homebrew-core.git

#重置homebrew-cask.git：
cd &amp;quot;$(brew --repo)&amp;quot;/Library/Taps/homebrew/homebrew-cask
git remote set-url origin https://github.com/Homebrew/homebrew-cask
#Caskroom 的 Git 地址在 2018年5月25 日从 https://github.com/caskroom/homebrew-cask 迁移到了 https://github.com/Homebrew/homebrew-cask 

#最后注释掉/.bash_profile里的homebrew-bottles并保存，以bash为例
vim ~/.bash_profile

#更新.bash_profile
source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[CompleteSuicideManual]]></title><description><![CDATA[…]]></description><link>https://www.abellee.cn/2022/03/03/CompleteSuicideManual/</link><guid isPermaLink="false">https://www.abellee.cn/2022/03/03/CompleteSuicideManual/</guid><pubDate>Thu, 03 Mar 2022 02:34:00 GMT</pubDate><content:encoded>&lt;h1&gt;完全自杀手册&lt;/h1&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;这本书，详详细细写尽自杀的方法。&lt;/p&gt;&lt;p&gt;这本书不是常自杀者的记录报告，也不是想说明有关自杀的理由。虽然可以将它当成是一本杂记书来阅读，不过整本书的走向是朝着「如何自杀」的方向进行。&lt;/p&gt;&lt;p&gt;啰啰嗦嗦的开场白，可能您已经厌烦了。&lt;/p&gt;&lt;p&gt;不知道从多久以前开始「为什么年轻人要走向死亡?」这个话题就不断反复再反复地被谈论着。那时，比方说七十年代，所得到的结论是「虚无主义」、「不欢年代」等等。然而，像是「为什么不可以自杀?」、「为什么一定要活着?」这类的问题，却始终没有任何解答。&lt;/p&gt;&lt;p&gt;言归正传，目前需要的是一本能让「自杀」付诸实现的书。&lt;/p&gt;&lt;p&gt;有关这样的书，十年前出版的「自杀的方法」，几乎也只是写些拉拉杂杂的内容，令人烦腻之至。现在应该知道的是，纯粹的自杀方法。&lt;/p&gt;&lt;p&gt;在美国，只有一部可以进行安乐死的自杀装置，是由一位学者发明创造的。(案例30)而本书将是日本唯一的一本「以语言文字为工具的自杀装置」。&lt;/p&gt;&lt;p&gt;谈到这里，很想马上从吃药自杀的方法介绍起，不过为了让「现在为什么要自杀?」这个问题更明白些，以及其它种种商业上的理由，不得不先写一些拉拉杂杂的东西。&lt;/p&gt;&lt;h3&gt;Chernobyl&lt;/h3&gt;&lt;p&gt;……我在等待时机，准备「大显身手」。二十年前发生学生暴动时，大家曾以为「厉害人物要出现了！」阿波罗号登陆月球、石油危机、苏联侵略某个国家、昭和年代即将结束，我想「这次的举动将会惊天动地」。然而却只是３级震度，只不过倒下一面墙而已。学生彼此对视，笑着说「太棒了！」，活动即告结束。……(节录自知上寿『黎明』后记)&lt;/p&gt;&lt;p&gt;八十年代即将结束时，曾经掀起一阵「世界末日潮」、「危险话题」，最受喜爱的乐团唱着Chernobyl的歌&lt;sup&gt;1&lt;/sup&gt;，小孩子的玩笑话全都充满死亡的味道，少女为了准备迎接世界大战而开始寻找同伴。我们则为「厉害人物要出现了！」、「也许明天会是世界末日！」而兴奋不已。&lt;/p&gt;&lt;p&gt;然而，世界末日并没有到来。原子弹始终没有爆发，全面核战争的梦也早已消失的无影无踪。八十年代的革命家，彻底的体验到挫折感。&lt;/p&gt;&lt;p&gt;最后大家终于明白，「大显身手」是不可能实现的，二十二世纪一定会来。(当然，二十一世纪即将来临，因为不会有所谓的世界大战。)世界绝对不会出现末日。只是稍稍接遇到「异界」及「外面」，并无法得到满足。如果希望有更大的刺激，如果真的希望世界走到末日，除非是做「那件事」。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;1&lt;/sup&gt; Chernobyl：小林祐介的歌曲。收录专辑： picnic (2008)&lt;/blockquote&gt;&lt;h3&gt;A Long Vacation&lt;/h3&gt;&lt;p&gt;说什么「枯燥乏味」并无济于事－－因为我们运气不好，就出生在历史的这个舞台。&lt;/p&gt;&lt;p&gt;一直到二十二世纪，我们会每天早上七点钟起床，然后上学或上班，反复说一些毫无重点的话。在学校，一次又一次不断的背英文单字、历史年号；在公司则一面说些「无聊透了」之类的，却又以一星期、一个月、一年的周期，反复好几个星期、好几个月、好几年的做实际上真正无聊的工作。步调缓缓的最先进产品不断出现，步调缓缓的政治家继续贪污，电视内容步调缓缓的继续激动。但是，当关掉电视环顾四周时，却又是一如往常的另一个每一天。(唤醒「关掉电视后那种奇妙的黑暗」，正是这本书的另一个目标。)&lt;/p&gt;&lt;p&gt;三岛由纪夫在他的自传小说「假面的告白」中，提到:「日常生活」比战争还要恐怖。我们总是一忍再忍的过着这种「令人颤抖的恐怖日常生活」。为的是能带来莫名其妙的「安定将来」。一路上步步为营，小心翼翼的避免方向有所偏差。没有像电视连续剧这样喜剧收场的结尾。只是，奇怪的「喜悦」总是不断步调缓缓的继续着。是的！关键词是「步调缓缓」和「反复」。持续的相同事物步调缓慢的反复出现；这是让想死的情绪膨胀的第一要素。&lt;/p&gt;&lt;h3&gt;Another Brick in the Wall&lt;/h3&gt;&lt;p&gt;一九七八年日本曾经发生一件「纸上迷宫自杀事件」。&lt;/p&gt;&lt;p&gt;一对住在日本富山县的高一孪生姊妹，被发现在树林内上吊自杀身亡。其中一人的笔记本上，画有用四条直线和数条横线交错形成的纸上迷宫图案(一种沿着线寻找源头的游戏)。图案下面，分别写着「日本人的Ｘ」、「自杀」、「ROS」、「御三家」这几个令人无法理解的字眼。从上面画的线是一直连接到「自杀」的地方。由于其父母怎么也无法想出她们自杀的动机，所以结论是两人因为「迷宫」而自杀。据说「ROS」也许是滚动的石头 (Rolling Stones)的意思。因为上面还写着「日本人的X」、「讨厌亚洲人」等字，所以说不定与此有关。不过，始终无法了解这些字的意思。从前，有个法官说:「人的生命比地球还重。」然而，这是极无价值的误解。正如同七十年代两位高中女生早已察觉一般，人的生命很轻，和「日本人的X」以及「ROS」一样轻。五十年代末期，美国大众社会学者说过:「大众就像陷入无力感的原。」七十年代末期，英国的摇滚乐团唱着:「我们是墙壁中的一块砖。」非常走红。即使是进入九十年代，日本的这个状况依然没有任何改变。&lt;/p&gt;&lt;p&gt;老样子，我们仍旧是墙壁中的一块砖——证据是，假设我们之中有任何一个人死了，必定会有某个人来取而代之。没有一个人的存在是无可替换的，也没有一个政治家是足以被暗杀的。只少了一块砖，墙壁并不会因此而倒塌。&lt;/p&gt;&lt;p&gt;我们每个人都充满无力感，存在不存在都无所谓，换句话说，生命是轻的；这是让想死的情绪膨胀的第二要素。&lt;/p&gt;&lt;h3&gt;Clockwork Orange&lt;/h3&gt;&lt;p&gt;抱着这种无力感，步调缓缓的反复做相同事情的我们，一点一点忘掉「真正活着的真实感」。已经渐渐忘了自己是活着还是死了。你有感觉自己是「活着」吗?现在，生与死之间，只被一条细得几乎看不见的界线隔开而已。&lt;/p&gt;&lt;p&gt;因此，「生命很重要，所以不可以自杀。」、「只要能活着，一切都会有转机。」、「因为周遭的人会难过，所以必须活着。」这类的话，已被打入冷宫，不再具有任何说服力。制止自杀的有效话语，已经消失；引导自杀的信号已经出现。&lt;/p&gt;&lt;p&gt;是的，要死也可以。如果上班或上学，活着很不舒服的话，很无趣的话，甚至还很痛苦的话，是可以跨越细得快看不见的界线去寻求死亡，任谁都无法加以阻止。&lt;/p&gt;&lt;p&gt;前面也说过，反正活着，一切也不会有所改变。虽然不具有特异功能，不过大致上可以知道，今后的社会或自己会发生什么样的事。「将来！将来！」，就算这句话再怎么有说服力都没用。你的人生，大概是在出生地念小学和中学，上补习班为联考读书，然后进入一所高中或大学就读，浑浑噩噩玩了四年后进入某家公司上班工作。男性的话二十来岁三十岁前结婚，隔年生子，几次的工作异动或升迁，最高升到经理职位，六十岁退休，之后的十年或二十年过着享受自己兴趣的生活，最后死亡。顶多就是这样。而且，令人绝望的，这竟是最能让人安心的理想人生。&lt;/p&gt;&lt;p&gt;在这样的状况下，平凡活着已经再也没什么重大意义了。假使不是现在活着，或许只是像做烤鸡用的嫩鸡一样，「被给予生命活着」而已。所以在适当的地方为人生画上休止符，并不是「悲伤不已」、「不会发生第二次」、「担心会出现波及效应」这类的问题。&lt;/p&gt;&lt;p&gt;自杀是相当积极的行为。&lt;/p&gt;&lt;h3&gt;Angel Dust&lt;/h3&gt;&lt;p&gt;我有一个朋友，他有一种叫「天使尘埃」&lt;sup&gt;2&lt;/sup&gt;的药物，吃了之后头脑会变得昏昏沉，可以毫不在意地从高楼往下跳的强烈药物，他把这些药物装在金属小囊中，做成项链，形影不离的带在身上。他说:「必要的时候，可以吃下这个来寻死。」我的朋友没有固定工作，每天游手好闲，过得非常愉快。&lt;/p&gt;&lt;p&gt;希望这本书可以成为那条金属小囊项链。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;2&lt;/sup&gt; 天使尘埃(Angel Dust)，即环苯利定(Phencyclidine,PCP)，一种可以强烈的引起幻觉、改变神志的药物。可以导致暴力行为、昏迷、癫痫等，一旦使用将引发对大脑不可逆的损害。&lt;/blockquote&gt;&lt;h3&gt;Another Thing&lt;sup&gt;3&lt;/sup&gt;&lt;/h3&gt;&lt;p&gt;在濒临绝望，寻找自杀的方法时偶然发现了这本书，于是对她深深着迷。因为这本书的特殊性和年代的久远，费劲周折才找到这份尽管不完全但弥足珍贵的中文译本。「完成这本书的翻译和校对！」是我在最后时刻的最后心愿，看着书本由残缺趋向完整的变化，心里也是满满的成就感，也能安然离去了。&lt;/p&gt;&lt;p&gt;值得注意的是，这本书中对较常用的烧炭自杀的方法并未提及，所以我私自加入了烧炭自杀的小节(在「瓦斯中毒」章中)和其他的一些内容。有人能对这本书加以完善，我想这是作者所支持的。此外，随着时代的更替，在「药物」一章中提到很多药物(尤其是溴化物类和巴比妥类)已被毒性相对更低的物质取代且对这些药物的监管趋于严格。但我仍尽力将这些药物的成分列出并加以注释，希望能帮助需要的人。&lt;/p&gt;&lt;p&gt;因为贫瘠的医学和药学知识和编校时人已处于混乱和崩溃边缘，书中内容难免有谬误和不完善之处，望见谅。&lt;/p&gt;&lt;p&gt;最后，感谢此书繁体中文版本的译者和在此过程中提供帮助的人，没有你们没有今天的一切。(Rena,2018-8-5)&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;3&lt;/sup&gt; Another Thing节由Rena编写。她完成了一部分翻译和文本由繁体中文到简体中文的转换、校对工作，本书的注释亦由她完成。&lt;/blockquote&gt;&lt;h2&gt;Contents 目录&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;编者前言&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#1-taking-medicines-%E8%8D%AF%E7%89%A9&quot;&gt;1. TAKING MEDICINES 药物&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#2-hanging-%E4%B8%8A%E5%90%8A&quot;&gt;2. HANGING 上吊&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E8%87%AA%E6%9D%80%E5%9C%B0%E5%9B%BE1-%E6%A0%91%E6%B5%B7&quot;&gt;自杀地图1 树海&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#3-leaping-%E8%B7%B3%E6%A5%BC&quot;&gt;3. LEAPING 跳楼&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E8%87%AA%E6%9D%80%E5%9C%B0%E5%9B%BE2-%E9%AB%98%E5%B2%9B%E5%B9%B3%E7%A4%BE%E5%8C%BA&quot;&gt;自杀地图2 高岛平&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#4-cutting-the-wrist-and-carotid-%E5%89%B2%E8%85%95%E5%89%B2%E5%96%89%E7%AD%89&quot;&gt;4. CUTTING THE WRIST AND CAROTID 割腕与刎颈&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#5-jumping-%E6%92%9E%E8%BD%A6&quot;&gt;5. JUMPING 撞车&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E8%87%AA%E6%9D%80%E5%9C%B0%E5%9B%BE3-%E4%B8%89%E5%8E%9F%E5%B1%B1&quot;&gt;自杀地图3 三原山&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#6-gas-poisoning%E7%93%A6%E6%96%AF%E4%B8%AD%E6%AF%92&quot;&gt;6. GAS-POISONING 瓦斯中毒&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#7-electrocuting-%E8%A7%A6%E7%94%B5&quot;&gt;7. ELECTROCUTING 触电&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E8%87%AA%E6%9D%80%E5%9C%B0%E5%9B%BE4-%E8%87%AA%E6%9D%80%E6%9D%91%E7%86%8A%E5%8F%96%E7%94%BA&quot;&gt;自杀地图4 自杀村-熊取町&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#8-drowning-%E6%8A%95%E6%B0%B4&quot;&gt;8. DROWNING 投水&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#9-self-burning-%E8%87%AA%E7%84%9A&quot;&gt;9. SELF-BURNING 自焚&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#10-freezing-%E9%9B%AA%E5%B1%B1%E5%86%BB%E6%AD%BB&quot;&gt;10. FREEZING 冻死&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#11-special-cases-%E5%85%B6%E5%AE%83%E8%87%AA%E6%9D%80%E6%89%8B%E6%AE%B5&quot;&gt;11. SPECIALCASES 其它自杀手段和自杀统计&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%90%8E%E8%AE%B0&quot;&gt;编者后记&lt;/a&gt;&lt;/li&gt;&lt;li&gt;致死量引用文献引用及参考文献(已丢失)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Illustration: Kazunori Sadahiro&lt;/p&gt;&lt;p&gt;Book Design: Seiichi Suzuki Design Office&lt;/p&gt;&lt;h2&gt;1. Taking Medicines 药物&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;－－－－－&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;如果能成功的话，吃药是最佳的自杀手段。不过自杀未遂的情况很多，及准备时间过度费时是一大问题，痛苦的程度因药物不同而异。&lt;/p&gt;&lt;p&gt;桌上散放着红、黄、蓝等各种颜色漂亮的胶囊和药片，或是一小堆雪白的粉末。当把这些吞服下去的时候会慢慢地睡着了，而且再也不会醒过来。这是在平静的睡眠延长线上的死亡，也是最理想的自杀手段，而且是只有透过药物才有可能实现的手段。&lt;/p&gt;&lt;p&gt;某种药物会控制头脑。脑部是担负人体之自我组织性的系统控制装置。不论是呼吸功能或心脏跳动，维持生命活动的功能都是由大脑控制的。在此要说明的是，透过药物使这一控制装置逐渐失去协调，而用来破坏整个「自我」体系的技术也可以说是一种自己动手进行的脑叶切除手术的方法。&lt;/p&gt;&lt;p&gt;不会致命的药不算是药。&lt;/p&gt;&lt;p&gt;不论什么药物，基本上都有「会产生作用的量」和「中毒量」及「致死量」。也有专家说，「不会致死的药不算是药。」不管什么药都有致死的可能。只不过是作用量和致死量之间的差距较大，要达到致死量就必须吞服相当大的量，比较难掌握罢了。现在的药物，这种差距都放宽了，换句话说是安全药物。这里要介绍的，是差距较小的。&lt;/p&gt;&lt;p&gt;不过，此问题就在于「致死量」。本书所述药物服用量的标准，是各种文献所载不同药物的致死量，但也因文献而各有不同，幅度相差也很大。同时，致死量又因个人的体质以及是否经常服药而大有差异，因此，也有虽大大超量服用却被救活，而服用少量的却死亡的例子。&lt;/p&gt;&lt;p&gt;本来应决定生与死界限的「致死量」，却有因剂量不同、幅度参差、因人而异而未能致死的情况。于是有的研究工作者就说，真的想死的话就服用致死量的三倍吧。这样一来，致死量已经不是表示「致死的量」了。本书暂且将最少量与最大量之间作为「致死服用量」(未特别注明的均为成人服用量)，这也只是大体的标准。这种致死量的含糊不清不但表明了生与死的模糊界限，也是使药物自杀产生困难的最大原因。&lt;/p&gt;&lt;p&gt;不过，这里还要再啰嗦几句。仅仅把手腕割开一道口子是绝不会死去的，但这里所举出的药物，服用了就真的会死去。如果只是想体验一下自杀的滋味(这也并不是坏事)，还是在手腕上割开一道口子较好。&lt;/p&gt;&lt;h4&gt;[注意] 加强消化器官的吸收以避免反胃&lt;/h4&gt;&lt;p&gt;最应该避免的是将服下的药物吐出来。服用药物而死，换句话说就是急性药物中毒。只要设想一下喝酒的情景就行了。当然，酒精也不是不能致死。常常就有大学生因酒精中毒而死亡。可是，一般情况是当身体无法再承受时就会吐出来。这只是将酒精换成药物而已。由于大幅地超量服用，呕吐出来也是很自然的事。所以，掌握适量是非常困难的。&lt;/p&gt;&lt;p&gt;阻止呕吐当然也有方法，只是加强消化器官的吸收，就像对症疗法那样。对因生理的拒绝反应而呕吐出来的，则无方法对应。总之，只有朝「致死量」努力服用，哪怕只是再多吃一片。&lt;/p&gt;&lt;h4&gt;[服用ハルシオン&lt;sup&gt;4&lt;/sup&gt;是不会死的]&lt;/h4&gt;&lt;p&gt;其它应注意的，就是了解「致死量」之后再服用药物。可以致死的药物有很。譬如，当今成为话题的安眠药ハルシオン。睡意来得快，服用后可能会丧失记忆力，所以看起来非常危险，但却是很安全的药。一位喝酒同时吞服了八十片ハルシオン的二十七岁女性，睡着后又像梦游症患者似的爬了起来，向双亲说了句「到罗森去」就倒了下去。被送到医院的第二天恢复知觉，经检查的结果一切正常。仅仅看上去危险是不会死人的。&lt;/p&gt;&lt;p&gt;本书对不明了致死量的药物一律不加以介绍。没有计划的行动，不但会失败而且还要尝到不必要的痛苦。一位吞服氰酸钾的家庭主妇，整个晚上都抓挠胸，被发现时胸部一片血肉模糊。&lt;/p&gt;&lt;p&gt;顺便提一下，有关药物自杀的传闻，有很多都是虚假不实的。常有人说，会对内脏或脑子留下终生不治的严重后遗症，但仅从本书所举对神经系统产生作用的药物来看，有的医生说几乎都是没有这种副作用的。&lt;/p&gt;&lt;p&gt;也有「反自杀论者」宣扬说，健康保险不承担自杀的治疗费，所以要花费巨大的金钱，但这也是不真实的。一位二十六岁的女子尽管吞服了我们不知道成分和剂量，但在「医院里也认为药性最强的药」的镇静剂二十片片剂和二十包粉末，而被送进医院整整昏迷了两天，但她却使用保险卡支付了医疗费。所以，不被谎言所欺骗，也是需要注意的一点。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;4&lt;/sup&gt; ハルシオン：太平(Halcyon)，使用三唑仑的睡眠诱导剂(安眠药)的代表性产品名称。一般是浅蓝色片剂，每片含三唑仑0.25mg。&lt;/blockquote&gt;&lt;h4&gt;[准备]静脉注射&lt;/h4&gt;&lt;p&gt;首先，防止呕吐有各式各样的对策。最简便的方法是，将药物放在绿波之类的东西上用火烘烤使其融化，或用热水溶解变成水溶液，然后用针筒向静脉注射。这样的话，当然不会呕吐，而比肠胃吸收的作用更大，需要量也少得多。如果针筒内混入空气，脑血管会发生空气栓塞而死亡。还有因血管内混入血液以外的异物，引起休克而死亡的。由于异物的混入，血管会有相当程度的疼痛。多次注射的情况，疼痛得很厉害，可对手臂进行冷敷，总之，需要想些办法。&lt;/p&gt;&lt;h4&gt;[注意最后的晚餐]&lt;/h4&gt;&lt;p&gt;不想注射而想服用药物去死的人，就有必要事先调整一下胃的状态了。为了更快地吸收药物，有效地引起急性中毒，胃里就不应留有食物。但如果过于空腹，会产生反应过敏而呕吐，掌握它的分寸是很难的。&lt;/p&gt;&lt;p&gt;在决定自杀前的一小时左右应该喝杯红茶吃一片吐司，服用一点防醉药亦可。片剂应事前碾碎，放入粉碎机使其成粉末。胶囊则应去掉，留下粉末，或者放入热水里使其溶成液状。然后将药物混在布丁或酸奶里，加些蜂蜜，迅速吞服。但也有专家说，将药物混在布丁或酸奶里并不会加快吸收。或许将它认作是帮助吞服的一种方法较好。&lt;/p&gt;&lt;h4&gt;[同时喝点酒]&lt;/h4&gt;&lt;p&gt;同时喝点酒是必要的条件。据说，酒对中枢神经产生作用的药物具有相辅相乘的效果，对任何药物都可加速溶解速度，并用时的效果可提高50%。饮料除了酒之外，最好再多准备一点。&lt;/p&gt;&lt;p&gt;再者就是一定要选择别人找不到的地方，至少要保证八小时之内能单独停留的地方，例如旅馆就是最合适的。如果在数小时以内被人发现，就成为自杀未遂，要尝到反复灌肠的痛苦。一位二十五岁的女子因企图自杀而被灌肠，她说「早知那么痛苦的话就不自杀了。」(不过她还说了一句「或许会再自杀。」)&lt;/p&gt;&lt;p&gt;准备工作完成后，就开始介绍自杀药吧。&lt;/p&gt;&lt;h4&gt;[大众药]&lt;/h4&gt;&lt;p&gt;市面贩卖的药物，其毒性较低。专业书上写说:「(市面贩卖的药物)单剂大量服用的话几乎是不会致死的。」这一叙述虽不能认为是正确的，不过，服用大众药去自杀确实是难的。如前所述，药物有各种产生作用的量和引起中毒的量，所以，与中毒量保持一定的距离而以低毒性制造的就是大众医药。因此，一般的药房都有出售。可是，自杀药的基本点是「容易到手」和「服用即睡」。无法到手的话，即使介绍也无意义。有必要知道服用大众医药物是难以致死的，但之前专业书籍却写道「几乎是不会致死的」。也就是说，并不是百分之百地不可能，这里就介绍这种例外。&lt;/p&gt;&lt;h3&gt;(1) 兴奋剂(提神药物)&lt;/h3&gt;&lt;h4&gt;利斯隆S(リスロンS)&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;一片中成分&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;一盒份量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;利斯隆S&lt;/td&gt;&lt;td&gt;溴戊酸[基]尿素&lt;sup&gt;5&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;估计10g(A)&lt;br/&gt; 10～30g(B)&lt;br/&gt; 20g(C) &lt;br/&gt; 15～20g(D,E,F)&lt;/td&gt;&lt;td&gt;100mg&lt;/td&gt;&lt;td&gt;100～300颗&lt;/td&gt;&lt;td&gt;12颗/450日元&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;p&gt;(注)所谓通称是指由WHO(世界卫生组织)所定的世界共同药物名称。制药公司配合通称所制造的商品名称是一般所使用的「利斯隆S」之类的商品名称。&lt;/p&gt;&lt;p&gt;(注)表中括号内的英文字母表示作为推断参考的文献。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在战后的五十至六十年代里，出现过第二次安眠药自杀热。以二十多岁的年轻人为主，服用安眠药自杀大大地超过上吊人数。溴戊酮尿素(Bromovaleryl尿素)在当时以「布罗巴林(ブロバリン)」的商标名出售，是自杀热的主要药物。在1926年芥川龙之介服用安眠药自杀而引起第一次自杀热时，「布罗姆&lt;sup&gt;6&lt;/sup&gt;以「卡尔摩汀」之名出售被广泛使用。太宰治也用「卡尔摩汀」多次情死未遂。因此说「布罗姆」是日本的安眠药自杀由来已久的药品。&lt;/p&gt;&lt;p&gt;现在，「布罗巴林」被指定为「须经医生指示使用药」，没有医生的处方是买不到的。「利斯隆S」(佐藤制药公司)在市面上出售的则与「布罗巴林」的成分和剂量相同。显然这并不违法。因为，每片中的「布罗姆」的分量在500mg以下是可以出售的。这是8mm大小的片剂，白色味苦。&lt;/p&gt;&lt;p&gt;条件成熟后只要服用致死量，中枢神经系统被控制，(脑和脊髓神经的刺激作用失灵)迅速丧失意识，快的话一小时左右主要就会因呼吸停止而死亡。有人服用50片「布罗巴林」而死掉的(案例2)，但还是服用200片为适当。200片是满满的两只手的量，如果是这些总量的话，也不必要混在酸乳酪那么麻烦服用了(案例1)。&lt;/p&gt;&lt;p&gt;此外，在一片药品中含有100mg「布罗姆」的药物中有「姆尔蜜锭ム－ルミン」(小林药品工业)、「日夜(デイナイト)」(大正制药工业)等，「利斯隆S」是纯由「布罗姆」制成的，但其它的却都含有若干咖啡因等一些成分。由于含有多余的成分，服用量就随之增加，呕吐的可能性也增大。&lt;/p&gt;&lt;p&gt;「姆尔蜜锭」之外，后述的「Acetaminophen&lt;sup&gt;7&lt;/sup&gt;」也在一片中含有150mg的「布罗姆」。服用相当于「布罗姆」致死量的100～200片的话，也达到「Acetaminophen」的致死量区。这是双倍致死量，更加危险。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;6&lt;/sup&gt; 布罗姆：即上文溴戊酮尿素。&lt;sup&gt;7&lt;/sup&gt; Acetaminophen：即[对乙酰氨基酚](#4-其它)。&lt;/blockquote&gt;&lt;h5&gt;[如何购买]&lt;/h5&gt;&lt;p&gt;「利斯隆S」的说明书上写着「对不安、紧张有镇静作用的药品」，只要说明症状即可买到，但最大的问题是怎样能买到10～20盒。多数药房无货，制药公司批发给药房的量也不多，一次是买不到多少的。有时也有因药房的判断而不予出售的情况。大车站附近的药房一般都有供应，寻找五家左右，每半个月去买一次，两个月就积下二十盒。这种药，每日服用2～3片，盒内只有12片，所以每隔十天去买一次也不足为奇。不过，为了防止滥用，药房有时不出售，或者询问症状，或者建议前去医院。某药房工作人员说:「看上去不对劲的人不卖给他。」这种场合，你就解释说「不想去看医生。」、「要是让同事(同学)知道精神不佳可不得了。」这对唯恐滥用药物也是一样的。当找不到出售的药房时，可打电话给制药公司，他们会告诉你那几家有出售。&lt;/p&gt;&lt;h4&gt;阿塔拉克斯(アタラックスP，阿陀P)&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;一片中成分&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;一盒份量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;阿塔拉克斯P&lt;/td&gt;&lt;td&gt;盐酸羟胺&lt;/td&gt;&lt;td&gt;估计25～250mg/kg&lt;/td&gt;&lt;td&gt;25mg&lt;/td&gt;&lt;td&gt;60～600颗(体重60kg)&lt;/td&gt;&lt;td&gt;20颗/1500日元&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这种药，一般药房都有出售。买到60～600个胶囊，即3～30盒是很容易的。前面说过，「弄到手，服用即睡」是安眠自杀药的条件，而这个「阿塔拉克斯P」(ファイザ－製藥公司，通稱「阿陀P」)就是条件最好的药品。致死量是体重每公斤需要25～250mg，幅度太大，而且又是含糊的推测，所以六十公斤体重的人可服用600片。&lt;/p&gt;&lt;p&gt;仅仅将600个绿色小胶囊放在面前，就会引起一种幻觉，但一个胶囊中含有的成分即使全部服用也不过是20mg。胶囊里有黄色粉末，集中起来也只有小碗的四分之一，这点量是用不着混在酸乳酪里也很容易服用的。&lt;/p&gt;&lt;p&gt;盐酸羟胺具有抑制中枢神经，稳定自律神经的效果。大量服用时会出现睡觉、疲倦、头晕，最后因呼吸停止而死亡。服用时一定要并用酒类。中枢神经抑制作用会增强，如在此时把身体弄凉的话效果则更好。&lt;/p&gt;&lt;p&gt;成分完全相同的药物还有「吉斯隆P(ジスロンP)」(帝国化学)、「波布斯尔(ボブス－ル)」(加藤翠松堂)等。「阿塔拉克斯P」有100片装的。&lt;/p&gt;&lt;p&gt;不过，有一位服用了「阿陀P」100片并喝了一瓶啤酒和一杯威士忌的40岁妇女，在十七小时后丧失知觉并呕吐，被发现后送往医院，两天以后痊愈出院。总之，要再三考虑，并应服用多量。&lt;/p&gt;&lt;h3&gt;(2) 止咳剂&lt;/h3&gt;&lt;h4&gt;巴布隆S(パブロンS)、阿涅通颗粒(アネトン)&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;一片中成分&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;一盒份量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;巴布隆S止咳液&lt;/td&gt;&lt;td&gt;磷酸二氢可待因&lt;/td&gt;&lt;td&gt;0.5g(G)&lt;/td&gt;&lt;td&gt;30mg&lt;/td&gt;&lt;td&gt;117瓶&lt;/td&gt;&lt;td&gt;2瓶/1165日元&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;止咳阿涅通颗粒&lt;/td&gt;&lt;td&gt;磷酸可待因&lt;/td&gt;&lt;td&gt;推测0.5g～1g(A) &lt;br/&gt; 约0.8g(D,G) &lt;br/&gt; 2.4g(H) &lt;br/&gt; 0.5～0.8mg(E)&lt;/td&gt;&lt;td&gt;15mg&lt;/td&gt;&lt;td&gt;33～160包&lt;/td&gt;&lt;td&gt;16包/1800日元&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;八十年代曾一度流行过「一口气喝下止咳液后狂跳」的游戏。因为止咳液里含有作用于脑内咳中枢而镇咳的「可待因(codeine)」，和扩张气管的麻黄素(ephedrine)等麻药性物质的缘故。可待因是鸦片成分，麻黄素的致死量虽不清楚但它是兴奋剂的原料，所以很危险。理应禁用的，但不使用就止不了咳，因此，现在出售的止咳剂，大多都含有这两方面的成分。&lt;/p&gt;&lt;p&gt;「巴布隆S」(大正制药)也是这类药物之一。八十年代使用较多的是「布隆液」(SS制药)，但现在这种药不含麻黄素，所以，这里举出与可待因的构造几乎相同的磷酸二氢可待因(Dihydrocodeine)30mg和麻黄素的姊妹成分dl-盐酸甲基麻黄碱(Methyl ephedrine)的「巴布隆」。大量服用磷酸可待因会造成睡意，而麻黄素则有觉醒作用。整体看来，与其说是睡眠，毋宁说兴奋作用方面较强，导致心跳数的增加和呼吸加速因循环不全而死亡。此外，含有30mg二氢可待因(Dihydrocodeine)的止咳剂有「新德尼(トニン)止咳液」和「新メトロンSコ－ワ液」(兴和)。&lt;/p&gt;&lt;p&gt;「阿涅通颗粒」(ファィザ－)的dl-盐酸甲基麻黄碱的含有量为10mg。关于可待因《最终的出路》一书中列举了具体的2.4mg这个数字，所以就相信它而服用160包以上吧。这样就要服用240mg的颗粒，从量来说只是一小碗罢了。某专家的意见是:「混在酸乳酪一类的东西」白色颗粒，味甜。&lt;/p&gt;&lt;h3&gt;(3) 止吐剂&lt;/h3&gt;&lt;h4&gt;拉克摩亚(ラックモア)&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;一片中成分&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;一盒份量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;拉克摩亚&lt;/td&gt;&lt;td&gt;迪门希得里纳德&lt;/td&gt;&lt;td&gt;25～250mg/kg(A) &lt;br/&gt; 至少2.5g(I)&lt;/td&gt;&lt;td&gt;50mg&lt;/td&gt;&lt;td&gt;30～300颗(60kg)&lt;/td&gt;&lt;td&gt;6颗/800日元&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;止吐剂，意外地含有很多危险成分。某位二十四岁的妇女为了堕胎而服用迪门希得里纳德7.5g后，出现呕吐、目眩、抽搐，陷入昏睡状态，90分钟以后因呼吸不全而死亡。「拉克摩亚(ラックモア)」(藤泽药品工业)除了迪门之外还含有盐酸吡哆醇7mg，无水咖啡因14mg，比纯迪门希得里纳德的药物容易弄到手。这是白、蓝、白三层结构的大一点的少许片剂。含有迪门希得里纳德50mg的药物有「卡拉克斯(カ－ラックS)」(共荣)、「迪门希得里纳德」、「摩德(モ－ト)」(摩德制药)、「Drive Soft」(长生堂)等好几种，药房也有出售。加上服用至少30片就能死去的话，对自杀是再好不过的了。&lt;/p&gt;&lt;p&gt;服用这种药物的问题在于是否能很好地睡觉。前面提到这种药对中枢神经产生作用导致呼吸停止，副作用为有睡意、头痛等，但由于不是精神药物，也就不能迅速睡着了。要是一定要睡的话，可并用市面上卖的安眠药。&lt;/p&gt;&lt;p&gt;不过，也有服用800mg迪门希得里纳德，虽产生了幻觉但未死去的20岁和22岁的男子的事例。&lt;/p&gt;&lt;h4&gt;旅行明尼亚(トラベルミンシニア)&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;一片中成分&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;一盒份量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;旅行明尼亞&lt;/td&gt;&lt;td&gt;磷羟基苯甲酸&lt;/td&gt;&lt;td&gt;25mg/kg(A) &lt;br/&gt; 45mg/kg(G)&lt;/td&gt;&lt;td&gt;40mg&lt;/td&gt;&lt;td&gt;38～60颗(60kg)&lt;/td&gt;&lt;td&gt;10颗/650日元&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;「著名的『旅行明尼亚』也会死人吗?」或许有人会产生疑问，「旅行明尼亚」的成分是磷羟基苯甲酸40mg，和二羟丙基茶碱(Diprophylline)26mg。其余的成分不多，危险成分磷羟基苯甲酸所占的比例最大。其它的，含有咖啡因等预防睡意成分的也很多。「磷羟基苯甲酸」作为抗组胺剂(histamine)而产生作用，中枢神经系统的抑制和兴奋的症状出现混合。产生剧烈的脑刺激和严重的意识丧失。可是，抗组胺剂具有催眠效果的作用，禁止在服用后驾驶车辆，如果大量服用会睡着的。&lt;/p&gt;&lt;h4&gt;仙巴亚(センパア)&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;一片中成分&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;一盒份量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;仙巴亚&lt;/td&gt;&lt;td&gt;溴化氢东莨菪碱&lt;/td&gt;&lt;td&gt;50mg(A) &lt;br/&gt; 5～10mg(D)&lt;/td&gt;&lt;td&gt;0.25mg&lt;/td&gt;&lt;td&gt;200颗&lt;/td&gt;&lt;td&gt;6颗/777日元&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;防吐防晕药的优点，就在于人们认为「谁都不会用那种东西去自杀」。你去购买时可以说「因为要出远门，想多买点预防晕车的药。」，药房也不会起疑心的。「仙巴亚」(大正制药)一盒只有六片，要买200片只需要三十三盒，是不必担心的。&lt;/p&gt;&lt;p&gt;溴化氢东莨菪碱具有抑制副交感神经的作用，大量服用会抑制呼吸。副作用为有睡意，同时有错乱、幻觉，吞咽困难等，服用后是否立即睡着是有疑问的。含有溴化氢东莨菪碱的药物以防止晕车船的较多，目前市面上供应的药物中，「仙巴亚」东莨菪碱的含量最多，而且不含其它多余成分。直径一公分的大片剂，要200片就需要弄碎，无苦味。&lt;/p&gt;&lt;h3&gt;(4) 其它&lt;/h3&gt;&lt;h4&gt;大正东普库(トンプク)、隆三宝胶囊 A&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;一片中成分&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;一盒份量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;大正东普库 &lt;br/&gt; 隆三宝胶囊 A&lt;/td&gt;&lt;td&gt;对乙酰氨基酚&lt;sup&gt;8&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;0.2～1g/kg&lt;/td&gt;&lt;td&gt;300mg&lt;/td&gt;&lt;td&gt;40～200包(60kg)&lt;/td&gt;&lt;td&gt;6包/825日元 &lt;br/&gt; 6胶囊/500日元&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;「大正东普库」(大正制药)和「隆三宝胶囊Ａ」(三宝制药)含有300mg的对乙酰氨基酚(Acetaminophen)具有镇静作用和解热作用。大量摄取可产生睡意、目眩、头痛、恶心、呕吐，陷于昏睡。最后危及肝脏而死亡，不能说是安眠药。不过，「大正东普厍」的一包中含200mg的溴戊酮尿素，所以容易睡着。药品的注意事项也写着「容易引起睡意」而禁止服用后驾驶汽车和操作机器等。白色小颗粒，味苦但服用到口内有清凉感。&lt;/p&gt;&lt;p&gt;镇痛剂「诺信(ノ－シン)」(アラクス )等，在一袋中也含有300mg的对乙酰氨基酚。其它配合物也很多，但这有「一下子可买很多」的优点。如果要列举出含有对乙酰氨基酚的解毒镇痛剂的话那就不胜枚举了，市面上出售得很多，不妨到处采购可达致死量的药量。举例来说，一个四十九岁的妇女服用了30片雪德丝Ａ「セデスA」(含对乙酰氨基酚80mg、溴戊酮尿素100mg、乙柳酰胺&lt;sup&gt;9&lt;/sup&gt;200mg、无水咖啡因25mg)引起了肝、肾衰竭，经过了十六天的兴奋和昏睡，因呼吸停止而死亡。只服用30片(对乙酰氨基酚2.4g)而死去的这个妇女是幸运的。这种「雪德丝Ａ」的成分中产生最厉害的副作用的是对乙酰氨基酚。现在出售的「新雪德丝片」(盐野义制药)用アリルイソプロピルアセチル尿素&lt;sup&gt;10&lt;/sup&gt;30mg、咖啡因40mg代替布罗姆，其它成分无变化。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;8&lt;/sup&gt; 对乙酰氨基酚：对乙酰氨基酚(Acetaminophen,APAP)是一种被广泛使用的非处方止痛和退烧药。服用超过7.5 g/d或150 mg/kg可能导致肝脏损害。&lt;sup&gt;9&lt;/sup&gt; 乙柳酰胺：乙柳酰胺(エテンザミド,英Ethenzamide)是一种水杨酸类解热镇痛药。镇痛效果和阿司匹林等水杨酸衍生物类似，副作用会导致肝、肾受损。口服给小鼠时的半致死剂量为549 mg / kg&lt;sup&gt;10&lt;/sup&gt; アリルイソプロピルアセチル尿素(Allylisopropylacetylurea):是一种镇静类药物，对中枢神经有抑制作用，有成瘾性。&lt;/blockquote&gt;&lt;h4&gt;耶斯塔隆摩卡片(エスタロンモカ錠)、阿司匹林&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;一片中成分&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;一盒份量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;耶斯塔隆摩卡片&lt;/td&gt;&lt;td&gt;咖啡因&lt;/td&gt;&lt;td&gt;约10g(A,D,J,K)&lt;/td&gt;&lt;td&gt;100mg&lt;/td&gt;&lt;td&gt;100颗&lt;/td&gt;&lt;td&gt;24颗/450日元&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;阿司匹林&lt;/td&gt;&lt;td&gt;阿司匹林&lt;/td&gt;&lt;td&gt;10～15g &lt;br/&gt; 20～30g(I)&lt;/td&gt;&lt;td&gt;500mg&lt;/td&gt;&lt;td&gt;20～60颗&lt;/td&gt;&lt;td&gt;20颗/450日元&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;有人认为「经常在喝咖啡」而不太在乎咖啡因是不好的。咖啡因会刺激脑内的血管运动中枢和呼吸中枢，加强心脏的肌肉收缩力，是刺激性很强的药剂。大量饮用可引起兴奋、血压上升、心室颤动(心脏下部的心室部分收缩的现象)，心肺停止直至死亡。阿司匹林刺激呼吸中枢等的中枢神经系统和代谢系统，导致呼吸过急、代谢异常、高热，因呼吸衰竭或休克等死亡，对肾脏也会造成损伤。两者都具有兴奋作用，服用绝对不会睡眠，但因容易到手和少量即可致死的原因加以介绍。对想安然死去的人是无缘的药品。试举一例，一个服用了500mg的阿司匹林100片(50g)的二十一岁女学生，经历了倦怠感、恶心、兴奋、呼吸加促、昏睡等各种症状后，约十九小时后因呼吸停止而死亡。从上述例子来看，服用阿司匹林到死亡的时间是相当短的。&lt;/p&gt;&lt;p&gt;因「耶斯塔隆摩卡片」(SS制药、咖啡色的片剂，味极苦)和「阿司匹林片」(アラクス)含的多余成分最少而进行介绍的咖啡因和阿司匹林大量地被商品化，咖啡因有防止打瞌睡的「咖啡软片(カ－フェソフト錠)」(エ－ザイ)、「咖啡凉锭(カフェク－ル)」(アラクス)及其它以内服药居多。阿司匹林有「格兰德鲁( グランド－ル)」(藤泽药品工业)、「新格雷兰(新グレランA)」(武田药品工业)等以阿司匹林为主要成分解热镇痛剂。&lt;/p&gt;&lt;h3&gt;[案例研究1] 向报纸投稿预告自杀的青年销售员&lt;/h3&gt;&lt;p&gt;一九五六年八月二日，晚间十时左右当目白一家电影院连续放映两部影片，领位小姐发现一个青年还在睡觉，于是打算叫醒他，却发现此人已经冰凉。他是喝着酒慢慢地吞服了200片Brovarin&lt;sup&gt;11&lt;/sup&gt;和30片Adorm&lt;sup&gt;12&lt;/sup&gt;。在立即被送往医院后，整整昏睡了一天一夜，四日清晨死去。他出生在东京，二十三岁。从水产大学中途退学，在制药公司工作过四年半，主要从事打包和送货工作。其兄也是制药公司的药剂师，估计从那里得到了药物的致死量和服用方法。在前一个月的七月二十八日，因「私人原因」辞去了制药公司的同一天，又开始某百货公司「分期付款订货」的推销。但是，他对该公司所规定的达不到目标业绩，则全部佣金归公司所有的办法极为不满，竟然在自杀前一天的八月一日向朝日新闻的投稿栏寄出了一封写着「当我离开这个世间之时，大声疾呼这个公司的不合法做法。」的一封信。也就是说，他以投稿方式预告自己的死亡。&lt;/p&gt;&lt;p&gt;他在给百货公司的股长遗书中这样写道，「当我决意进行早已下了决心的事之前，只不过是很偶然地遇到了百货公司这一段经历。我并没有把这个社会存在弱肉强食的责任，推给机构基层的头上……」，这说明不是因指责公司不公而自杀的。&lt;/p&gt;&lt;p&gt;人很开朗，又有爱好哲学的一面，关在房间里写过侦探小说的这个年青人的自杀动机，至今不明。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;11&lt;/sup&gt; Brovarin：即Bromisova,一种镇静剂。&lt;sup&gt;12&lt;/sup&gt; Adorm：应为镇静剂安定的音译，但没有在任何地方查到相关资料。&lt;/blockquote&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;在这里需要检验的，并不是他在死之前所采取的奇怪行为，而是他吞服了200片Brovarin&lt;sup&gt;13&lt;/sup&gt;，30片为Adorm&lt;sup&gt;14&lt;/sup&gt;(巴尔比士酸(barbituric)系列安眠药)等大量安眠药而居然没有吐掉，完成了自杀。一般情况下，吞服这么大量的片剂都会吐出来的，这也是服毒自杀的缺点之一，他恐怕是在电影上映的两个多小时里一点一点地吞服，以及证明了「一点一点吞服就不会吐出」的对应做法。&lt;/p&gt;&lt;p&gt;Brovarin销售时包装就只有100mg的，他吞服了20克，就是说足以达到了10-30克的致死量。据说，和这些安眠药一起喝下酒的话，效果就会达到十倍，他大概是从其兄那里听来的。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;13&lt;/sup&gt; Brovarin：应为Bromisoval。是一种催眠/镇静类药物，于1907年发现，通常与非甾体类抗炎药联合使用，过量使用会引起急性溴化物中毒。&lt;sup&gt;14&lt;/sup&gt; Adorm：这个东西无法在Google，Wiki，Drug.com上检索到，猜测是一种精神药物。&lt;/blockquote&gt;&lt;h3&gt;[案例研究2] 服用Brovarin50片，留下「死亡记录」的学生&lt;/h3&gt;&lt;p&gt;一九七二年五月，一个二十岁的学生在房间里从椅子上滑倒而死去。他房间里的桌子上放着遗书，题为《最后时刻》的崭新笔记本，开头就写道「我并不是受所谓厌世观的影响而逃避这个社会的。我之所以要现在消失，是感到现在正是时机才决定自杀的。」&lt;/p&gt;&lt;p&gt;而且更奇怪的是，他把自己吞服药物起到失去知觉为止的经过，详细地写在大学笔记本里。&lt;/p&gt;&lt;p&gt;「现在是一九七二年五月十九日下午七时七分，我在两三分钟前吞服了50片Brovarin。我不知道再过几分钟或几小时后会睡着，并与这个社会告别，但我将观察我本人的死到最后一刻。……十时十五分了，一点都不想睡。打开收音机听了一会儿，又关上了。我想保持冷静但还是兴奋的，平常所爱好的音乐今天却感到厌烦。我想仔细地回顾一下自己的人生……(关于双亲和友人有五张纸的记录)……十一时三十分，从刚才起就一直在打呵欠，看来最后的时刻即将来临了。但我要看着死的心情到最后一刻，所以不断地告诫自己要坚持。我不知道自己的尸体将在什么时候被发现，但我自己想看看自已的欲望不断涌现上来。……12:05。」&lt;/p&gt;&lt;p&gt;笔记到此结束，大概就在这个时候他神志不清了。&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;Brovarin50片相当于5克溴戊酮尿素，其量比致死量低得多，但我不认为该青年在撒谎，所以就可以知道吞服这么多的量也会死去的。同时也知道了吞服50片Brovarin就会慢慢地增加睡意，大约两小时睡着以后就不会再醒过来了。而且到失去知觉为止完全没有痛苦，神志也很清楚。当然，会因本人的体力和健康状态而大为不同，如果马上就倒下的话大概会在更短的时间里睡着的。&lt;/p&gt;&lt;p&gt;他的自杀真的可说是「实验」。关于留下记录一事，他写道:「什么也不留下就死去，很容易被误解为在我这个年龄常有的忧郁结果。我无论如何也不想被误解，因此，我在这里很冷静地留下我在仔细看看自己的证据。」可是，我们完全搞不清楚他自杀的动机，所以只有认为他是「为了试试死去时候的心情而死掉的」。&lt;/p&gt;&lt;p&gt;不管怎样，到即将失去知觉为止一直握着笔杆写出的记录，是极其珍贵的。在最后的「五分钟」之后，恐怕是应该接着写「然后就该睡着了吧」的字句。&lt;/p&gt;&lt;p&gt;此外，作为服用溴戊酮尿素的例子，有一个吞服50片五种布罗姆系列的药物的二十二岁女性，在服用后十二小时被发现并治疗，在半睡状态中延续了十天后，因心脏衰弱和并发肾脏炎而死去。&lt;/p&gt;&lt;p&gt;还有，分别吞服了100片Brovarin即10克的两个十五岁女学生，走路时摇摇晃晃地被发现，用救护车送进医院，五小时后恢复意识，现在已痊愈了。&lt;/p&gt;&lt;h3&gt;(5) 限制医药品&lt;/h3&gt;&lt;p&gt;对于有可能被滥用作为麻药，或被用来自杀的药物，厚生省将其规定为剧药、毒药、要指示药、指定医药品等，不让一般人取得。在此要介绍的就是这类的「限制医药品」。不容易取得并不等于弄不到，或许有人已经有了处方亦未可知，所以加以介绍。&lt;/p&gt;&lt;h4&gt;歇尔信(セルシン)、吉亚结巴姆(ジアセパム)、苏奈孔(ソナコン)&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;限制&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;歇尔信 &lt;br/&gt; 吉亚结巴姆 &lt;br/&gt; 苏奈孔&lt;/td&gt;&lt;td&gt;吉亚结巴姆&lt;/td&gt;&lt;td&gt;暗示500mg(J) &lt;br/&gt; 500mg以上(H)&lt;/td&gt;&lt;td&gt;100颗以上&lt;/td&gt;&lt;td&gt;要，指&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;p&gt;注：劇毒等记号是根据药事法（台湾）所规定的限制事项。(劇)表示剧烈药物，(毒)表示毒药；两者都很剧烈而且毒性很强，处理时必须严加管理。(要)是必须有医生指示的药品（处方药），如果没有医生的处方笺就无法贩卖。(指)是指定药品，禁止药剂师以外的人使用。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;近来，一些精神科医生乱开处方。当你推开精神料的门扉，告诉医生说「睡不着」、「焦躁不安」的，立即会开出「歇尔信」、「吉亚结巴姆」等抗焦虑剂的可能性很大。有时内科也会开出此处方的。在精神科拿到抗焦虑的处方后，你就说「没作用」而要求调换药物。因为，究竟哪一种对患者更适合，医生也需要试试看。&lt;/p&gt;&lt;p&gt;然而，正因为医生们首先会开出这类Benzo Diazepam&lt;sup&gt;15&lt;/sup&gt;系药物，也说明它们的安全性很高。即使你很幸运拿到这类处方，但因作用少而与致死量的距离太大，为了弄到致死量就不得不经常跑医院。所开的处方，一天至少也不过是15mg以内，所以至少要积存一个月的药量。而且，医生也曾担心所开的药物被累积而用于自杀。正因为容易到手所以不适合于自杀。有过估计吞服了450～500mg的吉亚结巴姆的两个患者，在四十八小时都先后恢复了健康的例子。&lt;/p&gt;&lt;p&gt;「雪雷那敏(セレナミン)」「克拉西那(クラシナ)」等商品名虽异，但都属「吉亚结巴姆」的药物。有时你不明白医生开的是什么药的时候，可以参考「医生所开药物指南」一类书籍。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;15&lt;/sup&gt; Benzo Diazepam(BZD,BZs)：即苯二氮卓，苯二氮卓类药物可增强神经递质 γ-氨基丁酸(GABA)对GABA A受体的作用，从而产生镇静，催眠(睡眠诱导)，抗焦虑(抗焦虑)，抗惊厥和肌肉松弛特性。高剂量的许多短效苯二氮卓也可能引起 顺行性遗忘和分解。过量服用会导致深层昏迷。&lt;/blockquote&gt;&lt;h4&gt;太妃拉尼尔(トフラニ－ル)、克利特敏(クリテミン)、其它&lt;/h4&gt;&lt;p&gt;「太妃拉尼尔」等抗忧郁症剂，对那些抗焦虑剂不起作用的，极度的忧郁、失眠等病是适合的。比抗焦虑剂难弄到手，但你可向医生表明难以入睡、抗焦虑剂不起作用等，就可能得到处方。甚至可以说明想自杀。如果真的陷入忧郁状态的话，有时会开朗，有时活泼，一旦药物中断，即又回到了原状。&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;限制&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;トフラニ－ル &lt;br/&gt; クリテミン&lt;/td&gt;&lt;td&gt;塩酸イミプラミン&lt;sup&gt;16&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;10～210mg/kg(A) &lt;br/&gt; 最少3g(I)&lt;/td&gt;&lt;td rowspan=&quot;5&quot;&gt;25mg錠(60kg)&lt;br/&gt;24～504颗&lt;/td&gt;&lt;td&gt;要&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;スルモンチ－ル(同)&lt;/td&gt;&lt;td&gt;マレイン酸トリミプラミン&lt;sup&gt;17&lt;/sup&gt;&lt;/td&gt;&lt;td rowspan=&quot;4&quot;&gt;10～210mg/kg(A) 最少5g(I)&lt;/td&gt;&lt;td rowspan=&quot;4&quot;&gt;劇,要,指&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;アナフラニ－ル(同)&lt;/td&gt;&lt;td&gt;塩酸クロミプラミン&lt;sup&gt;18&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ラントロン&lt;br/&gt;トリプタノ－ル(同)&lt;/td&gt;&lt;td&gt;塩酸アミトリプチリン&lt;sup&gt;19&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ノリトレン(同)&lt;/td&gt;&lt;td&gt;塩酸ノルトリプチリン&lt;sup&gt;20&lt;/sup&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ルジオミ－ル(同)&lt;/td&gt;&lt;td&gt;塩酸マプロチリン&lt;sup&gt;21&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;最少5g(I)&lt;/td&gt;&lt;td&gt;25mg錠/200颗&lt;/td&gt;&lt;td&gt;要,指&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这是所列出的抗忧郁剂，其性质都相似，大量服用后会出现头痛、目眩、想睡觉。有时也会引起精神错乱、幻觉，一般很快进入睡梦。但手足的痉挛则是常见的中毒作用。虽认为不会对内脏造成损害，但也有对肝脏造成影响的例子。如同时并用中枢神经抑制剂和酒类，效果增强。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;16&lt;/sup&gt; 塩酸イミプラミン：即盐酸丙咪嗪，一种抗抑郁药物。&lt;sup&gt;17&lt;/sup&gt; マレイン酸トリミプラミン：一种抗抑郁药，副作用可能导致意识模糊，幻觉、意识障碍，意识水平降低，意识丧失，休克等。&lt;sup&gt;18&lt;/sup&gt; 塩酸クロミプラミン：氯米帕明，一种抗抑郁药。&lt;sup&gt;19&lt;/sup&gt; 塩酸アミトリプチリン: 阿米替林，最早的三环类抗抑郁药之一，服用后有可能增加自杀风险。&lt;sup&gt;20&lt;/sup&gt; 塩酸ノルトリプチリン：去甲替林，最早的三环类抗抑郁药物之一。&lt;sup&gt;21&lt;/sup&gt; 塩酸マプロチリン：马普替林，种四环类抗抑郁药，用于治疗抑郁症，服用后有可能增加自杀风险。&lt;/blockquote&gt;&lt;h4&gt;因斯敏(インスミン)&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;限制&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;インスミン&lt;/td&gt;&lt;td&gt;フルラゼパム&lt;sup&gt;22&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;3g(H)&lt;/td&gt;&lt;td&gt;15mg錠/200颗&lt;/td&gt;&lt;td&gt;劇,要,指&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;「因斯敏」虽不是抗焦虑剂和抗忧郁剂，但作为安眠药则较普遍被医生处方的マイナ－·トランキライザ－。当然，如大量服用会形成兴奋状态，但因抑制中枢神经，很快就会入睡，因呼吸停止而死亡。同样地，如并用酒类和其它抑制中枢神经的药物即可加大其作用。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;22&lt;/sup&gt; フルラゼパム：氟西泮，是一种苯二氮䓬类派生药物。该药可作为抗焦虑药、镇痉剂、镇静剂及肌肉松弛剂。长期服用可能成瘾。&lt;/blockquote&gt;&lt;h4&gt;Wintermin，抗特敏(コントミン)&lt;/h4&gt;&lt;p&gt;强效镇静剂的作用效果非常大。一般人只要服用一片，不久就会感到强烈的睡意。一个二十一岁的大学生在听课时服了一片「WINTERMIN」后竟然酣睡，当他醒过来时下一堂课已开始。就是说，他对周围人的走动毫无察觉，足足睡了五个多小时。&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;限制&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Wintermin&lt;br/&gt;抗特敏&lt;/td&gt;&lt;td&gt;塩酸Chlorpromazine&lt;/td&gt;&lt;td&gt;急性致死量15～150mg/kg(A)&lt;/td&gt;&lt;td&gt;25mg錠/36～360颗&lt;/td&gt;&lt;td&gt;劇,指&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;「WINTERMIN」、「抗特敏」就是这种强效镇静剂。这种药是给症状严重的，不是神经症而是精神分裂症患者使用的，所以更难弄到手，不过致死度很高。这种药同样抑制中枢神经，死因是呼吸停止。重要的是在睡意来临前须吞服够致死量的药物。&lt;/p&gt;&lt;p&gt;不过，也有人吞服9.75g后获救的例子。中毒症状为:持续高热、意识障碍、呼吸困难、循环虚脱、脱水症状出现之后，因急性肾衰竭而死亡。&lt;/p&gt;&lt;h4&gt;巴比妥(barbital)、伊苏米塔尔(イソミタ－ル)、其它&lt;/h4&gt;&lt;p&gt;这些是吸了会死人的。其作用量和致死量之间的幅度极小，据说服用一点点就会入睡而死亡。欧美安乐死协会也大力推荐该药。不过，百分之百地弄不到手的。因为年份已经很久了，目前日本几乎都不使用，即使得到处方，这也只给症状极其严重的人使用。不过，在海外则有可能弄到，所以在此加以介绍。&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;服用量(致死)&lt;/th&gt;&lt;th&gt;限制&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;巴比妥&lt;/td&gt;&lt;td&gt;Barbital&lt;sup&gt;23&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;2g(G)&lt;/td&gt;&lt;td&gt;只有粉末&lt;/td&gt;&lt;td rowspan=&quot;5&quot;&gt;劇,要,指&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;インミタ－ル(同)&lt;/td&gt;&lt;td&gt;Amobarbital&lt;sup&gt;24&lt;/sup&gt;&lt;/td&gt;&lt;td rowspan=&quot;2&quot;&gt;推断1.5g(A)&lt;br/&gt;1.5g(G)&lt;br/&gt;最少6g,暗示6～8g(I)&lt;br/&gt;4.5g(H)&lt;/td&gt;&lt;td&gt;100mg錠/15～80颗&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;フェノバ－ル(同)&lt;/td&gt;&lt;td&gt;Phenobarbital&lt;sup&gt;25&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;30mg錠/50～200颗&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ラボナ(同)&lt;/td&gt;&lt;td&gt;Pentobarbital Calcium&lt;sup&gt;26&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;推断1g(A)&lt;br/&gt;最少6～8g,暗示10g(I)&lt;br/&gt;3g(H)&lt;/td&gt;&lt;td&gt;50mg錠/50～200颗&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;チクロパン(同)&lt;/td&gt;&lt;td&gt;Hexobarbital&lt;sup&gt;27&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;2g(I)&lt;/td&gt;&lt;td&gt;只有粉末&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这些都是属于巴比妥酸(Barbituric)&lt;sup&gt;28&lt;/sup&gt;系的安眠药，大量服用即可使心脏和呼吸停止而死去的极端危险药物。中毒症状有头痛、痉挛、精神错乱等，如大量服用会一下子陷入昏迷。如果能弄到手，则是没有比这更好的安乐自杀药了。&lt;/p&gt;&lt;p&gt;打算在海外购买的话，因商品名不通用，所以应记住一般名称。据说，荷兰的规定是比较松的。&lt;/p&gt;&lt;p&gt;不过，也有下述的例子。一个五十一岁的医生，估计吞服了20g的苯巴比妥即phenobarbital的粉末，整整四天陷于昏迷状态，后来通过人工透析回复了知觉，继续不断出现妄想、幻想、兴奋之后，经过一个月，精神上没留下任何障碍的出院了。&lt;/p&gt;&lt;p&gt;对这类几乎弄不到手的，又知道其致死量的药物，在本章末列表供作参考。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;23&lt;/sup&gt; Barbital：巴比妥&lt;sup&gt;24&lt;/sup&gt; Phenobarbital：异戊巴比妥&lt;sup&gt;25&lt;/sup&gt; Phenobarbital：苯巴比妥&lt;sup&gt;26&lt;/sup&gt; Pentobarbital Calcium：戊巴比妥钙&lt;sup&gt;27&lt;/sup&gt; Hexobarbital：环己烯巴比妥&lt;sup&gt;28&lt;/sup&gt; 巴比妥酸：丙二酰脲，又称巴比妥酸。一种白色无臭结晶体，难溶于冷水和乙醇，溶于热水和乙醚。通常含有两分子结晶水。在空气中易风化。水溶液呈酸性。可以与金属反应生成盐类。上文表格中的巴比妥等均属巴比妥酸的衍生物。巴比妥类药物是一类作用于中枢神经系统的镇静剂，属于巴比妥酸的衍生物，其应用范围可以从轻度镇静到完全麻醉，还可以用作抗焦虑药、安眠药、抗痉挛药。长期使用则会导致成瘾性和身体损害。巴比妥类药物目前在临床上已很大程度上被苯二氮䓬类药物所替代不过，在全身麻醉或癫痫的治疗中仍会使用巴比妥类药物。&lt;/blockquote&gt;&lt;h3&gt;(6) 麻药&lt;/h3&gt;&lt;p&gt;麻药是最接近死亡的药物。与其它的医药品相比，其致死量非常的少。但是，推荐麻药作为自杀药物却多少有所顾忌。&lt;/p&gt;&lt;p&gt;本来我就不知道怎样弄到手。即使有人告诉我说「外国人常去的俱乐部就有」，可是，一般还是无法知道是哪个俱乐部，又是谁会卖给我。即使弄到手，但这又含有多少不纯物。再说，这又是哪一种麻药也完全不懂。&lt;/p&gt;&lt;p&gt;同时，也因为身体是否习惯，其中毒作用和致死量又大不相同。本来致死量就是因人而异的，麻药的话，更为明显。慢性中毒者是不适用一般的致死量的(有的记录说是十倍)，这种致死法，除大量摄取之外别无他法了。这就是说，麻药是不适合有计划性的自杀者使用的。正因为如此，下面所介绍的是，只是给那些能弄到手或已经在手的，而且知道其成分的人看的。&lt;/p&gt;&lt;h4&gt;兴奋系列-安非他命、美他非他命&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死剂量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;安非他命&lt;sup&gt;29&lt;/sup&gt;&lt;br/&gt;美他非他命&lt;sup&gt;30&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;估计120mg(A)&lt;br/&gt;120mg(静脉注射)(L)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;曾经有个问题说:「是要停用兴奋剂，还是要了结人生?」，正确的回答应该是「使用兴奋剂了结人生。」&lt;/p&gt;&lt;p&gt;第二次大战刚结束时，民间流通商品名叫「希罗朋(ヒロポン)」的掀起一场兴奋剂热的药物，今天则称作「夏布(シャブ&lt;sup&gt;31&lt;/sup&gt;)」、「斯皮德(スピ－ド&lt;sup&gt;32&lt;/sup&gt;)」，被流氓以至于俱乐部青年人广泛使用，至今仍占日本麻药界的王者宝座的就是这种麻药。安非他命(amphetamine)主要在欧美使用，而美他非他命(Methamphetamine，希罗朋)的发明者是日本人，后来又在全世界广为流传成为代表日本的麻药。不妨说一句，希罗朋在希腊文中是「爱好工作」的意思。&lt;/p&gt;&lt;p&gt;兴奋剂刺激中枢神经系统，特别对大脑刺激较大，提高集中力和活动欲望。第一次在静脉注射致死量的美他非他命的时候，在数秒至数十秒内心跳急剧，自律神经出现异常，出汗、呼吸深而加速、瞳孔放大，因循环器官衰竭而死亡。有时会引起脑出血。如饮用则效果降低，所以必须在静脉里注射。&lt;/p&gt;&lt;p&gt;不过，已经习惯了的人，即使一天摄取0.5～1g也不会致死。一个二十七岁的女子服用了2g美他非他命后陷入昏迷，瞳孔放大、面部肌肉剧烈抽搐而住进医院，十一天后痊愈出院了，可以认为她是很禁得起该药物。相反地，也有仅1.5mg就死去的例子。估计不会有人去尝试的，但要避免和「歇尔信」或「WINTERMIN」并用，因为会降低作用的。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;29&lt;/sup&gt; 安非他命：即苯丙胺，一种中枢神经兴奋剂，是苯乙胺的替代物。常用于治疗ADHD、嗜睡症、肥胖症。长期过量摄取可成瘾，并能导致大脑受损和横纹肌溶解症。&lt;sup&gt;30&lt;/sup&gt; 美他非他命：甲基苯丙胺(甲基安非他命)，即冰毒，是一种极强的中枢神经兴奋剂，被广泛的用于娱乐用途，成瘾性极强，过量摄取可能导致精神病，横纹肌溶解症，全身癫痫和颅内出血。&lt;sup&gt;31&lt;/sup&gt; シャブ：砂布，应是日本民间对冰毒的别称。&lt;sup&gt;32&lt;/sup&gt; スピ－ド：即Speed，民间对冰毒的别称。&lt;/blockquote&gt;&lt;h4&gt;古柯碱(Cocaine)&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死剂量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;古柯碱&lt;sup&gt;33&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;1.2g(A)(J), 注射0.2～0.5g, 口服1.0～1.5g(M), 约1.5g(D)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;据一九八四年美国妇女杂志所作的调查，二十五岁以下的女性有三分之一使用过古柯碱。这是现在人们的兴趣还在上升之中的美国麻药。目前尚未有古柯碱死亡的报告，致死量比其它麻药高得多，较不适合自杀。&lt;/p&gt;&lt;p&gt;对中枢神经产生刺激作用，使呼吸深，其药理作用被认为与兴奋剂大致相同。一般都是从鼻子吸入粉末，但静脉注射的效果大得多。据说一般急性中毒的话，使用之后三小时之内就会死亡。濒死状态的意识，与幻觉剂以外的麻药相同，即使有些头痛但神志清楚，会相当冷静地思考「这不太好」、「不能这个样子死去」。常用者每天摄取1.5～2g也不至于死的。&lt;/p&gt;&lt;p&gt;古柯碱是古柯树树叶的主要成分，如想在海外购入，则应在原产地的哥伦比亚购买。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;33&lt;/sup&gt; 古柯碱：即可卡因，是一种提取自古柯树的生物碱，亦是一种兴奋剂，多做为毒品使用，吸食后可致激动，瞳孔散大，心动过速。有成瘾性，使用可卡因会增加中风、心肌梗死、败血症与猝死的风险。大剂量摄取会造成高血压。&lt;/blockquote&gt;&lt;h4&gt;抑制系列&lt;/h4&gt;&lt;h5&gt;鸦片、吗啡、海洛因 &lt;sup&gt;34&lt;/sup&gt;&lt;/h5&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;抑制剂&lt;/th&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死剂量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;鸦片&lt;/td&gt;&lt;td rowspan=&quot;3&quot;&gt;主要是吗啡类生物碱&lt;/td&gt;&lt;td&gt;2～5g(A)(E),1～2g(D)(M)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;吗啡&lt;/td&gt;&lt;td&gt;0.2～0.5g(M),约0.25g(D),0.2g(G)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;海洛因&lt;/td&gt;&lt;td&gt;10～600mg(A),0.2g(G),约0.2g(D)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;一般这三种被认为是完全不相同的麻药，事实上是同祖同宗的。&lt;/p&gt;&lt;p&gt;鸦片是从罂粟未成熟果皮所得乳液干燥后制成粉末的，由可待因等二十多种植物盐基组成。其中，含量最多的占4～20%成为主成分的吗啡，再经化学处理而成强力的是海洛因。当然其烈性强度顺序是海洛因、吗啡、鸦片，海洛因的强度被认为是吗啡的十倍。中毒作用大致相同，如果能弄到手，还是海洛因的致死最可靠。&lt;/p&gt;&lt;p&gt;这些兴奋剂和古柯碱相反，能抑制中枢神经，造成恍惚的快感，被称为抑制系列禁药。如过量地吸入或注射时，数十秒内就出现目眩、恶心想吐、血压和体温逐渐下降，呼吸被抑制，陷入昏迷满6～12小时就因呼吸停止而死亡。海洛因引起的肾衰竭是致命的。传闻的邦克·劳克、西杜·比斯、约翰·西蒙·理查德等都是被海洛因夺去生命。&lt;/p&gt;&lt;p&gt;泰国、缅甸、老挝等都是大产地，当然也容易买得到。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;34&lt;/sup&gt; 鸦片，吗啡，海洛因均含有吗啡类生物碱。吗啡是一种鸦片类止痛剂，可直接作用于神经系统，改变人对疼痛的感觉。吗啡具有高度成瘾性，高剂量的吗啡摄入会导致呼吸抑制，昏迷，血压下降等现象。海洛因的主要成分是二乙酰吗啡，作用原理和吗啡基本相似但有更强的效果和成瘾性，且一旦摄入即对大脑造成不可逆的损害。&lt;/blockquote&gt;&lt;h5&gt;混合剂(Cocktail)、快速球(Speedball)&lt;/h5&gt;&lt;p&gt;与其它麻药混合使用会形成相乘效果，致死度更高，如安眠药等，一般认为把抑制中枢神经的药物混在一起服用，就比较容易致死，但在麻药世界，把抑制系列的古柯碱和兴奋系列的海洛因混合后吸入或注射的通称「快速球」，特别具有危险性。使用这类混合剂，就会交叉出现中枢神经的刺激作用和抑制作用，刚出现心脏激烈跳动忽又感到心脏快要停止，这种现象数秒钟内反复呈现。死因是心脏停止，对自杀来说是绝妙的混合剂。此外，刺激系列的兴奋剂和可待因，兴奋剂和LSD的混合剂，据说其刺激性是相当厉害的。&lt;/p&gt;&lt;h5&gt;幻觉剂LSD&lt;/h5&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;成分&lt;/th&gt;&lt;th&gt;致死剂量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;LSD&lt;/td&gt;&lt;td&gt;约1.4mg(D)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这是以20～250微克(百万分之一克)的极微量就作用极快的麻药，致死量少得无法比。在本书中所列举的所有药物中，致死量是最低的。&lt;/p&gt;&lt;p&gt;那么是不是很快就能死呢？并非如此。平时市面上的LSD是把原来稀释数百倍浸到纸里，这就需要大量服下这种纸片。&lt;/p&gt;&lt;p&gt;一般来说，产生幻觉作用基本上都是刺激性的麻药，大量使用会产生心悸亢进。同时，脑袋形成慌乱状态，有时还会因此而跳出窗外致死。虽则如此，若是按一般的使用量使用，对人体的危害要比其它麻药要少。&lt;/p&gt;&lt;h3&gt;(7) 医药品以外&lt;/h3&gt;&lt;p&gt;这里介绍的是在你身边到处都有的「毒」。&lt;/p&gt;&lt;p&gt;当然有不少人会有一种愿望，哪怕不能安乐死，总之想马上死掉。为了这些人，本书也介绍了绝不是安乐死法的「撞车自杀」和「自焚自杀」的方法。关于药物也是同样的，即使不是睡眠而死，只要经历剎那间的痛苦就死也行。对于打算了结一生的你，去弄那些不易弄到手的药物是太麻烦了。如果明天你打算去上班或上学的话，那就吞服本书所列这些药物好了。&lt;/p&gt;&lt;p&gt;在这里大体上也叙述了药理作用，但某中毒专家却认为「这类东西没有任何药理作用」。就是说，大部分人吞服后立即会「哇－－」地做声、喉咙、胃发生溃烂，经由痛苦而死。&lt;/p&gt;&lt;p&gt;吞服方法，除例外地写明含有量之外，并不一一说明。也不是一小时用餐，混在酸乳酪里的一类的做法。&lt;/p&gt;&lt;p&gt;但是必须知道致死量。这类产品的有害成分含有量是各不相同的，虽不注明服用量但想知道各商品的成分量，可打电话询问出售处。从致死量计算，不要吞服过少的量。&lt;/p&gt;&lt;p&gt;先举出一些看上去可能致死，实际上毒性很差不宜自杀的，有干燥剂硅胶(Silica gel)、合成洗涤剂、洗发乳、头发润丝精、发油(Pomade)、墨水、保鲜膜、蚊香、捕蟑垫、防臭剂、脱臭剂、对二氯苯(Para-dichloro-benzene)系列的防虫剂等、家庭用的漂白剂、作为干燥剂使用的生石灰。香豆素(Coumarin)系列、杀鼠剂等也都因毒性差是不能用的。此外，理所当然地口红、牙膏、沐浴剂等有「由口入体」可能性的都是安全的。牙膏把一管全吞下去也是无害的，即使你有股冲动想自杀的时候也绝不可用。不论吞服多少，只不过感到难受罢了。&lt;/p&gt;&lt;h4&gt;香烟&lt;/h4&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;有害成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;服用量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;烟草&lt;/td&gt;&lt;td&gt;尼古丁&lt;/td&gt;&lt;td&gt;30～60mg(A)(B),50～60mg(C)&lt;br/&gt;约40mg(F)(G),80～160mg(G)&lt;/td&gt;&lt;td&gt;每根含2mg尼古丁的烟15～80支&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;短支香烟HOPE、HI-LITE及其它香烟中所含的尼古丁毒性比一般想象的要厉害得多。一个婴儿，有时一两支就可能致死。专业书籍写道「与氰酸相匹敌的毒物」。&lt;/p&gt;&lt;p&gt;现在出售的香烟，短支HOPE含1.6mg，HI-LITE含1.6mg，短支PEACE含2.7mg的尼古丁。比雪茄烟的含有量更多，不过，吸烟时因尼古丁燃烧而没有效用。当然也可以把烟叶吃掉，但把烟叶浸在水中溶出尼古丁，吸收快而效果更好。烟叶浸水后经一小时就会溶出50-70%的尼古丁。溶出50%，打算摄取60mg的尼古丁时，可用短支PEACE四十四支浸在水里，一小时后饮用溶液即可，放在锅内煮沸，可溶出近70-100%，时间亦短。而一百度的热量是不会破坏尼古丁的，放在酒精里溶出更快。香烟的溶液非常之苦，加些砂糖也不错。&lt;/p&gt;&lt;p&gt;尼古丁在开始刺激中枢神经如运动神经时，使其兴奋，随后产生抑制作用。服用后喉咙立即感到被灼烧似的疼痛、恶心、反胃、伴之以头痛，不久知觉麻痹、神志不清。因为呼吸停止而死。在服用了致死量后，在没有兴奋状态下出现麻痹，陷入虚脱状态，剎那间就会断气。&lt;/p&gt;&lt;p&gt;最大问题是尼古丁具有强烈的恶心作用，最好与防止恶心的药物一起服用。当然，若将这种溶液注射到静脉内，则效果更强，而且不必担心会呕吐。&lt;/p&gt;&lt;h4&gt;杀虫剂、防虫剂&lt;/h4&gt;&lt;p&gt;荼(Naphthalene)、樟脑、杀蟑剂、杀虫剂&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;有害成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;服用量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td rowspan=&quot;2&quot;&gt;除虫剂&lt;/td&gt;&lt;td&gt;樟脑&lt;/td&gt;&lt;td&gt;2g(A)(B)&lt;/td&gt;&lt;td&gt;2～15g&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;荼&lt;/td&gt;&lt;td&gt;490mg/kg(大鼠,LD50)&lt;/td&gt;&lt;td&gt;29.4g～88.2g(60kg)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;杀蟑剂&lt;/td&gt;&lt;td&gt;硼酸&lt;/td&gt;&lt;td&gt;15～20g(A)(B),0.1～0.5g(G)&lt;/td&gt;&lt;td rowspan=&quot;2&quot;&gt;6～30g(60kg)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;杀蛆剂&lt;/td&gt;&lt;td&gt;甲酚&lt;/td&gt;&lt;td&gt;1～10g(A),1.5g/kg(B),15～20ml(D)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;能杀虫的药物当然对人体也会有害。荼的话有「荼丸(Naphthalene Ball)(白元)，「樟脑粉」(川北商会)等，作为荼原末500g而出售。樟脑中的「藤泽樟脑」(藤泽药品工业)为二五二克。中毒症状有头痛、呕吐、错乱、倦怠感等，严重时陷入昏睡。肝脏、肾脏也会受伤。现在的防虫剂以比较安全的对二氯苯(Para-dichlorobenzene)为主，荼、樟脑渐渐没了。从毒性来说荼比樟脑要强。杀蟑剂中「大地杀蟑硼酸球」、「蟑螂天虫杀」等都含有害成分硼酸。硼酸抑制中枢神经，大量服用时会出现头痛、呕吐、无力、嗜睡、昏睡等症状，因循环不全而死。对肾脏、肝脏也会引起障碍，担心产生后遗症的要防止自杀未遂就应大量服用，还有漂白剂等也含有硼酸。喷雾式杀虫剂因喷到空气中就会变成液体，故可方便地饮用。杀虫剂中的「ウジト－ル」、「トラゾ－ル」、「ピレゾ－ル」等商品很危险。这些商品所含有害成分「甲酚(Cresol)」只有1-10%，所以不服用相当的量是达不到致死量的，成分所含40-70%邻二氯苯(O-dichlorobenzene)的毒性很强，所以药物本身的毒性是相当大的。甲酚(Cresol)会引起粘膜腐蚀、血管收缩等，邻二氯苯(O-dichlorobenzene)有抑制中枢神经、刺激粘膜等作用。两者均对肝、肾造成危害。服用后会导致上部消化器官疼痛、知觉障碍、血压降低、循环不全而死亡。&lt;/p&gt;&lt;h4&gt;有机溶剂&lt;/h4&gt;&lt;p&gt;煤油、汽油、苯(Benzene)、稀释剂(Thinner)&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;有害成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;煤油&lt;/td&gt;&lt;td rowspan=&quot;2&quot;&gt;多种碳氢化合物&lt;/td&gt;&lt;td&gt;估计90～120g(A)(B),最少500mg/kg(C)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;汽油&lt;/td&gt;&lt;td&gt;20～30ml(A),最少10～50ml(B)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;苯&lt;/td&gt;&lt;td&gt;苯&lt;/td&gt;&lt;td&gt;10ml(A),估计80～100g&lt;br/&gt;(约108～135ml)(B)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;稀释剂&lt;/td&gt;&lt;td&gt;甲苯,甲醇等&lt;/td&gt;&lt;td&gt;最少50mg/kg(A)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;把煤油、汽油等浇在身上点上火也是可以的，但服用的话，可以少量而没有多大痛苦即可死去。这两种服用后都会刺激粘膜，抑制中枢神经。出现恶心、睡意、胸部灼热感、错乱等，最后会因呼吸停止而致死。有时也会有心室颤动而突然死亡的情况。不过，曾有喝了250ml汽油而复原的例子。&lt;/p&gt;&lt;p&gt;苯可在药房随时买得到。最低致死量是10ml，相当于玻璃杯的五分之一的量，但至少应该服用100ml。但是这也不能算是很大的量。服用后中枢神经被抑制，全身成麻醉状态。其症状，首先是头痛、目眩，及短时间地出现陶醉感并陷于昏睡，因呼吸衰竭或突然丰心室颤动而死亡。中毒症状并不严重，最适合于自杀。&lt;/p&gt;&lt;p&gt;吸入苯的挥发成分比服用的毒性还大。但因还没弄清吸入的致死量，所以不作介绍。稀释剂本来是「稀释涂料的液体」，多半是甲苯(toluene)和甲醇(methyl alcohol)的混合物。大多托别人弄到手，成分的含有量不固定，所以不适于有计划的自杀，但毒性很大。服用后嘴巴、食道、胃有灼热感，抑制中枢神经，损害造血机能，导致死亡。&lt;/p&gt;&lt;p&gt;稀释剂的使用是以吸的方法容易死去。1-3ppm就能立即陷于麻醉状态。在洗面盆里倒满香蕉水，盖上被子，就能失去知觉，缺氧而死。这是医药物以外的唯一安乐自杀方法。使用时应该使用纯度极高的稀释剂。当然，在利用其它方法自杀之前，为加快速度而先吸几口也是不错的开始。&lt;/p&gt;&lt;h4&gt;家庭用品&lt;/h4&gt;&lt;p&gt;除莠剂、碘酒、甲酚肥皂水、汽车防冻液&lt;sup&gt;35&lt;/sup&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;有害成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;除莠剂&lt;/td&gt;&lt;td&gt;磷酸&lt;/td&gt;&lt;td&gt;8ml(A)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;碘酒&lt;/td&gt;&lt;td&gt;碘&lt;/td&gt;&lt;td&gt;碘2～4g(A)(B),[碘酒的话30～50ml(A),30～250ml(B)]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;甲酚肥皂水&lt;/td&gt;&lt;td&gt;甲酚&lt;/td&gt;&lt;td&gt;1～10g(A),估计1.5g/kg(B)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;汽车防冻液&lt;/td&gt;&lt;td&gt;乙二醇&lt;/td&gt;&lt;td&gt;急性毒性1.4ml/kg(人，经口)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;除莠剂「清洁锈」、「最佳清洁帮手」(Best clean)等商品含有约40%的浓度和89%的磷酸。除莠剂的致死量为22.5ml。如服了如此多量，与其说是磷酸本身的毒性起作用不如说嘴巴、食道、胃等产生组织损坏导致急性死亡。消毒剂的毒性大，在药房亦可任意买到，是绝好的自杀药。在医药物以外，恐怕没有超过它的。有位药剂师还说:「这种东西最能简便地致死。因为能大口地喝下去」。碘能腐蚀消化器官，引起头痛、神经错乱和休克，导致昏睡、死亡。甲酚，一般认为一个体重60公斤的成人推测致死量为180mg，服用可使中枢神经兴奋，之后显示麻醉作用，导致知觉障碍和痉挛，从神志不清、呼吸麻痹到心跳停止。快则五分钟内，迟则三十分钟以内即可丧失知觉。对肾脏、肝脏有危害，摄取后的二十四小时是关键，喝了约80mg的甲酚陷入昏迷状态的十四岁国中生，曾一度恢复了知觉，但肝脏、肾脏损坏，第三十六天引起了空气滞留肺膜的「气胸」，因心跳停止而死亡。&lt;/p&gt;&lt;p&gt;现在的汽车防冻液中最常见的成分就是乙二醇。它能被人体直接吸收，在人体内代谢为多种物质，其中的一些具有神经毒性，或者能扰乱人体中的物质循环，最终使人死于全身性的酸中毒或是多器官衰竭。含有乙二醇的汽车防冻液甚至是乙二醇纯品极易获得，此外，纯品乙二醇是甜的，这可比其他东西那些奇怪的味道好得多。不过服用乙二醇的你会在痛苦中死去。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;35&lt;/sup&gt; 对汽车防冻液的描述由Rena添加&lt;/blockquote&gt;&lt;h4&gt;化妆品&lt;/h4&gt;&lt;p&gt;指甲去光油、染发剂、烫发液&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;有害成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;指甲去光油&lt;/td&gt;&lt;td&gt;溶纤剂(cello solve)&lt;br/&gt;丙酮&lt;br/&gt;醋酸戊酯&lt;/td&gt;&lt;td&gt;估计100ml(A)&lt;br/&gt;估计50～75ml(A)(B)&lt;br/&gt;估计50g(A)(B)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;染发剂&lt;/td&gt;&lt;td&gt;对苯二胺&lt;/td&gt;&lt;td&gt;估计10g(A)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;烫发剂&lt;/td&gt;&lt;td&gt;溴酸钾&lt;/td&gt;&lt;td&gt;估计20g,最少4g(B)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;指甲去光油是化妆品中最危险的产品。含有丙酮(Acetone)20%-25%，醋酸戊酯(Amyl acetate)30%-50%，有麻醉性，大量服用会刺激粘膜，经历头痛、兴奋状态、疲劳后至昏迷。其含有量因产品而各有不同，以此表作参考而确认致死量。如自杀未遂，有可能损伤肝脏和肾脏。&lt;/p&gt;&lt;p&gt;指甲去光油(Nail lacquer)也含有丙酮30%，醋酸戊酯30%，喝上500-750mg即可达致死量。有严重的恶心，但只要吸收就有头痛、兴奋状态直至昏迷。由于毒性不算大，缺点是必须大量地饮用。&lt;/p&gt;&lt;p&gt;染发剂的成分中的对苯二胺(P-phenylenediamine)使用于将头发染黑，毒性极大。「比根彩发」(ホ－ユ－)，「漂王」(山发产业)、「维拉通」(ウエラト－ン)，(ウエラ化粧品)等都含有约2%的对苯二胺。粉末的含有量更高，「漂王」粉末剂(一盒中6g)含有6%；只喝14g就够了。当然，在饮用的时候，先溶化在水中以提高其吸收率较好。&lt;/p&gt;&lt;p&gt;大量服用会引起急性肝障碍，从循环衰竭到呼吸困难直至死亡。烫发液的第二液中和剂含有2%-6%的溴酸钾(potassium bromate)。溴酸钾刺激中枢神经和胃的组织，有恶心、呕吐和胃部灼热感，陷于昏迷状态。有时会造成听觉障碍，被认为毒性很高。不过，由于含有量较少，致死至少要80g，为了万无一失就必须喝上一公斤的烫发液。因此我不打算推荐。&lt;/p&gt;&lt;h4&gt;其它&lt;/h4&gt;&lt;p&gt;除草剂、乌头、食盐&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;有害成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;除草剂&lt;/td&gt;&lt;td&gt;百草枯(Paraquat)&lt;sup&gt;36&lt;/sup&gt;&lt;br/&gt;ジクロリド&lt;sup&gt;37&lt;/sup&gt;&lt;br/&gt;ジクワット&lt;sup&gt;38&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;估计40mg/kg(A)&lt;br/&gt;估计15ml(B)&lt;br/&gt;6～12g/50kg(B)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;乌头&lt;/td&gt;&lt;td&gt;乌头碱&lt;/td&gt;&lt;td&gt;3～4mg(A)(D),植物至少1g(A)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;食盐&lt;/td&gt;&lt;td&gt;氯化钠(NaCl)&lt;/td&gt;&lt;td&gt;估计0.5～5g/kg(A)(即30～300g/60kg)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;含有百草枯(paraquat)的除草剂，一般人虽然无法轻易买到，但农村仍在广泛使用，所以还是可以弄到手。这是剧毒药，目前仍不清楚解毒方法。&lt;/p&gt;&lt;p&gt;Paraquat和吉克华特(ジクワット)具有相似的结构和性质，两者都与体内的酵素产生及使细胞膜的脂质变质。饮用后出现厉害的呕吐、口、食道、消化器官腐烂危害肝脏、肾脏、循环器官、肺等终至死亡。特点是，内脏虽已损坏但知觉却清楚，所以痛苦较大(案例3)。&lt;/p&gt;&lt;p&gt;除草剂的「葛拉莫奇松(グラモキソン)」含有「paraquat」24%普利葛罗克斯L「プリグロックスL」、「麦节特(マイゼット)」含有paraquat5%，吉克华特7%，「雷葛罗克丝(レグロックス)」则含30%的「吉克华特」。「雷葛罗克丝」的致死量为20-40ml。除此之外，含有两成分的除草剂还有很多。&lt;/p&gt;&lt;p&gt;有案例是一名40岁的妇女，喝下约10ml的paraquat却自杀未遂。估计喝了「葛拉莫奇松」除草剂约100ml的28岁的男子，在十四天后导致肺障碍而死亡。同样，喝了250mg「葛拉莫奇松」的五十岁妇女在三十小时后因血液循环衰竭而死亡。喝了「雷葛罗克丝」约100mg的六十七岁男子，六小时后因呼吸停止而死去。&lt;/p&gt;&lt;p&gt;总之，想要早点死，就必须大量地喝下去。&lt;/p&gt;&lt;p&gt;数年前，因用于杀人事件而引起人们注意而且大为畅销的乌头所具有的乌头碱(Aconitine)，在植物性毒中以毒性大而闻名的，根部的含有量特别多，刺激中枢神经系统和末梢神经、心脏等，尤其是破坏体髓使呼吸肌产生麻痹，约两小时就能使呼吸机能停止。但是，普通花店所出售的是毒性较差的花乌头。乌头主要生长在日本本州的山林中，可采取。事实上，有人误以为是野菜食用而引起中毒的。&lt;/p&gt;&lt;p&gt;恐怕没有吃盐去自杀的人吧。可是，盐也是会致死的，因为很有意思，这里就介绍一下。打算用盐自杀就必须喝下300克(一茶碗)不可。曾有喝下一升(约1.8公升)酱油而死掉的人，就是因为这些酱油中含有约14%食盐的缘故。
食盐中毒的症状，有目眩、错乱、呼吸急促、发热、无力等，大量摄取时循环系统、肝脏、肾脏等引起障碍，会成为致命伤。&lt;/p&gt;&lt;p&gt;看到这里，你或许会感到纳闷，为何没有出现常听到的氰酸钾和河豚毒的名字。这是因为，目前的管理、废弃的一系列规定极为严格，实在难以弄到手，因此即使列出来也是毫无意义就未列于此。&lt;/p&gt;&lt;p&gt;河豚的卵巢、肝脏含有剧毒，但因为鱼体本身和季节差别，毒性也会有一定的差距，就算是弄到手也不一定适合于自杀。关于这些，作为将难以到手的医药物及致死量列于本章之末。如果能弄到手，倒是希望大家利用。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;36&lt;/sup&gt; 百草枯是一种剧毒除草剂，致死量极低，被人体摄取后主要积累于肾和肺，导致肺泡内和肺间质纤维化(急性或亚急性)，称为百草枯肺，导致3周内的急性呼吸衰竭，以及肾小管坏死。该药在多个国家已被禁售和禁用，但中国仍有粉剂出售。&lt;sup&gt;37&lt;/sup&gt; ジクロリド：己二酰氯，在农药上可作为苯甲酰脲类杀虫剂氟铃脲、杀铃脲等的中间体，也是磺酰脲类除草剂甲磺隆、苄嘧磺隆、吡嘧磺隆等的中间体，此外，它还可用于医药方面作为合成抗生素的原料。有毒，遇水能释放有毒气体。&lt;sup&gt;38&lt;/sup&gt; ジクワット：敌草快，英diquat，即下文吉华特，联吡啶类的非选择性除草剂之一，剧毒，中毒症状和百草枯相似但不出现肺纤维化和更容易出现急性肾衰竭，目前尚无特效解毒药。&lt;/blockquote&gt;&lt;h3&gt;[案例研究3] 喝下百草枯八天后死亡的少年&lt;/h3&gt;&lt;p&gt;一九八五年十月在群马县，外出回家的家属发现中学二年级的少年(当时十四岁)，在房间内捂着肚子乱打转。那天早晨和平时一样出了门，在偏离上学的山林里喝了农药百草枯约40～50ml后又回到了家。在山林里留下有上学用的自行车、书包之外，还有草草写完的遗书、呕吐的痕迹、药瓶等。被送往医院时，他的嘴、喉咙已经溃烂，每当叫喊时口中就流血。之后虽然相当痛苦，仍在说「我想早点吃饭」、「我想看漫画」、「爸爸、妈妈谢谢啦」等，过些日子开始说些产生幻想的话「我的巴士已开走啦」、「UFO来啦」等等。有时也会大吵大闹，需四个大人制服，但八天后还是死了。&lt;/p&gt;&lt;p&gt;遗书中写有同班的三个学生的名字和「到了天国我也一直恨你们」等字句。他是篮球队的成员，大约从自杀的前三个月起，在练习中经常被其它人责骂说:「你在磨蹭什么！」、「别偷懒！」等，并被殴打、脚踢了胸部和腹部，十月间退出后也在下课后在体育馆后面被殴打，自杀的原因就是来自以上的欺负。&lt;/p&gt;&lt;p&gt;他是个计算机迷，研读有关计算机的书籍，还喜欢动画片，房间里挂着高桥留美子原作《うる星やつら》的大幅剧照画。&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;在案物自杀项目中一直使用了「恶心」、「粘膜腐蚀」、「错乱」等字眼，事实上就是这样的症状。&lt;/p&gt;&lt;p&gt;百草枯致死量为15mg，该少年喝下的农药究竟含有多少比例的百草枯不得而知，加上立即呕吐，所以实际吸收到体内的量大概恰好达到致死量。他因为曾是运动员，具有相当好的体力所以维持了八天，但一般来说，服毒自杀的方式，在病床上过了好几天之后才死去的例子并不少。&lt;/p&gt;&lt;p&gt;这一事例是由于被欺负而造成的少年自杀，像他所属的严格训练、集体竞赛的运动，所以有几个家伙欺负人也可说是理所当然的。究竟施加到了什么程度的暴力虽不得而知，但也是常见的事。事实上，不仅限于俱乐部的活动，这个世上就是这么回事。&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;成分通称&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;中毒反应&lt;/th&gt;&lt;th&gt;限制&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;安眠药&lt;/td&gt;&lt;td&gt;Secobarbital sodium&lt;sup&gt;39&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;估计2g(A),2g(G)&lt;br/&gt;至少2.5g,暗示6～8g(I)&lt;br/&gt;4.5g(H)&lt;/td&gt;&lt;td&gt;嗜睡、休克&lt;br/&gt;呼吸·心跳停止&lt;/td&gt;&lt;td&gt;劇,要,指&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;镇静、镇痛剂&lt;/td&gt;&lt;td&gt;Meprobamate&lt;sup&gt;40&lt;/sup&gt;&lt;br/&gt;PethidineHydrochloride&lt;sup&gt;41&lt;/sup&gt;&lt;br/&gt;Aminophylline&lt;sup&gt;42&lt;/sup&gt;&lt;br/&gt;Acetaminophen&lt;sup&gt;43&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;15～20g(I),45g(H)&lt;br/&gt;3.6g(H)&lt;br/&gt;估计5～30g(A)&lt;br/&gt;0.2～1g/kg(A)&lt;/td&gt;&lt;td&gt;倦怠感、嗜睡、心跳停止&lt;br/&gt;倾眠、昏睡&lt;br/&gt;麻痹、昏睡&lt;br/&gt;目眩、四肢无力&lt;/td&gt;&lt;td&gt;要,指&lt;br/&gt;&lt;br/&gt;劇,指&lt;br/&gt;劇,指&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;抗癫痫剂&lt;/td&gt;&lt;td&gt;Mephobarbital&lt;sup&gt;44&lt;/sup&gt;&lt;br/&gt;Metharbital&lt;sup&gt;45&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;2g(G)&lt;/td&gt;&lt;td&gt;嗜眠、意识不清、错乱、休克、心跳停止&lt;/td&gt;&lt;td&gt;劇,要,指&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;自律神经用药&lt;/td&gt;&lt;td&gt;Neostigmine&lt;sup&gt;46&lt;/sup&gt;&lt;br/&gt;Ammonium&lt;sup&gt;47&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;约60mg(A)(G)&lt;br/&gt;60mg(G)&lt;/td&gt;&lt;td&gt;目昡、四肢无力&lt;br/&gt;目昡、头痛&lt;/td&gt;&lt;td&gt;劇,指&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;强心剂&lt;/td&gt;&lt;td&gt;Digitoxin&lt;sup&gt;48&lt;/sup&gt;&lt;br/&gt;Digoxin&lt;sup&gt;49&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;最少约3mg(I)&lt;br/&gt;10～20mg(I)&lt;/td&gt;&lt;td&gt;感觉迟钝&lt;br/&gt;嗜眠、幻觉&lt;/td&gt;&lt;td&gt;劇,毒,指&lt;br/&gt;劇,指&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;其他&lt;/td&gt;&lt;td&gt;Phenol isoniazid&lt;sup&gt;50&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;8.5～60mg(K)&lt;br/&gt;估计最少3g(B)&lt;/td&gt;&lt;td&gt;痉挛、昏睡&lt;br/&gt;肝障碍&lt;/td&gt;&lt;td&gt;劇,指&lt;br/&gt;指&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;sup&gt;39&lt;/sup&gt; Secobarbital sodium：司可巴比妥钠，是一种巴比妥衍生物药物，具有麻醉，抗惊厥，抗焦虑，镇静和催眠的特性。它是美国医生协助自杀中最常用的药物。&lt;sup&gt;40&lt;/sup&gt; Meprobamate：眠尔通，又称安定，丙二醇类抗精神失常药物，目前基本被苯二氮类药物取代，目前在中国已停止使用。&lt;sup&gt;41&lt;/sup&gt; Pethidine Hydrochloride：哌替啶盐酸盐，即杜冷丁，一种阿片类止痛药，副作用和成瘾性较吗啡低。&lt;sup&gt;42&lt;/sup&gt; Aminophylline：氨茶碱是支气管扩张剂茶碱与乙二胺的比例为2:1 的化合物。氨茶碱比茶碱的效力更低，作用更短。其最常见的用途是治疗哮喘或COPD的气道阻塞。氨茶碱可导致茶碱中毒。已发现氨茶碱可降低异丙酚的镇静作用并降低托吡酯的抗癫痫作用。&lt;sup&gt;43&lt;/sup&gt; Acetaminophen：[对乙酰氨基](#4-其它)酚，扑热息。&lt;sup&gt;44&lt;/sup&gt; Mephobarbital：甲苯比妥，一种代谢为苯巴比妥的巴比妥类药物。&lt;sup&gt;45&lt;/sup&gt; Metharbital：一种巴比妥类抗惊厥药，用于治疗癫痫。它具有与苯巴比妥相似的特性。1990年雅培已停止对其的销售。&lt;sup&gt;46&lt;/sup&gt; Neostigmine：新斯的明，一种用于治疗重症肌无力的药物，副作用可致心率降低，低血压，虚弱。&lt;sup&gt;47&lt;/sup&gt; Ammonium：氨？？？？？？&lt;sup&gt;48&lt;/sup&gt; Digitoxin：洋地黄毒苷，是一种强心苷。它是一种植物甾体，在结构和效果上与地高辛类似(但效果更持久)。&lt;sup&gt;49&lt;/sup&gt; Digoxin：地高辛，常见商品名Lanoxin。是一种从毛地黄属植物中提取的强心苷，被广泛用于治疗心脏病。副作用可能包含丧失食欲、恶心、视觉障碍、意识迷离，以及心律不齐等。地高辛有肾毒性。&lt;sup&gt;50&lt;/sup&gt; Phenol isoniazid：盐酸异烟肼，常用的抗结核病药物，也可用于治疗抑郁症，有较强的肝脏毒性。&lt;/blockquote&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;商品名&lt;/th&gt;&lt;th&gt;有害成分&lt;/th&gt;&lt;th&gt;致死量&lt;/th&gt;&lt;th&gt;中毒反应&lt;/th&gt;&lt;th&gt;症状&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;氰酸钾&lt;/td&gt;&lt;td&gt;Hydrogen cyanide&lt;sup&gt;51&lt;/sup&gt;&lt;br/&gt;Potassium cyanide&lt;sup&gt;52&lt;/sup&gt;&lt;br/&gt;Sodium cyanide&lt;sup&gt;53&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;500mg(A)&lt;br/&gt;150～200mg(B)&lt;br/&gt;200～300mg(B)&lt;/td&gt;&lt;td&gt;细胞呼吸障碍&lt;/td&gt;&lt;td&gt;突然意识障碍,失去意识。&lt;br/&gt;从呼吸困难到呼吸停止,心跳停止。&lt;br/&gt;(大剂量摄入数秒即死亡)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;河豚毒素&lt;/td&gt;&lt;td&gt;Tetrodotoxin&lt;sup&gt;54&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;约2mg(A)(B)&lt;/td&gt;&lt;td&gt;神经麻痹&lt;/td&gt;&lt;td&gt;全身运动障碍,意识障碍,呼吸困难&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;漂白粉(工业用)&lt;/td&gt;&lt;td&gt;过硼酸钠&lt;/td&gt;&lt;td&gt;15～30g(A)&lt;br/&gt;15～20g(B)(硼酸)&lt;/td&gt;&lt;td&gt;细胞原形质肿胀&lt;/td&gt;&lt;td&gt;嗜睡,头痛,昏睡&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;干燥剂&lt;/td&gt;&lt;td&gt;生石灰&lt;/td&gt;&lt;td&gt;估计30g&lt;/td&gt;&lt;td&gt;粘膜腐蚀,溃疡&lt;/td&gt;&lt;td&gt;消化道溃疡和炎症&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;家用杀虫剂(喷雾)&lt;/td&gt;&lt;td&gt;Pyrethrin&lt;sup&gt;55&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;估计1～2g/kg(A)&lt;br/&gt;最少1.4mg/kg(A)&lt;/td&gt;&lt;td&gt;运动神经麻痹&lt;/td&gt;&lt;td&gt;头晕,恶心&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;灭鼠剂&lt;/td&gt;&lt;td&gt;黄磷&lt;/td&gt;&lt;td&gt;50～200mg(B)&lt;br/&gt;2～5g(D)&lt;/td&gt;&lt;td&gt;肝,肾,心肌的脂肪变性&lt;/td&gt;&lt;td&gt;剧烈呕吐,腹痛,呼吸困难,痉挛,昏睡&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;白蚁杀剂&lt;/td&gt;&lt;td&gt;Chlordane&lt;sup&gt;56&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;估计10g(A)(B)&lt;/td&gt;&lt;td&gt;神经刺激&lt;/td&gt;&lt;td&gt;痉挛,呼吸困难&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;sup&gt;51&lt;/sup&gt; Hydrogen cyanide：氰化氢(HCN)，一种剧毒物质。&lt;sup&gt;52&lt;/sup&gt; Potassium cyanide：氰化钾(KCN)，一种剧毒物质。&lt;sup&gt;53&lt;/sup&gt; Sodium cyanide：氰化钠(NaCN)，一种剧毒物质。&lt;sup&gt;54&lt;/sup&gt; Tetrodotoxin：河豚毒素，一种极强的神经毒素，中毒者多因心脏麻痹和或呼吸麻痹死亡，目前尚无特效解毒剂，人LD50为334 μg/kg。&lt;sup&gt;55&lt;/sup&gt; Pyrethrin：除虫菊酯，一种低毒农药，大多数杀虫剂均含这种物质，大量摄入可能导致哮喘等症状。&lt;sup&gt;56&lt;/sup&gt; Chlordane：氯丹，一种除白蚁药，有潜在的致癌作用，美国于1988年禁用此药。&lt;/blockquote&gt;&lt;h2&gt;2. Hanging 上吊&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;确实、简单、无痛苦三部曲，不分男女老少压倒性的广受喜爱，堪称为「自杀之王」。&lt;/p&gt;&lt;p&gt;好像我是在说毫无依据的结论似的，但确实没有比「上吊」更能安然地、可靠地而且简便地进行自杀。完全没有必要考虑其它任何方法。可能你不大相信，但经过仔细调查还是没找到比上吊更好的方法。下面还将详细叙述上吊为何优于其它方法，甚至可以说上吊是人类所想出来的艺术品。正因为如此，日本每年的自杀者中一半都选择了这种方法，而且不论古今中外都被广泛采用。&lt;/p&gt;&lt;p&gt;上吊的最大优点就是「未遂率」极低。只要绳子不断，套绳子的树枝不折断，而且在上吊后十几分钟内不被发现，可以说成功率是百分之百的。有那么一个人，服毒后还剖了腹但没死，在轨道上等电车也没等到，没法子了去跳崖也没死成，最终在断崖的树上终于吊死了。&lt;/p&gt;&lt;p&gt;「想自杀就上吊」，打算自杀的人应该牢记这一点。&lt;/p&gt;&lt;h4&gt;[准备] 简便得只需一根绳子&lt;/h4&gt;&lt;p&gt;准备的东西只需一根绳子就可以了。电线、皮带、绳子，只要能缠到脖子上，什么都可以。不过，要尽量挑选柔软而能贴在脖颈上的。如百货公司包装用的塑料带等，即使对一百多公斤的人来说也是很足够的了。如果使用钢丝等一类具有切断力的东西，就会发生割断头颈的情况。有人在桥栏杆上拴住了车辆牵引用的钢绳一端，又把另一端打结套在脖子上，之后跳到河里，结果头部被割下流到河里，成为「怪死事件」猛闹了一阵子。也有同样地将车辆牵引用钢索栓在树上，另一端套在脖子上后发动了车子，把头割下来自杀的一位很有勇气的公司职员。&lt;/p&gt;&lt;p&gt;坐着甚至躺着也可以套绳子，只要不是容易折断的细枝，那里都可以。也有中学一年级的少年在书架上钉了一根五寸钉上吊的例子。但是，找不到合适的套绳子地方也是常有的，特别是医院和看守所。不过，上吊并不是非要把绳子套在比自己身长还要高的地方才能进行。虽然脚部或臀部碰到地板，也是能死的。在病床上上吊的人并不少，这从理论上也是可能的。&lt;/p&gt;&lt;p&gt;在说明这一理论之前，先说说勒颈的死因和吊颈的死因不同之处。前者是以气管被堵塞造成的窒息为多，后者以输往脑部的血液被阻断所造成的脑内缺氧状态而死的占大多数。&lt;/p&gt;&lt;p&gt;向脑部供血的动脉有两种:颈动脉和在脊椎旁边被骨头保护着的椎动脉。勒脖子的方式，即使颈动脉被堵住，但被骨头保护的椎骨动脉是堵不住的。但上吊的方式，脖子被斜上方吊起形成了角度，因此内外同时堵死，向脑部的供血刹那间就停止了(参照图一)。两者的差异从尸体上即可明了。勒颈的尸体由椎骨动脉向脑部的供血虽继续不断，但相反地由脑部输送血液的颈动脉却被堵塞了，因此变成紫色而瘀血；上吊的方式则不见瘀血。现在弄清一些基本问题后，再回到上吊的高度问题。&lt;/p&gt;&lt;p&gt;上吊的时候，血压在170mmHg的人，那么他的颈动脉用3.5kg，椎骨动脉用16.6kg的力量即可堵塞。如果脚部着地而膝盖弯曲的程度，有全身体重的70～90%(膝盖着地也有体重的20%的重量)压到脖子上。譬如说，当体重60kg的人以膝盖着地的方式上吊，压在脖子上的力量为12kg，颈动脉也自然地被堵住了。此时，对椎骨动脉而言还没达到完全堵塞的地步，所以有微量的血液流向脑部，但这也只不过是时间的问题，比单纯地勒颈还要好上几倍。丧失知觉可能稍为晚点，但不会有以未遂而告终的事。也就是说，压在颈部的力量哪怕只有体重的20%，只要颈部形成角度，不完全把身体吊起来也能简便地死亡。&lt;/p&gt;&lt;p&gt;事实上还有臀部和背部着地的例子(参照图三)，也有人说只要有三十公分的高度就可以死的。在欧美，甚至有人说脚部着地的情况较多。打算在自己的房间死去的你，没有必要觉得高度不够而放弃。房门的把手也足够了，利用楼梯斜面也是个办法。&lt;/p&gt;&lt;p&gt;其它应注意的是，固然要找不易被人发现的地方，但不像采用煤气或药物的自杀需要数小时或数日不被发现的地方才行。仅仅在十来分钟之内不被发现就救不活了，如果有几十分钟更是大功告成。&lt;/p&gt;&lt;p&gt;不想让亲属和朋友们看到自己尸体的话，最好选择离开自己家及平日上班、上学路途稍远的地方。当身分被查明，双亲知道了的时候，你已经在医院或警察局里了。&lt;/p&gt;&lt;h4&gt;[经过] 一瞬间丧失意识，没有痛苦&lt;/h4&gt;&lt;p&gt;脖子上套住绳子，踢掉脚凳子后悬在半空中时，你的知觉会是怎样的呢?&lt;/p&gt;&lt;p&gt;据法医学者的研究，一上吊知觉便朦胧，手脚想动也动弹不了，而且在此一过程中是完全没有痛苦的，这在医学界已经是常识了。&lt;/p&gt;&lt;p&gt;在东京，一个演员当着观众表演上吊，当他说「像这样蹲下腰……」的瞬时便失去知觉，并死在观众眼前。有个法医学者想体验一下上吊的痛苦，把脚凳子放在随时可站立上去的位置，并请同事们在场，双脚刚离开脚凳子时便突然失神，幸亏被同事们救了下来，这种体验的例子并不少。&lt;/p&gt;&lt;p&gt;一个用电线上吊而被救下的自杀未遂者说:「脑袋嗡地一下什么都不知道，知觉也没有了，甚至连无法呼吸而难过或者疼痛的感觉都没有。」&lt;/p&gt;&lt;p&gt;并非只是痛苦，也有相当舒畅之说。例如，在柔道中被使了勒技而摔得不省人事的快感，在浴室里用毛巾玩勒脖子游戏的少年就这样缢死的事例。&lt;/p&gt;&lt;p&gt;同时，如果一下子用力过猛吊住的话，颈关节会脱臼，立即导致心跳停止和呼吸停止。&lt;/p&gt;&lt;p&gt;提到上吊，许多人会认为是喉咙被扼住，在痛苦中窒息而死。事实上在感到喘不过气之前，已引起脑部缺氧而失去知觉，所以是没有痛苦的。&lt;/p&gt;&lt;p&gt;假如怀疑这种说法，那你本人不妨用绳子套在脖子上吊看看，是否真的在剎那间失去知觉。大概你刚套上绳子、压上一点体重，就会因为觉得比想象中要紧张而害怕而立刻停止试验吧！&lt;/p&gt;&lt;h4&gt;[十来分钟心脏停止]&lt;/h4&gt;&lt;p&gt;也有学者进一步分成几个阶段而详细进行研究。&lt;/p&gt;&lt;p&gt;首先是第一阶段，开始是头脑嗡地发热，出现耳鸣。接着感到眼前有闪光，头发热、耳鸣、眼前闪光是刚上吊就立刻出现的，同时，知觉开始模糊起来。&lt;/p&gt;&lt;p&gt;进入失去知觉后的第二阶段，全身引起痉挛。据说，手部作划水动作，脚部作走路的动作，然后双手双脚的肌肉开始抽筋后又全身挺直抽筋。但是对这种痉挛，现在认为那是全身小颤动。这一阶段是一分到一分半钟。令人不解的是，男性在此时性器会勃起，并射精。&lt;/p&gt;&lt;p&gt;第三阶段，已经是假死状态，大小便和精液溢出、眼球突起、呼吸停止。这期间约一分钟，所以到达这种地步只需三分到三分半钟。在此阶段心脏仍在跳动，如被发现也有可能救下一命。此后，心脏会跳动约十分钟，心脏一旦停止跳动就没有获救的希望了。&lt;/p&gt;&lt;p&gt;有一个美国杂技演员在观众面前模仿上吊，平日的安排是当知觉开始模糊时马上给助手递暗号。有一天大概突然失去知觉没能及时递出暗号，就在那里吊了十三分钟，送到医院时已经回生乏术。&lt;/p&gt;&lt;p&gt;这就是说，在短短的十来分钟里，未被人发现的话，你的自杀就成功了而且没有痛苦。大概没有比此更适合的自杀方法！&lt;/p&gt;&lt;h4&gt;[尸体状况] 上吊的尸体是不洁的吗？&lt;sup&gt;57&lt;/sup&gt;&lt;/h4&gt;&lt;p&gt;人们常提到的上吊缺点，就是尸体的形象不好看。的确会有失禁和射精的情况。有人说，由于喉咙被朝上扼住，舌头会伸出，面部因淤血而发紫，眼球会突出等。不过，到这种地步的可怕例子是不多的。死后好几天眼球才会突出，舌头碰到牙齿也不会伸出的。就是说，尸体的情况只不过是这样。&lt;/p&gt;&lt;p&gt;从上吊尸体的照片上看，大部分只不过是「耸拉」在那里，和活的时候并没有什么不同。如前所述，由于供给头部的血液很快被切断，脸部一般都不会出现淤血。虽说看上去的形象不大好，但和跳楼、撞车的尸体相比，可以说是体面的尸体了。&lt;/p&gt;&lt;p&gt;要想防止失禁，事先可去趟洗手间，不想射精，那就先做手淫。为了追随昭和天皇，在驾崩当天自杀的八十七岁老人，口衔纱布，再戴口罩，在橘子园里上了吊。他或许是为了不想死得太难看吧!?&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;57&lt;/sup&gt; 一般来说机械性窒息死亡(如吊死，缢死)可能伴随失禁的情况，但这与死者的状态如肠道内的粪便量或膀胱内的尿量等有关。&lt;/blockquote&gt;&lt;h4&gt;[注意] 勒颈很痛苦&lt;/h4&gt;&lt;p&gt;前面已说过，上吊的优点在于因从斜上方拉住脖子的姿势，造成勒住椎骨动脉。手扼脖子的场合，当然遮断不了该动脉，因而脑部供血不可能一下子失去知觉。上吊的话如前述第一阶段就失去知觉，扼脖子的场合在有知觉的情况下体验第一、第二和第三阶段，随后才好不容易地失去知觉。结果是气管被堵塞而变成窒息死亡，加上体验抽筋，伴之而来的则是相当的痛苦。虽则如此，自己扼住脖子窒息自杀倒是很多。我忍不住要向他表示同情心，为什么不肯花点工夫制造三十公分的高度呢!?&lt;/p&gt;&lt;p&gt;四十二岁的大学副教授，用领带一点一点地勒紧，最后口中流血而死。&lt;/p&gt;&lt;p&gt;参加过东京奥林匹克游泳比赛，以后就过着平庸的主妇生活的四十三岁妇女，充分利用了过人的肺活量，在嘴、鼻、颈上缠贴多层胶布窒息而死。&lt;/p&gt;&lt;p&gt;因杀死儿子被关起来的四十九岁家庭主妇，在看守所里在胃和鼻子里塞足了卫生纸而窒息死亡。&lt;/p&gt;&lt;p&gt;也有在警察局监护室内，吞下约100g(约一卷)卫生纸，后因支气管闭塞而自杀的四十六岁建筑工人。&lt;/p&gt;&lt;p&gt;当然，用这种窒息的办法也是可以死的，但伴随而来相当的痛苦，我是不愿意推荐的。&lt;/p&gt;&lt;p&gt;关于上吊，还要提及的是:因脑内部形成缺氧状态，细胞被破坏，所以自杀未遂的时候会留下严重的脑后遗症。脑细胞的特征与其它细胞不同，被破坏了就不会再生的。因此，有必要做不被发现的周密安排。&lt;/p&gt;&lt;h3&gt;[案例研究4] 上吊未遂的悲剧-法兰克永井&lt;/h3&gt;&lt;p&gt;一九八五年十月，歌手法兰克永井氏(当时五十三岁)在晚上十点钟左右演出结束回到家里，和妻子喝了一点啤酒，十点半左右睡觉。可是到了半夜，走出卧室后长时间没有回来，妻子出来寻找时，发现在一楼和二楼中间的螺旋楼梯的扶手上，套上四五根领带上吊了，那是半夜三点钟左右。救护车赶到时，永井氏没有了呼吸和脉搏，昏迷倒在那里。送到医院时已经瞳孔放大，处于「即将脑死」的状态。可是经过四五天后却奇迹般地恢复知觉。一个月后会说几句话，给他看《恋君》曲名时，他还认得出「君」字。后来又恢复到会写「永井」两个字。后来他又多次入院出院，现在已能做些散步，也能用卡拉OK唱熟悉的歌曲，显示了进一步的恢复。尽管如此，他还不能辨认前去探病的妻子和朋友，有点近似老年痴呆症的状态，一九八九年又成为禁治产者。&lt;/p&gt;&lt;p&gt;他把这次的体验讲给友人丹波哲郎氏时，是这样说的:「刚上吊就呼吸困难，视野瞬时变成红色后又成为漆黑一团。看到在空中自己的脸歪了，逐渐听见奇妙的声音。声音逐渐变大，消失在黑暗的隧道里。自己忽然上升，浮游着穿过墙壁和门，可以看到下界的情况。突然注意到自己站在平地上，从前面的花园听到了优美的音乐，还听到了已故的友人和亲属的声音，被怀念和相会的心情所驱使向前走了过去。那里有条三岔的河流，但一股不知什么力量把我拉了回来。」&lt;/p&gt;&lt;p&gt;永井氏之所以企图自杀，是因为从前的情人提出她所生的孩子是他们俩人的，要求抚养费而苦恼的缘故。&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;极为轰动的上吊未遂案例，恐怕也仅此一例。即使被认为既遂率是100%的上吊，要是很快就被人发现也就不会成功。上述例子若从停止脉搏来看，可能已上吊了十分钟以上。但有的专家认为「(从恢复到现在的地步来看)被发现的时间是刚刚上吊三至四分钟，脚部和臀部应该是着地的。不过，即使性命得救，被损坏的脑神经也不会再恢复。」它将留下怎样的后遗症，永井氏的情况已经说明。脑子的神经细胞，自血液不再循环之时的瞬间就开始损坏。这是非常可怕的，上吊未遂是可怕的！&lt;/p&gt;&lt;p&gt;据其本人所说，在刹那间(通常是水平的)失去知觉，视野通红后又变成漆黑。以后的奇妙的体验，可称为「临死体验」，据说许多濒临死亡的人都经历过。&lt;/p&gt;&lt;h4&gt;[案例研究5] 高度九十一公分的上吊-联合赤军最高干部森恒夫&lt;/h4&gt;&lt;p&gt;一九七三年一月一日，在东京拘留所的森恒夫(当时二十八岁)于单人牢房里上吊自杀了。其本人是作为一九七二年一月组成的武装革命集团。他的「唯枪主义」提倡只有依靠武器革命才能成功，在群马县山岳地下司令部进行武装训练，一九七二年二月被捕。他供认了自己以十二名「赤军战士」、「行动不是革命的」为理由，而进行杀害的事实，九月被移送东京拘留所，等待开庭审理。这个私刑拷打杀害了十二个人的事件，比起逃亡的赤军士兵占据浅间山庄事件更令人感到「闭塞集团中的疯狂」，一时震惊了日本社会。在第二年的元月一日，和平时一样森恒夫把早饭和午饭都吃光了。下午一时三十八分，巡逻的看守还看见他坐在塌塌米上看书。但在十四分钟后的一时五十二分，看守再次探视单人牢房时，他在高九十一公分的铁栏杆上用六十公分长的毛巾打了结，把头套进去上吊了。医生赶来打了强心针、做了人工呼吸，都无济于事，约一小时后断了气。据说，他用身边的衣衫绑住了双脚伸在那里，形成「」字型吊在那里，也有人说死去时的形状好像是「将要坐下来的样子」。对这一自杀的分析是，当时自杀时「将绑住的双脚用力向空中踢出，于是重力加到毛巾上勒住了脖子。」他被发现时虽已失去知觉，但静脉则与活的时候一样没有变化，也没发现出血和失禁。&lt;/p&gt;&lt;p&gt;他留下了两封遗书，据说内容是承认了唯武器主义的错误。又听说他从自杀的前几个月起就爱读圣经，对基督教起了很大的兴趣。&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;他的臀部着地了没有?&lt;/p&gt;&lt;p&gt;他是身高一百六十三公分，体重五十四公斤的小个子，使用的毛巾为六十公分，也很短。在栏杆打结套上脖子，那么脖子就紧紧靠在栏杆上。事情的巧合是，他的腰部特长，加上毛巾收紧勒住脖子，他的臀部可能还不曾着地的。就是说，一个体重五十四公斤的男子脚着地，背靠着墙上吊的方式，在十四分钟内是不可能苏醒的，这是证明上吊的简便和短时间可断气的有力证据。话虽如此，为了革命而进行的不懈努力和磨难，最后都放弃坚持很久的信念，且又归依了神明，然而毕竟没能获救而自杀，该是多么可怜的事。&lt;/p&gt;&lt;p&gt;不过，虽说是在二十年前的事，相信也能引起革命本身就远比对十二个同伙人私刑杀死的事要疯狂得多。&lt;/p&gt;&lt;h3&gt;[案例研究6] 在精神病医院上吊获救的妇女&lt;/h3&gt;&lt;p&gt;一九八二年五月十七日下午四时四十五分。在某精神病医院，一个住院中的妇女陷入兴奋状态大喊「把我杀了吧！」于是被送进保护室。四十分钟后的五时二十五分，爬上用好几条被子叠上的窗格后用毛巾上吊了。发现时呼吸、心脏都已停止，被救了下来进行了人工呼吸，用了强心剂，五分钟以后出现了自发性呼吸和微弱的脉搏。尽管如此，整整两天没有知觉，第三天好不容易对刺激有了反应。第四天起恢复了知觉，一周后能进食流汁，第二周起进行了「恢复自我训练」，再过两周后能和其它病患一起过集体生活了。但记忆力却减退，丧失了从前的积极性，总是躲在人后，对看护者的依赖也多了。&lt;/p&gt;&lt;p&gt;这个妇女在她二十六岁后，在这个医院里住了十三年，在此以前还在其它精神病医院住过三次。一九七九年出院后到附近的综合医院工作，因与单位的男员工产生摩擦而放弃了工作，并与另外的男子同居，不久开始不吃东西，大喊「杀死我吧！」，过了两年又住院了。上吊是在半年以后的事，这是第三次的自杀未遂。&lt;/p&gt;&lt;p&gt;她的经历是，中学毕业在毛巾工厂工作六年，二十三岁结婚，第二年离婚，生了个男孩但不久小孩死去。还有，她姊妹五人中包括她在内的四个人都分别有自杀未遂、企图自杀的行为。&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;就像护士们所说的:「是少数因发现的同时医疗人员迅速处置，起死回生的稀有例子」；也是虽然心脏一度停止，但未到死亡的极少见例子。从空白的四十分钟中，减掉堆放被子的时间，大概是上吊十五分钟后，心脏刚刚停止的时候被发现。虽然有四十分钟和足够的高度但未能致死，这和森恒夫的例子形成了鲜明的对比。在医院或牢房因有监视所以及时被发现，宅这些地方自杀是很困难的，尤其是医院因急救设施齐全，自杀就更加困难了。&lt;/p&gt;&lt;p&gt;从这些未遂例来看，或许会想上吊也并非是那么简单的。但是，毕竟这些都是极稀有的例子。从每年有一万多人死于上吊，而且既遂率几乎是百分之百的效果来看，上吊仍旧是荣登自杀手段的宝座。&lt;/p&gt;&lt;p&gt;可是，她后半生究竟是什么呢?它已远远超越了不幸或倒霉。从旁的看来这才是「活地狱」。从留下的后遗症来看，或许不去救她还来得好。&lt;/p&gt;&lt;h3&gt;[自杀地图1] 树海&lt;/h3&gt;&lt;p&gt;如果你对工作和人际关系感到厌烦，要想在绝对不被他人知晓的情况下悄悄自杀的话，我就劝你毫不犹豫地踏进「树海」里去。没有比树海那样既不容易发现尸体、又容易走进去的自杀地点了。你会去向不明，久而久之从人们的记忆中消失。可是，要达到这一目的，那就必须研究进入树海的方法，这份地图可作为参考。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;从红叶台眺望西湖方向所看到的树海&lt;/li&gt;&lt;li&gt;往树海的入口「青木原自然步道」&lt;/li&gt;&lt;li&gt;命运车站「风穴」&lt;/li&gt;&lt;li&gt;第一岔路:这里还是安全地带&lt;/li&gt;&lt;li&gt;第一警告&lt;/li&gt;&lt;li&gt;进入富岳林道的路标&lt;/li&gt;&lt;li&gt;最后的警告标示:有遭人破坏的痕迹&lt;/li&gt;&lt;li&gt;富岳林道:阻断前进道路的绳子&lt;/li&gt;&lt;li&gt;原生林内部:来到这里就可以安心赴死了&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;[历史]&lt;/h4&gt;&lt;p&gt;在树海里的自杀为「每年三十人左右，没有什么增减」(富士吉田警察署)。其它的「自杀胜地」大半都已成为过去，但树海作为自杀地点而优于其它地点，从上述一点已经表明了。本来树海就是自杀胜地，但一下子出了名而每年都有数十人在此自杀，主要是一九五七年以树海为背景的松本清张小说「波浪之塔」，被改编为电视剧的原因。&lt;/p&gt;&lt;h4&gt;[找不到尸体的路线]&lt;/h4&gt;&lt;p&gt;一般来说，进入树海后立刻就会失掉方向感而走不出来，因此不管从哪里走进去都是可以的，但这里要介绍的是始终找不到尸体的路线。&lt;/p&gt;&lt;p&gt;最一般的是从「风穴」附近进去。在富士快速巴士的风穴车站(去法参照交通栏)下车，即可在国道一三九号线的南侧看到进入风穴入口的道路。往前走就是风穴的售票处。但不要走进风穴，售票处前有两条路，要走左侧的青木原自然步道。&lt;/p&gt;&lt;p&gt;往前走约三百公尺，又有岔道，要走左侧写着「冰穴·红叶台」的岛。在正面有一块牌子写着「只有一次生命，珍惜它」，但不要把它当回事。&lt;/p&gt;&lt;p&gt;再往前走三百公尺左右竖有路标，左侧写书「红叶台·冰穴」，右侧写着「山道」。山道一侧又有一块铅皮板倒在那里，写着「生命是双亲赋与的宝贵财产！重新想想双亲、兄弟和孩子们吧！」，不要理它。走到这里不免会产生一点动摇，你可以决定是否返回去，因为指南针仍起作用，再往前就走入富岳林道。&lt;/p&gt;&lt;p&gt;这条山路是极普通的山路，对有登山经验的人来说没有什么特殊。不过，四周都是浓密的森林，因景色一直没有变化逐渐会怀疑不知走了多少路，走在什么地方了!?&lt;/p&gt;&lt;p&gt;山路大体是向南延伸的。再走十五分钟左右，路也不像路了，四周的树木有点像原始林了，此时再向前走十五分钟。&lt;/p&gt;&lt;p&gt;从此以后，不论从哪一个方向走进密林都可以，但以向右走最好。&lt;/p&gt;&lt;h4&gt;[绝对找不到尸体的地方]&lt;/h4&gt;&lt;p&gt;此外再介绍两处绝对找不到尸体的地方。&lt;/p&gt;&lt;p&gt;一处是在富士快速巴士「红叶台入口」下车。附近有消防队和旅馆「珍木馆」。沿着其间的柏油道路往前走约一公里，就渐渐看到一片密林，再往前走约一公里就是原始森林了。沿着这条路走入左面叉道，尽量朝深处走。接下来一直往前走就可以了。这一带，不要说当地人，就算自杀志愿者也都不大会来的。当地人说，叉道是「最难找到尸体」的地区。&lt;/p&gt;&lt;p&gt;再一个就是在富士快速巴士「赤池」下车，沿着柏油路精进湖登山道，走过一至二公里后向右进入叉道。在这里，不论当地人还是旅游者都不会找到尸体的。&lt;/p&gt;&lt;p&gt;这两个方法都需走相当长的路，不过从风穴进入找不到尸体的可靠性比较高。由于一般的旅游者也不来此地，往里走入时千万不要引起人们的怀疑。&lt;/p&gt;&lt;h4&gt;[再往前走一百公尺就无法回头了]&lt;/h4&gt;&lt;p&gt;在原始森林里，到处都是盘根错节的树根，青苔和落叶盖住洞坑，所以没法直线前进。自认为是记住来路的，走了一百多公尺后也完全搞不清方向。如果带着指南针的话，就把它扔掉，反正都不能再回到原地了。&lt;/p&gt;&lt;p&gt;在树海里最合适的就是采用死亡率很高的上吊，只要准备一根绳子就够了。不过，这里的树木都很高大，要找一棵合遇的树相当困难。为了要找树，你就会更远离山路，更难被人找到。于是，你就这样永远地从人们的记忆中消失了。&lt;/p&gt;&lt;h4&gt;[注意]&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;大搜索时会被发现 &lt;p&gt;每年十月，当地的消防队、警察等共六百多人对图一的Z道进行尸体大搜索。就是说，如果在国道和西湖南侧的道路中间部分进行自杀的话，尸体还是会被发现的。即使在国道两侧，沿着自然步道走进不过五百公尺的话也是一样的。最近几年来的大搜索发现的尸体是一九八九年三具(其中女性一具)，一九九零年无，一九九一年五具(其中女性二具)，一九九二年因风穴附近发生杀人事件未进行搜索。总之，绝对不要进入这一区。&lt;/p&gt;&lt;p&gt;顺便提一下，当家属委托搜索的场合，一天一个人的搜索费用是一万日元。就是说，如果动员五十人搜索两天，就需要一百万日元了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;当心自卫队！ &lt;p&gt;每年三月，从风穴入口附近往干德道场一带，自卫队在密林中进行一列纵队的步行训练。据说在大搜索中未发现的尸体大部分都是这个时候被发现的。因此，从风穴的南面到干德道场一带，同样还是不选择为好。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;不要被当地人怀疑 &lt;p&gt;在当地长时间居住的人，一眼望去就能分辨出自杀者。据认为，仅仅带一个小包，或者不拍照就是特征，但更重要的是靠直觉。当你想走进树海，当地人就会对你打招呼说「你知道这里是什么地方吗?」，并进行劝说。尽管你说「让我死好了」他们也不会听的。经过四十多分钟的磨嘴皮子，有的最终屈服而被拉回去。所以，首先不要引起这种气氛。然而，临死关头还装作挺开心的样子也有点胡闹。在进入树海之前不要拖拖拉拉、踌躇不前，很大方地走进去，当地人也不至于怀疑跟了过来。因为即使是当地人走进一百公尺也难以回来的，这是真话。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;不要小看和尚 &lt;p&gt;听说，在干德道场住着一位神秘的和尚。房子是普通的，但却在偏离山路的地方里常看到他开车子去买东西，但靠什么维持生活连当地人也搞不清楚。既然不能小看他的存在，那就避免走进这一带吧。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;[交通·住宿]&lt;/h4&gt;&lt;p&gt;从JR线的三岛站乘富士巴士到富士吉田需两个小时。再换富士巴士到红叶台入口、风穴需三十分到四十分钟。巴士每小时有一班。要注意的是冬天的车子班次会减少。&lt;/p&gt;&lt;p&gt;当然没有住宿的必要，但为了备用所以介绍一下。西湖的南面有很多民宿，全年营业，利用这里最方便。从这里到风穴车站，乘富士快速巴士约一个小时。可在山道入口处的珍木馆住宿。&lt;/p&gt;&lt;h3&gt;[案例研究7] 在树海中过着流浪生活的男子&lt;/h3&gt;&lt;p&gt;有个三十一岁的男性公司职员，在一九八三年十一月在树海里徘徊了十六天后，被警察保护起来了。&lt;/p&gt;&lt;p&gt;他是九月下旬，因公司和个人的烦恼而开车离开横滨的家。他开车在自己的故乡爱知县以及东北地区流浪了一个多月后决心自杀，给家属寄了遗书，十月二十六日从鸣泽村的红叶台进入了树海。&lt;/p&gt;&lt;p&gt;最初的一个星期，到处去找合适的自杀地方，有时刚想上吊却遇到了采蘑菇的人，在一下子死不掉的情况下逐渐对死的欲念淡薄起来。于是，有时到国道去买些面包，有时在汽车停车处吃饭，然后又回到树海，就这样过着像流浪汉的生活，最后难以抵挡寒冷的大雨，十一月十日住到西湖畔的一家民宿，并打了电话给家里。&lt;/p&gt;&lt;p&gt;当地的警察局和消防队受到家人的委托，动员了150余人进行了三天的搜索，事实上这个男子知道在进行搜索。
他被保护起来后说:「我不会再想自杀了。」&lt;/p&gt;&lt;h4&gt;[检验状况]&lt;/h4&gt;&lt;p&gt;即使再踏进一步就无法再退回的「死亡的原始森林」，如果进入的路线不妥的话，也会造成这样的结局。大概他是在西的南面道路和同8国道线之间的红叶台、龙宫洞一带活动的，这里是远足路线，有休息处和牧场。遇到采蘑菇的人也会很自然。如果真正要想死的话，这一带是不行的。&lt;/p&gt;&lt;p&gt;早就淡薄了死的欲念，可是仍旧继续进去树海，度过了十来天的树海生活，听起来确实是个笑话。是危险的树海生活，或者是愉快的亦未可知。&lt;/p&gt;&lt;p&gt;这对树海自杀志愿者来说，他的行动说明了「即使进入树海，一星期不吃不喝也能生存下来」的珍贵资料。&lt;/p&gt;&lt;h2&gt;3. Leaping 跳楼&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;骤然跳下毫无痛苦。致死度高，是最高级的自杀方法。跳楼及跳崖自杀是不痛的。&lt;/p&gt;&lt;p&gt;没有疼痛，没有不安，更没有恐怖。不仅如此，甚至还可以算很痛快。这并不是在打比方，事实上确实如此。听上去有点胡说八道，但如果把那些「掉下来的」人们的话综合起来，也只能这么说了。关于这一点，下面还要详细叙述，不过，这样一来，跳楼及跳崖自杀可以说是与上吊自杀相媲美的极佳手段。跳楼及跳崖没有像其它自杀手段所伴随的阴影。&lt;/p&gt;&lt;p&gt;彻底改变了跳楼及跳崖自杀观念的是一位叫做佐藤佳代的少女。距今九十年前的一九零三年，留下「万物真相，一言以蔽之，日『不可解』」，而从华严瀑布纵身跳下的青年－－藤村操，是他对自杀本身赋予了与以往不同的哲学高尚形象。就好像不断出现的后继者那样，佐藤佳代也给予了坠落自杀某种神圣的形象，招致了一个又一个的追随者，甚至还出现「她是掉下来的，是跳跃的」这种神话。佐藤佳代就是红牌歌手冈田有希子的真名。&lt;/p&gt;&lt;p&gt;或许由于这个缘故，不管男女老幼采用跳楼或跳崖法的仅次于上吊法，特别是青年和少女乐于此法，而女性则更多。此法出现上升趋势，现在包括十几岁的女孩在内的女性自杀者中50%是坠落自杀，遥遥领先其它自杀方法。&lt;/p&gt;&lt;p&gt;最早的跳楼者，据说是一九三五年某公司男职员从银座松阪屋百货大楼七楼屋顶向银座大街跳下来的。从以往的华严瀑布或锦浦转向高岛平社区所代表的高层大厦，与都市化有着密切关系，也是都市现代化的现象之一。冈田有希子自杀后的第二天，即一九八六年四月十一日，十八岁的女孩子拉着妹妹的手，留下「为了能领悟自己在前世的超能力」而从社区的屋顶跳下身亡。&lt;/p&gt;&lt;h4&gt;[准备] 需要距地二十公尺的高度 &lt;sup&gt;58&lt;/sup&gt;&lt;/h4&gt;&lt;p&gt;从高楼往下跳的时候，事前应查看一下必要的高度和落下地点的状况。自杀未遂者比较多，大都是因为未能确保必须的高度。如果你真的想死，那就应该从地面二十公尺以上的高度，即从大约七至八层楼以上跳下。地面若是混凝土，那就无法得救了。从四楼往下跳，成功率只有50%左右。附带告之，每增加一层就高出三公尺，不妨作为换算的依据。&lt;/p&gt;&lt;p&gt;查看落下地点也是非常重要的，楼下有小树丛是不行的。从高约十八公尺的五层楼校舍屋顶跳到楼下树丛的十六岁少女，也只落了个重伤。在美国，有人从二十八公尺高处落到花坛，也只是受到断了一根肋骨和左手腕骨折的轻伤。&lt;/p&gt;&lt;p&gt;楼下有树木或路灯也是不行的。从三十五公尺高的十四楼太平梯跳下的十七岁女高中生，只受了住院治疗六个月的重伤，结果是自杀未遂。楼下有块绿化地且不说，在落下时穿在制服外面的风衣因空气而鼓胀起了降落伞的作用，半空中又撞到了枫树，因而免除了灾祸。从新宿的出差旅馆七楼跳下的某通讯社记者，因在半空中碰到路灯而脚先着地，左肩和骨盆骨折没有死掉。他当时没有失去知觉，一面自言自语地在骂「他妈的、他妈的」，一面回答赶来的警察问话。&lt;/p&gt;&lt;p&gt;车辆有时也会起衬垫的作用。在名古屋市，一个由三十三公尺高的百货大楼屋顶跳到马路上的四十岁男子，以俯卧的姿势掉到车辆的引擎盖上，受到颜面挫伤和右肩骨折的三个月伤。&lt;/p&gt;&lt;p&gt;此外，下面是自行车停放处的锌皮板屋顶也不行。为了家里不准饲养捡回的小猫，紧抱着小猫从十一楼跳下的十四岁小女孩，使自行车停放处的锌皮板屋顶破了一大块，断了三根肋骨，跌成重伤，但她和小猫却都保住了性命。&lt;/p&gt;&lt;p&gt;这些虽是特殊的例子，但在美国的一次飞机事故中，有人从三百七十公尺高处落到了一片雪地上，除腰和几根肋骨折断之外，性命却保住了。所以，对积雪也应加以注意。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;58&lt;/sup&gt; 一般来说10m高坠的死亡率在80%左右，12m高坠的死亡率接近90%。&lt;/blockquote&gt;&lt;h4&gt;[要寻找不显眼的地方]&lt;/h4&gt;&lt;p&gt;为了不被很快发现而送往医院，找个不显眼的地方也是首要考虑。从丸之内大厦和毗邻大厦中间跳下的大学女生，一年后才被发现，所谓不大显眼是指要隔了一段时间之后才会被发现的地方。在上智大学七号馆下的石墙旁边，当收拾从屋顶跳下的学生尸体时，偶然又发现半年前就不知去向的学生跳楼尸体；当然这种例子是极少有的。&lt;/p&gt;&lt;h4&gt;[经过] 无苦痛的死法！&lt;/h4&gt;&lt;p&gt;最令人好奇的是，在落下的过程中是什么感觉，落地时有无疼痛这个问题。&lt;/p&gt;&lt;p&gt;从大楼四楼跳下而得救的五十四岁男子说:「没有害怕的感觉，很自然地整个身子越过了阳台栏杆，跌到地面时是否有疼痛的感觉就记不清了，但却知道自己还跌倒在地上。」对正在半空中还在继续往下落时的感觉，他说:「从跳下到地面的过程中，虽是理所当然的事，但还是想到头先着地还是脚先落地的问题，大概是不想让脸碰地吧，很自然地就用双手捂住了脸。」&lt;/p&gt;&lt;p&gt;从高处跌落到冰河岸上而生还的男子说:「好像是坐在巨大的翅膀上慢慢地在下降，很平静地想到自己，想到家属的将来，许许多多的回忆像闪电般掠过了脑海。落到地上后呼吸不乱，在没有任何痛苦的情况下失去了知觉。虽然，头部和手、脚碰撞到崖石或冰块，多处撞伤，但也没感觉到。可以说，没有比这一瞬间更痛快的时候了！」&lt;/p&gt;&lt;p&gt;这种因事故而摔下的事例是不胜枚举的。这些体验的共通点是，开始是缓慢地往下跌落知觉非常清楚，完全没有不安和恐怖，简直就像在做梦似的。在这时候，孩提时代的记忆常常会像走马灯似地在脑海里翻滚，有时还会看见神秘的光线，有时还会从上面往下看正在下落的自己。着地时在安稳的心情中丧失了知觉。&lt;/p&gt;&lt;p&gt;跳楼及跳崖自杀者，绝大部分不发出惨叫声和大声叫喊，大概是由于这种缘故吧。某跌落者说:「真想强调从高处跌落死亡是最无苦痛的死法。」还有的跌落者甚至说:「那真是完美的死，什么痛苦也没有，比起来打针要痛得多。」因此，不妨说跳楼及跳崖自杀是没有疼痛的。
当然，例外也是有的。&lt;/p&gt;&lt;h4&gt;[叫喊着「痛！痛！」，哭泣而死去的少女]&lt;/h4&gt;&lt;p&gt;「现在我要自杀啦，拜拜！」刚才还坐在学校四楼窗沿上的女高中生突然跳了下去。当她被抱起来的时候，小声地一再说「痛死了，痛死了！」的哭泣着。她跌断了头颈，送到医院后不久就死亡了。原因当然很清楚，在于四楼这个高度不够高的。为了不留下疼痛的感觉，应选择可以当场死亡或者至少能昏死过去的高度。&lt;/p&gt;&lt;p&gt;还有，从新宿的住友三角大厦的三十五楼，距地一百四十公尺高处跳下的三十岁左右的女子，双手伸向水平，以高空跳水姿势落下，脸的半部和头部摔成粉碎，当场死亡。这时，目击者听到「哇－－」的尖叫声。也有一面惨叫一面从十一楼跳下的十七岁女高中生。这两个人大概跳楼时感到了恐怖亦未可知。&lt;/p&gt;&lt;p&gt;从物理学角度看，由二十公尺高度(约七层楼)跳下的时候，一秒钟可降落四点九公尺。这时的速度为35.5km/h，约两秒钟后即可着地。就在这短短的两秒钟里，以各式各样的姿势翻滚着，着地时的时速约七十公里。不妨设想一下骑摩托车或乘车时，用这个速度撞到墙壁时，并不是所想象的那么大的冲撞。不过，从更高的地方摔下，其着地时的冲击是很大的。有一个令人难以相信的事例，例如从十一楼公寓屋顶跳了下来的女高中生，竟然在着地时把下水道铁盖撞成了两半。&lt;/p&gt;&lt;h4&gt;[跳崖]&lt;/h4&gt;&lt;p&gt;从悬崖峭壁往下跳的时候，由于周围自然环境的缘故，会出现各种不同的情况，虽然有点说不准，但还是以激烈碰撞死亡的较多。掉到海里或瀑潭里的中途，因碰撞岩石而死亡的例子不少。在热海锦浦自杀的相声演员中田治雄，在跌落中猛烈撞断崖岩石，因而内脏破裂死亡。同样在锦浦跳下的五十三岁男子，全身都是挫伤，当场死亡。当然，如果跌入海里或湖里，也有可能溺死的。&lt;/p&gt;&lt;h4&gt;[跳崖就选胜地]&lt;/h4&gt;&lt;p&gt;跳崖有时是不可靠的。两个国中女学生从六十公尺高的崖上跳下自杀，一个死掉，另一个却得救了。在同样的条件下跳崖，其结局居然也有这么大的差异。再者，不论怎样陡的悬崖峭壁，落入海中就不一定会死。所以，这种情况下就选择名胜吧。名胜其来有自，所以才成为名胜。如果选悬崖，有四国的足折岬、热海的锦浦，瀑布则有华严瀑布等可供选择。&lt;/p&gt;&lt;h4&gt;[尸体状况] 到处有伤但并非惨不忍睹&lt;/h4&gt;&lt;p&gt;如同五十四岁的男子在跳下以后所想的那样，人究竟哪个部位会着地呢?&lt;/p&gt;&lt;p&gt;某医学专家的研究认为，跳楼自杀时，脚先着地的情况好像最多。脚先着地的时候，60%的人头部有外伤，30%的人脊椎骨折，肝脏和肺的损伤分别为20%，心脏破损为25%。&lt;/p&gt;&lt;p&gt;其次是头朝地摔下，这时出现头盖骨骨折，脑损伤以及肋骨骨折等，手臂、脊椎的骨折和肺部损伤的情况较多见。再其次就是臀部着地和横卧摔下。&lt;/p&gt;&lt;p&gt;所以，不论哪个部位先着地，多处都会受伤，从跳楼及跳崖自杀者来看，头、腹、手和脚等三处以上受损伤的情况近70%。总之，身体到处都会受伤，而以头部和胸部受伤的情况最多，70%以上的致命伤都是由此引起的。心脏则因为人体落下时的惯性作用震动很大，大动脉发生断裂的情况也多。于是，因头盖骨破裂、全身挫伤、内脏破裂，出血过多等原因死亡。&lt;/p&gt;&lt;p&gt;或许有不愿被人看到那样惨不忍睹的尸体，但一旦被发现时救护车迅速赶到，转眼功夫就把尸体收拾了。从臀部着地的情况来看，有时尸体几乎看不到任何受伤的痕迹(案例９)。所以，跳楼自杀并不是那么难看的死法。&lt;/p&gt;&lt;h4&gt;[注意] 当心行人！&lt;/h4&gt;&lt;p&gt;着地的地方有人的话，会引起许多麻烦的问题。&lt;/p&gt;&lt;p&gt;因为落到行人身上而得救的例子也有好几个，被压在下面的伤患会索赔巨额赔偿金。埼玉县的通信学校高中生从百货大楼屋顶跳楼时，落到停在下面的车子上，本人固然死了，但坐在车子里的男子也折断了颈骨引起了胸部以下的瘫痪，死者家属赔偿二亿日元。&lt;/p&gt;&lt;p&gt;最近的一个例子是，一九九二年十一月从公寓八楼跳下的男子落到正在下面与女友谈话的高三学生身上，跳楼人不久死亡，而那学生也在四天以后死去。跳楼落到别人身上绝非好事，这一点也要注意。&lt;/p&gt;&lt;p&gt;有位五十一岁的公司理事想从公寓最高层跳楼，但看到下面有几个孩子在玩耍，于是一面背着手拉住十四楼的走廊栏杆，一面大声喊「躲开！躲开！」等到孩子们散开之后才跳了下来，圆满地达成目的。既然是十四层楼的高度，叫喊的嗓门应该是相当大的。不想给自家人造成麻烦的话，请特别留意。&lt;/p&gt;&lt;h4&gt;[头朝下]&lt;/h4&gt;&lt;p&gt;即使有相当的高度也会得救的，相反地即使高度相当低也会有死去的例子。有从六公尺高度跌落到河底因头盖骨跌死，也有从五公尺高的人行路桥摔到马路上跌破了头，一个半小时后死去的。不想失败，就应该头朝地。摔得巧的话，五公尺高度也会当场死亡。还有，虽然跌撞的不是致命部位，但也会因特殊原因而死去。一位五十岁的妇女从公寓四楼阳台摔下，腰骨多处折断，但因全身性的挫伤症而死亡。一位男子从宿舍三楼跳下，二十天后因肺部瘀血、急性肺栓塞而死掉。&lt;/p&gt;&lt;h3&gt;[案例研究8] 跳楼未遂大学生，从十五楼跳下过程中的感觉&lt;/h3&gt;&lt;p&gt;一九八六年十月，二十一岁的大学三年级学生从埼玉县浦和市十五层公寓的顶楼跳楼，随着一声「噗咚」的响声，跌到了自行车棚的铁质棚顶上。他立即被送往医院，但除了左脚受点轻伤之外，无其它伤处。他跌倒的自行车棚顶却留下了大字形的大破洞。&lt;/p&gt;&lt;p&gt;这个人很平淡地叙说在半空中的感觉:「一面往下落，一面却感到鞋子和眼镜慢慢地掉了。跌到棚顶后过会儿，忽然想到，啊！我还活着啊。」他多少留下了口吃这一语言障碍，担心第二年就业面试可能通不过。&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;这是从高处跳下的自杀未遂者所谈的「在空中时的心境」，非常少见生还的事例。十五层楼约有四十公尺高，从这个高度跳下，会有缓慢而降的感觉，可能非常冷静，一点都没有恐怖感和着地时的痛苦。从十五楼坠落而几乎没有受伤，真是个奇迹。所以，坚决跳楼自杀者也应避开自行车顶棚。&lt;/p&gt;&lt;p&gt;他坠地时「噗咚」很大的声音，那么，自杀者掉下来时会出现什么样的声音呢?不妨查证一下。&lt;/p&gt;&lt;p&gt;当然，这是依据从什么样的地方掉下来而各有不同的，如果地面是水泥地，前述从十五楼公寓屋顶坠落的女高中生发出了「噗咚」的声音。从四楼公寓窗户掉下的男子是「仿佛泄气的气球似的声音」。前述从住友三角大厦跳下的女性则发出「噗啦」的响声。如果落到别人身上时，就像前述横滨高中生摔下来时发出一种「好像皮球在地上碰地一声弹了一下的声音」。冈田有希子从二十公尺楼顶掉下来时，据说发出了「咚」的一声大响声，可能是因为头盖骨激烈撞到水泥地吧。&lt;/p&gt;&lt;h3&gt;[案例研究9] 「活着反正也是无聊」的漫画家山田花子&lt;/h3&gt;&lt;p&gt;一九九二年五月二十四日，漫画家山田花子(当时二十四岁)从东京多摩市自宅附近的公寓十一楼跳楼自杀。因为腰部着地，尸体比较完整，出血也很少，连其父母都很吃惊「真的死了吗?」&lt;/p&gt;&lt;p&gt;她读小学时就内向，爱待在家里，读中学二年级时因被欺侮而曾企图用煤气自杀过。到了高中也一再受到欺侮，读了一年就退学了。后来成为漫画家，在《青年杂志》上有作品连载，但画坛未予以好评。不久，连载作品发表不了，最后在不支付稿酬的「？？？」&lt;sup&gt;59&lt;/sup&gt;发表，单靠漫画无法维持生活，于是她做茶艺馆的侍者。但是她一下子记不住客人们很多的点菜单，加上做事不够利落，相继被辞退，而且在工作场所也遭欺侮。好不容易持续工作了半年的饮食店最后也不行了，受到这一连串打击以后精神有点失常，跑到这家深夜营业的饮食店哀求「再雇用我一次吧！」，并强行上班，每晚都到天明。实在无法忍受的店方在半个月以后报了警，父母把她领回去了。在回家路上的出租汽车里说:「大家都欺侮我」时好像在哭泣，事实上她是在笑，她患了精神分裂症。不久她进了精神病医院，两个月后出院了，但对未来丧失信心，就在出院的第二天她从自家附近的公寓坠亡。&lt;/p&gt;&lt;p&gt;她在自杀前两天的日记中写道:「和别人相处不好。自己性格怪癖，一个朋友都没有。……看不到将来，也找不到工作。(被人欺侮)……什么也不想再干了。一切都那么吃力，没有力气，疲倦得很。」事实上这就是她留下的遗书。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;59&lt;/sup&gt; 因原书缺损而无法得知文字，维基百科搜索后一无所获，是无法查证的内容。&lt;/blockquote&gt;&lt;h4&gt;[尸体状况]&lt;/h4&gt;&lt;p&gt;跳楼自杀的尸体是惨不忍睹的，尤其是头部落地的情况。像前面那种腰部着地的例子，面部会是完整的。不过，腿部先落地时可能由于骨折而扭曲，确实不忍卒睹。&lt;/p&gt;&lt;h4&gt;[被「视线恐怖」所杀的漫画家]&lt;/h4&gt;&lt;p&gt;在这里我们应注意的是，山田花子到处受的「欺负」。不管到哪里，被欺负的「家伙」总是被欺负的，她本身证明了这个事实。还有，她描绘的「日记漫画」绝大部分内容，都表现了她特别留意在学校或工作场所「别人是怎样看待自己的」。从此亦可看出，她是天生就有一种叫做「视线恐怖症」的症状。她本人说自己有「对人恐惧症」，就像在外出时一定要戴上太阳眼镜那样，她的一生就是在永无休止的惧怕他人目光中度过。加上又遭欺负，最后终于患了精神分裂症而自杀。有谁能料到她的烦恼有多大吗?那些性格不开朗、内向的、不能干净利落处理事务的人，是不适合在像日本这样的社会中生存下去的。十九世纪意大利的自杀研究家就说过:「自杀是在自然界的生存竞争中，让身心不大健全的那些人自然淘汰的一种手段。」真是说得一点不错，山田花子也是在平静中「淘汰」了的一个。&lt;/p&gt;&lt;p&gt;她生前的自杀观也是值得一提的。在其漫画中曾引用了电影《天堂里的快乐》的这些句子－－「没有任何长处又讨人嫌的话还是去死吧！不说那些坏话／活着没出息／与其混不如大肆渲染一番／活着反正是无聊的。」&lt;/p&gt;&lt;p&gt;此外，在其它杂志还这样写道－－「这个世界本来就是残酷的。」「残疾者们，笑吧！喊叫吧！诅咒命运吧！你的人生就是这么回事。感到讨厌就去自杀吧。」对束手无策的不幸发自肺腑的话，也只有在不幸的苦海中活过的她才能说出来的。这个世上确实有无法克服的不幸。她一语道破了这个事实，与本书的目的也是相通的。&lt;/p&gt;&lt;h4&gt;[案例研究10] 因被欺负而跳楼自杀的中学生&lt;/h4&gt;&lt;p&gt;一九七九年九月九日，在埼玉县福冈市的公寓庭院内，发现了中学一年级学生(当时十二岁)穿著空手道衣，摔成「大」字形死亡。他是当天上午八点多，从离家约两公里的公寓十楼跳到二十公尺下面的水泥地。&lt;/p&gt;&lt;p&gt;自杀的原因是受欺负。在上小学时还相当开朗的这个学生，进了中学不久因小事情跟别人打架。身高只有一百四十二公分的他是班级内最矮小的，被同学们说成「人虽个子小，倒挺蛮横的」而被排挤在外。没有人可说话，天天沉默不语，结果被人起了「墙壁」这个绰号。经常被人嘲弄说:「你是墙壁，面壁就行了。」&lt;/p&gt;&lt;p&gt;同年六月十八日傍晚，该少年把遗书贴在书桌上就不见踪影了。遗书上写着「每日受欺负，不想上学了。也不想再活了。我要自杀。」可是，这天晚上八点多，该少年满身大汗地回到了家。后来听说他本想从公寓顶楼跳下的，但感到害怕就跑了回来，满身大汗就是因为跑得太快。&lt;/p&gt;&lt;p&gt;自杀未遂的消息走漏了出来，班级的那些专门欺负人的淘气鬼们越发欺负得厉害了。他又有了一个新的绰号「自杀小子」，加上他父亲曾是清洁车的驾驶员，被嘲为「脏得很」、「臭得很」、「像个乞丐的家伙」，有时他被当成小偷，也曾被满脸被涂上蛋黄酱。&lt;/p&gt;&lt;p&gt;他实在无法忍受欺负，自杀前一天第一次旷课，第二天是星期日，他自杀了。这天他穿了空手道衣，是自杀未遂后开始练习空手道穿的，这也是他第一天穿。
知道他自杀了的那些捣蛋孩子竟然喊了「万岁」，至于他们欺负的理由，说是「无聊」、「好玩」。&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;该少年第一次企图自杀时，害怕得跑回家。一般来说，决定自杀的人即使站到高处心情也是平静的，并不害怕，但也并不一定都是如此。一位二十四岁的女子想要自杀爬上海拔1713公尺的高山，但快到山顶的悬崖处时害怕了，不敢跳了，又下不来，整整三天三夜在风雨中不吃不喝地伏在那里等待救助。这是八月底发生的事，夜晚的气温降到6～7度，而她只穿了一件罩衫。看来当时下决心去死掉可能会舒服些。&lt;/p&gt;&lt;h4&gt;[被欺负的人不管做什么总是被欺侮]&lt;/h4&gt;&lt;p&gt;山田花子的例子也是这样的，只能说被人欺负是没有办法的。被欺负的家伙不管做什么总是会被欺负的。不管空手道也好，自杀未遂也好，不但没有产生任何作用而且反而使事态恶化了。没有共同目标而只有人与人之间的关系的班级里，能够做的也只有模仿恋爱的游戏和欺负人了吧。&lt;/p&gt;&lt;p&gt;据说父亲曾劝过中学一年级的儿子说:「还有两年半，忍一忍吧。」，但没有人能保证中学毕业以后就会有幸福，升入高中后并不一定就出现变化。而且想到还要再忍耐两年半的时间，那么他所做的选择可以说是正确的。还不如第一次爬上公寓时就摔死要好得多。&lt;/p&gt;&lt;p&gt;早点自杀也是很重要的。&lt;/p&gt;&lt;h3&gt;[自杀地图2] 高岛平社区&lt;/h3&gt;&lt;p&gt;现在，那个高岛平社区是什么样子呢?事实上，因应一九八零年前后的跳楼风，对超过十一层的三十七栋高楼，自三楼以上的外走廊和外楼梯都装上了防止跳楼的围栏，窗户则装上闭锁。上屋顶的楼梯装了上了锁的铁门。现在可以说是完全不可能跳楼了。曾被称为自杀名胜地的新村管理部门，因被装了完全防止自杀装置，反而成了望上去一片铁牢的异样景致。&lt;/p&gt;&lt;h4&gt;[历史]&lt;/h4&gt;&lt;p&gt;社区完工是在一九七三年，当时曾被誉为日本规模最大的，现在看上去还是宏大规模的社区。当年就发生了五起跳楼事件，但使社区出名的是一九七七年母子三人跳楼自杀事件。由此而被称为「自杀圣地」的社区，自杀者每年超过十人，一九八零年突破了二十人，到了一九八二年累计达到了一百人。自杀者中的八成以上是来自静冈、新泻等外地的「远征自杀者」，有的人为了翻越屋外围栏而特意买来梯子，自杀旺季时每隔三天就有一个自杀者。&lt;/p&gt;&lt;p&gt;为此，一九八一年花费七亿日元装上钢铁栅，并在社区内安装了「救命电话」等，着实大费周张了一阵子。虽然如此，仍然有用长凳砸破玻璃窗，爬到屋檐跳楼自杀的十九岁和十八岁的男女。不过，或许这一对引起了更大的因应措施。&lt;/p&gt;&lt;p&gt;有关人员说:「(自高岛平警察署设立以来的)最近七年间每隔两三年才发生一件，因为装了围栏几乎听不到有人自杀了。」&lt;/p&gt;&lt;h4&gt;[跳楼方法]&lt;/h4&gt;&lt;p&gt;现在不会再有人特地到高岛平社区去跳楼了，不过为了那些在附近怎么也找不到合适的地方，或者「不管怎样还是高岛平！」的人们，我在这里悄悄地告诉你高岛平的一些「好地方」。&lt;/p&gt;&lt;p&gt;看来完全封堵了跳楼的社区，不知为什么3-11街区(参见地图)却完完全全地毫无防备。尤其是3-11的一号楼，外人也能随意进出一至十四楼的外走廊，只有一公尺高的低栅，毫无防备的情况大概连居住者都会害怕。3-11的二～六号楼，楼梯转角平台上的窗子没有闭锁装置，只要爬上150公分左右的矮墙，就能顺利地跳下去。虽然如此，我还是推荐可以展望都营线对面板桥区街景的3-11的一号楼十四层外走廊。下面不用说是水泥地，行人也少，摔下去肯定必死无疑，而且这栋楼的外楼梯也没有装设栏杆。&lt;/p&gt;&lt;h4&gt;[交通]&lt;/h4&gt;&lt;p&gt;乘都营三田线在新高岛平站下车，朝3、4丁目方向然后左拐前进。3-11的一号楼临电车轨道，是整个社区中唯一没安装铁栅的大楼，一下子就可找到。&lt;/p&gt;&lt;p&gt;要想观看铁栅的异样景致，不妨在提前一站的高岛平站下车为最佳视点。&lt;/p&gt;&lt;h2&gt;4. Cutting the Wrist and Carotid 割腕割喉等&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th colSpan=&quot;2&quot;&gt;&lt;center&gt;割腕&lt;/center&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;虽然是「刀子割破手腕」，但也可以致死。这是最平静的死法之一；不过要有未遂的心理准备。&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th colSpan=&quot;2&quot;&gt;&lt;center&gt;颈动脉&lt;/center&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;想尝试一次血喷天花板的感觉?但是太恐怖了，而且未遂的机率很大，所以不是好的方法。&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th colSpan=&quot;2&quot;&gt;&lt;center&gt;切腹&lt;/center&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这种有百害无一利的手段也很新奇，但是为什么不断有人用这种方式自杀?真是不可思议。&lt;/p&gt;&lt;h3&gt;割腕·刎颈&lt;/h3&gt;&lt;p&gt;在半夜，单独一个人在房间里拿把刀子放到手腕上比划比划。死也好，不死也好。如果你真的想到过死的话，恐怕至少有过一次这样的经验吧。假如把刀子横在脖子上，也可体验一下死亡的惊险了。割手腕是最简便而又能当场体验到自杀气氛的方式。同时，既能用自己的身体和眼睛观察，又可了解疼痛和死去的全部过程。六十年代曾被称为「割腕综合症」，这种而在美国极为流行的自杀方法，随后又波及到欧洲，最后火花飞溅到了日本。最近，歌手中森明菜割腕后，在六本木一带的迪斯科舞厅出现了年青女性相继割腕的「明菜综合症」，成为时下最时髦的自杀方法之一。&lt;/p&gt;&lt;p&gt;不过，对真正想自杀的人我是不大想推荐这种方法。因为，有一种意见认为割腕死亡率只有5%，方法虽受欢迎但未遂率却较高。话虽这么说，那种坚持「割手腕是绝对死不了的」说法也并不正确。假如相信前述的数据，每二十人就有一个人死于这种方法。某前检察官也说:「仅仅割腕而因出血过多死亡的并不多。」这一章就是为了那些希望能够成为5%的人所撰述的。&lt;/p&gt;&lt;p&gt;当然，一开始就没打算去死而只是想体验一下自杀情绪而割腕，是不要紧的。只要不对他人造成麻烦，也就没有被责备的道理。再者，如同割腕一样，用带刃的东西伤残身体使其大量出血致死的方法，还有割颈动脉、刺胸，或切腹等。这些自残行为的自杀也都是因为出血而死亡的，所以在本章一并加以介绍。&lt;/p&gt;&lt;h4&gt;[准备]&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;手腕——割断它！&lt;/strong&gt; &lt;p&gt;不论割手腕还是割颈动脉，只要有锋利的刀具就够了。菜刀、剃头刀、裁纸刀等，只要利就都可以。割腕的场合，最好先喝点酒，然后洗个澡，以使血液加速循环。还有，为了不使出血停止，割后应把手浸在温水里或放置在面盆里，否则血液会凝固堵住伤口。不过，手腕只要割断动脉就会死的，这是医生们的一致意见。有的专业医生说:「只要割开动脉的一半以上或完全割断就会死的，割了一大半就不会再堵塞了。」&lt;/p&gt;&lt;p&gt;事先确认好切割的位置也是很重要的。要想割手腕的人，应该把平日较不灵活使用的那只手的手掌朝上，细看手腕。手关节的内侧有一根可摸到纵向的手动脉，就割这根手动脉。在手动脉和皮肤之间有斜向的两根静脉，恰好在手腕皱纹处与动脉交叉。为了更看清相互位置关系，不妨用力按住腋下使静脉突起。单单割静脉而不想点法子，血流约200至300c.c.就会自然地停止，不至于死去的。可是，就是这样也流了相当大量的血，常常就会因这个景象而到此为止不想死了。&lt;/p&gt;&lt;p&gt;把目标瞄准在没被静脉遮盖的皮肤下面的动脉，对准它横向地割上一刀，也只不过割了静脉罢了。动脉在皮肤下六至七毫米(参照图一)，比看上去还要深些。必须刺透动脉，而且还要割几下。即使是这样瞄准，当真正地去割也会割到旁边的正中神经，是很痛的。沿着动脉纵向去割或许可避开，但因太近而有困难。自杀未遂，反正也可再接上，所以可忍受疼痛而把神经扣腱一起割开。在摸脉处反面也有同样粗细的动脉，把它也一起割开较好。总之，如果没有打算把手腕割下来的决心是不会死的。&lt;/p&gt;&lt;p&gt;还有，不妨考虑到万一自杀未遂而留下伤疤，不妨确认手表表带的位置。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;颈动脉——刺透再拔出来&lt;/strong&gt; &lt;p&gt;颈动脉，只要一割就会立即死亡，不必担心未遂以后的事情。不过，这也是确确实实地割断的情况。&lt;/p&gt;&lt;p&gt;切割颈动脉的时候，最容易割断的是平日较灵活的手那侧的耳朵下面的外颈动脉。不妨对照图二、三来确认一下位置。颈动脉在颈部的高度处，分为内颈动脉和外颈动脉，靠近肩处的血管既粗也比较深。到耳朵下面里边深度达到三公分以上，四周粗厚的肌肉不少，割断也有一定的难度。这种情况，也不要横向割上一刀，而是狠心地刺透然后再拔出来才好。有时割得不顺当，要割上好几刀(案例１１)，可是也有当倒下去时砸碎了饭碗，碗片割断了颈动脉一下子就死掉了的人。割颈动脉也非常地难，但上述事例也并不是没有的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;其它的自残——心脏位置比一般想象的还要靠近中央&lt;/strong&gt; &lt;p&gt;刺扎心脏的方式，应在事前用手摸胸以确认位置。心脏比想象还要偏向中心，深度虽因人而异但也有九公分深。&lt;/p&gt;&lt;p&gt;东条英机向医生请教了心脏的位置，经常抚摸胸部以确认位置，甚至还让人画了靶子用手枪击穿，但实行时还是偏了，以自杀未遂告终(有人说因为他是独裁者中难得的左撇子的缘故，他是用右手开枪的)。没有刺中心脏而多次连续刺扎的例子也很多。&lt;/p&gt;&lt;p&gt;切腹的方式，刀刃至少要有十五公分长。如果不能刺穿到脊背，那就没法进行切腹自杀。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;[经过]&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;手腕——让它流掉一公升血&lt;/strong&gt; &lt;p&gt;「人这个东西，那怕是用足了劲也割不动」，说这话的是用薄小刀在手腕上割了长五公分，深四至五公厘的二十七岁的女子。不错，肉和血管都比想象得难割，手动脉的边上还有腱，更难割。下了决心割开手腕，伤口张开很大看到血管和白肉，紧接着一股热血涌了出来。即使只割开静脉，敷上的毛巾也立即会染成血红的。连动脉一起割开的话，将会以同样粗细静脉六倍的力量喷上两三米高。但是，随着血的流出血压徐徐下降，流血会减少。至于疼痛，只割了静脉的二十二岁的女大学生的话是值得作参考的。她一面用毛巾捂着手一面这样说:「看着流血在想，就这样死掉吗?还是重新生活下去?两者必须选择其一。大概你们不一定相信这是真的，一点都不痛。从前，在中学二年级的时候曾割过手腕，那时也没感到痛，原来这样做是能死去的。」&lt;/p&gt;&lt;p&gt;割到神经会感到相当疼痛是很自然的，如果是静脉的话也不过是一般切伤程度的疼痛。&lt;/p&gt;&lt;p&gt;可是，割过以后的问题是，如果顺当地割断动脉，那么体内的血液流出了三分之一，人就会死的。在人的体内，每公斤体重计算男性有约80毫升，女性有约60毫升的血液流动着。因此，如果你是位体重五十公斤的女性，体内就有三公升的血液，其中的三分之一(即一公升)流出后你就会死掉的。这只相当于捐血时所采取的400c.c.的2.5倍而已。孩童和老人会以更以少量的出血而死去。用割腕的方法去死确实是困难的，但只要确实地割断而且确实地流血的话，还是很简单。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;颈动脉——喷血十二秒钟&lt;/strong&gt; &lt;p&gt;完全割断左右任何一根颈动脉的方式，会怎样呢?血会迸发出来喷溅到天花板或壁面上，约过五秒就神志不清，脑的功能停止，十几秒钟后因流失大部份血液而死去(某项研究认为是十二秒)。有的人认为当割断一面的颈动脉时，另一面的颈动脉还向脑部输送血液，约有三分钟的时间还是有意识的。但立即死亡的说法可靠性较大。&lt;/p&gt;&lt;p&gt;马拉松长跑运动员圆谷幸吉用割断颈动脉的方法自杀，是广为人知的事情。他是躺在床上，用双面安全刀片割断右颈动脉的。&lt;/p&gt;&lt;p&gt;和手一样，割断位于比动脉浅的地方的颈静脉的方式，也会大量出血，随着动脉流动顺势吸入空气，因进入血管的空气阻塞肺部而死亡。同样地，空气进入气管就会窒息而死&lt;sup&gt;60&lt;/sup&gt;。不过，即使割了颈动脉，如手静脉一样因为出血停止而不至于断气的，也不在少数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;其它的自残——胆小的切腹是死不掉的&lt;/strong&gt; &lt;p&gt;切腹时，首先会割断许多不足以致命的腹部细小血管，然后刀刃伤及小肠，大便溢出而引起腹膜炎死去。当然不会马上死去的，据说要在三、四天以后才能咽气。职业摔跤运动员力道山的死，也是因为刺伤后的腹膜炎。当刀子插入腹部时会引起腹膜休克，一般情况下痛得不能再继续下去。&lt;/p&gt;&lt;p&gt;可是，如深刺可达背部的话，那就割了背骨前面的大动脉，会大量出血当即死亡。不分男女老幼，用这种方法死亡的还真不少。这时，刀子不要一直插在里面而应立即拔出。否则，刀子会起堵塞血管的作用。&lt;/p&gt;&lt;p&gt;刺穿心脏的场合，刺得准的话会当场死亡，但心脏的组织结构是相当坚韧的。用厚刃菜刀自杀的一个家庭主妇的心脏就有三个窟窿，这就是说，不是一下子就死了的。企图用三根五寸钉子钉死心脏自杀的一个木匠，因钉子堵住了伤口而避免了大量出血，送到医院后在手术中因出血而死掉。&lt;/p&gt;&lt;p&gt;不管哪种方式，一般来说靠出血自杀是有一定的难度的。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;sup&gt;60&lt;/sup&gt; 这句可能有误，作者应指大量空气进入血管后引起的空气栓塞。一般来说若静脉中被注入超过100ml空气或空气注入速率达100ml/s以上会致死。在脑血管中超过2ml空气即可致死，冠状动脉中超过0.5ml空气即可致死。&lt;/blockquote&gt;&lt;h4&gt;[尸体状况]&lt;/h4&gt;&lt;p&gt;「血海」只是形容词&lt;/p&gt;&lt;p&gt;割断颈动脉的场合，有些书籍形容为「周围一片血海」，其实不过是有数公升的血流到地板，有时溅到天花板或墙壁上，至少是一滩血，但地板上全都是血的情况是没有的，圆谷运动员的房间也没成为一片血海。&lt;/p&gt;&lt;p&gt;切腹的场合，用刀横向剖腹的话，会有一桶之多的肠子流出来，样子极度的难看。&lt;/p&gt;&lt;h4&gt;[注意] 割手静脉是死不掉的&lt;/h4&gt;&lt;p&gt;如果一定想割断手静脉而慢慢地愉快死去的话，最好喝些酒洗个澡，使血液循环畅通，在浴缸里把手放在心脏以下的位置，注意不要让血凝固，而坐等死神的来临。稍为昏迷就有可能溺水，这时又恢复了知觉，这并不是什么安乐死，反而尝到呛水窒息的痛苦。因此，要注意保持不要溺水的姿势。还有，在割脖子的时候最好取侧仰卧姿势，使心脏的位置保持在上面。&lt;/p&gt;&lt;p&gt;当血液缓慢流出的场合，在此期间内与维持生命无直接关系的其它内脏会补充一些血液，是不流掉近70%的血液就死不掉的情况。这就是说，靠割手静脉死亡是不可能的。因割手静脉而死亡的话，大都是静脉吸入的空气堵塞了脑或肺的血管，乃是因为空气栓塞而死的。不过，这种情况极其少见。&lt;/p&gt;&lt;h4&gt;[自杀骗局的费用]&lt;/h4&gt;&lt;p&gt;原先就想到未遂的后果而去割腕时，担心的就是伤疤。只割了静脉时尽管很深，但只不过一道白痕，看上去和手腕皱纹差不多。但割断动脉的话，也会割到下一层的腱和同一层的手腕中央的正中神经。虽然割断了腱和神经，但做手术可接好的(案例12)。不过，这种情况，会留下纵向切开的痕迹，手术后的疤痕是显眼的。整形外科手术会有帮助，但医疗费却需数万至十几万日元。&lt;/p&gt;&lt;p&gt;割断手腕静脉的缝合，需要的费用是负担三成的医疗保险约需三万日元。作为舍命游戏的代价，还算是便宜的。&lt;/p&gt;&lt;h3&gt;[案例研究11] 割手动脉和神经的女高中生的感想&lt;/h3&gt;&lt;p&gt;一九八五年，一个十六岁的女高中生用小刀割腕。伤口伤及动脉，出了一公升血，但以未遂告终。对当时的情况她是这样说的:「动手割了到底是痛的，血流了不少，但一直是清醒的，所以又割了好几下。真痛啊！割到粗血管时血就喷了出来，这时还有一种『嘶嘶』的声音，我还以为就这样会死的但还是不行，于是我又割了。这时好像割到神经似的，感到麻酥酥的。被送往医院接受治疗时在想最好给我打针麻醉药，因为，对疼痛已经反感了。」&lt;/p&gt;&lt;p&gt;她从中学二年级时起，在大家面前还是有说有笑的，但只剩下和朋友两个人时却没有了话题，总感到自己不会说话而苦恼着。曾经想去神经科检查，但始终没能说出口。&lt;/p&gt;&lt;p&gt;当决定自杀时的状况是这样:「吃完晚饭，因有作业我就在想『不做不行，不做不行』的过程中忽然想到『死掉』的话不就没有这样的事吗?在这种情况下逐为变为『不死不行，不死不行』的心情了。」同时，她说:「想到动手是刹那间的事」后，继续说:「好久以前就想过，真的死去痛苦就没有了。虽也想应该活下去，但死掉了就不必做那些不愿意做的事，不必想那些痛苦的事了。」当知道死不掉时:「我在想是不是有人早点发现我啊！」&lt;/p&gt;&lt;p&gt;结果，她在精神科病房住了四个月，进行了身心的调养后终于出院了。&lt;/p&gt;&lt;h4&gt;[检验案例]&lt;/h4&gt;&lt;p&gt;看来她是割了手动脉和中枢神经，割到这种地步是非常痛的。她的「死去的话痛苦也就没什么了」的想法很有洞察力。&lt;/p&gt;&lt;h3&gt;[案例研究12] 割了肘内侧的罕见自杀未遂者中森明菜&lt;/h3&gt;&lt;p&gt;一九八九年七月十一日下午四时半左右，走红歌星近藤真彦回到公寓时，发现爱人，同样是走红歌星的中森明菜(当时二十四岁)，用剃腋毛的剃刀割了左肘关节内侧，倒在血泊里。在她倒下的浴室流了约五大杯的血，其人神志模糊不清，看来她是在被发现前不久割腕的。她立即被送往慈惠医科大学医院，伤口长达八公分，深两公分，因割了静脉和正中神经，缝合手术进行了六小时之久。手术施行全身麻醉，血压一度降到60mmHg左右，输了600c.c.的血液。手术后为了不使静脉和神经再度断裂，胳膊用石膏绷扎了一段时间。后来她在中伊豆的温泉进行调养，现在完全恢复了。当初所担心的手指不能弯曲及大拇指、食指、中指丧失知觉的后遗症未出现，伤疤也看不出来。&lt;/p&gt;&lt;p&gt;自杀未遂的动机，人们认为是与近藤之间的感情摩擦。&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;这是割肘部内侧血管的自杀未遂例子，很容易被认为是无聊的假自杀骗局。但八公分的长度是肘内侧的一端到另一端的长度，而且深度有两公分，是相当程度的重伤。这个伤口肯定张开得很大，如果割到动脉的话，绝对会危及生命的。&lt;/p&gt;&lt;p&gt;掌管手的运动和感觉的正中神经在皮肤下面约一公分之处(参照图四)，附近还有一根较粗的动脉也在皮肤下一公分处，对自杀来说是再好不过的地方。她未割到这一动脉可真算是个奇迹，有的医生说:「应该不是纵向割的?」不过，一般认为，说是深两公分也只是开口部分有两公分，实际上没有割到两公分深处。两公分，那就是可达到骨头的深度。&lt;/p&gt;&lt;h3&gt;[案例研究13] 刀砍全身也未死的日商岩井岛田常务&lt;/h3&gt;&lt;p&gt;因道格拉斯·格鲁曼难于判决的案件而榜上有名的商社－－日商岩井的岛田三敬常务(当时五十六岁)的尸体，于一九七九年二月的一个早晨，在岛田任社长的该社子公司日商岩井大楼下面被发现。所谓道格拉斯·格鲁曼难于判决案件就是，当时和洛克希德事件一起把政界、财界卷了进去而成为话题的案件。&lt;/p&gt;&lt;p&gt;岛田常务的尸体，在右颈和左手腕上有用刀子割过的痕迹，胸部有数处用锥子刺过的痕迹。死因是出血及外伤性脑机能障碍，脑机能障碍是因为从大楼七楼社长室跳下来时造成的。他死时穿着衬衣和过膝衬裤，上罩西服外衣，袜子则只有右脚穿著。&lt;/p&gt;&lt;p&gt;在前一天的晚上十时半左右，他对留下加班的社员说了句「可以走啦」后，整理了房间，脱了衣服，用刀子割了颈部和手腕，又用锥子在胸部扎了几处。可是都没达成致命伤。经过数小时的痛苦之后，最后用足了劲爬上七十公分高的窗台，从七楼窗口跳了下去。左脚的袜子留在窗边，大概是爬过窗台时因血而滑倒就脱落下来的。距社长室五公尺之遥的洗手间里也留下了血迹，这是由于大量出血所引起休克所造成的失禁状态，才去了洗手间的。岛田与死神的搏斗是极其凄惨的，因出血而几次昏迷，每当恢复知觉时又在身上乱砍，如此重复多次，看来花费了很长时间。&lt;/p&gt;&lt;p&gt;房间内的地毯自然被血染红了，刚打开的山得利威士忌的酒瓶和茶碗散放着，桌子上好像表明其生前性格似地整理得很干净，留下了九封遗书。在沙发中间整齐地放着裤子、外套、围巾、衬衫等，这说明他对自杀作了周密的准备。&lt;/p&gt;&lt;p&gt;他被作为当时事件的重要证人，为后来被捕的海部八部前副社长的左右手，因此，无疑是与这次事件有关的自杀。自杀的前两天，海部还举行记者招待会。&lt;/p&gt;&lt;p&gt;他留给社员的遗书写着「公司的生命是永存的，为了永存我们应该奉献。」&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;这是生动地告诉人们靠自残进行自杀是困难的例子。事实上，自残自杀和服毒自杀一样，未遂率特别高。这个人先割手腕，再割脖子，又改用锥子刺胸部，其实他一开始就选择跳楼的话，就没有必要吃那么多不必要的苦头。&lt;/p&gt;&lt;p&gt;有一点不应忽略的，就是当他用刀乱砍自己的身体而快要昏迷时，去了洗手间。在其它自杀手段中，常有因休克但神志还清楚时出现脱粪现象。既然能有整理房间、摆好遗书的周密准备，那么也就应该先去趟洗手间。尽管是自残，但也不该盲目地乱刺乱砍，这样是死不掉的。但是，不愿别人看到失禁的痕迹，而在自杀过程中去了洗手间，也真是稀奇。&lt;/p&gt;&lt;h2&gt;5. Jumping 撞车&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;尸体会撞的血肉模糊；电火车停驶会造成很大的妨碍。不过这个方法在决心想死的时候，确实可以死亡，所以越来越受欢迎。&lt;/p&gt;&lt;p&gt;拖着极端疲劳的身子离开公司或学校，只要想到明天，心情就格外沉重。这时你站到了月台上，听到电车到站的广播。不愿再想以后的事了，真想在这里做个轮下鬼把一切都结束掉……脑海中产生这样想法的人该是不少。明明知道将把凄惨的尸体暴露在人们面前，但撞电车而死的人却不断出现，恐怕是这种方法对冲动的自杀欲望是再合适不过的缘故。&lt;/p&gt;&lt;p&gt;提到撞车自杀，最简便的就是铁路自杀，其次就是在马路上撞卡车了，但据一九九一年警视厅的统计，在车站内自杀者为一七九人，铁路卧轨为七八七人，马路上的自杀者仅为四人。换句话说，除跳海、跳湖以外，百分之九十九以上不是撞一般车辆而是撞电车和火车。其中，不在车站而在铁路上卧轨的居多。&lt;/p&gt;&lt;p&gt;铁路卧轨要比一般撞车多，可能是因为这种方法的「致死率」高的缘故，与上吊、跳楼一样是必死无疑的手段。要想撞车而死，那就毫不迟疑地去撞电车吧！&lt;/p&gt;&lt;p&gt;根据旧国铁首都圈本部的统计，铁路卧轨最多的月份是七月和八月，时间是傍晚的六点到七点，与其它自杀手段的统计略为不同。性别中男性占七成七。还有一点有趣的是，选阴天的自杀者较多。&lt;/p&gt;&lt;h4&gt;[准备] 在快车经过的车站等候&lt;/h4&gt;&lt;p&gt;在车站的月台跳下时，应选特快或直快车辆的「不停靠车站」。正在减速的电车，其致死率也会降低的，要是停靠站，那就应选月台的最远程电车进站处。&lt;/p&gt;&lt;p&gt;突然冷不防的跳下会给周围的人造成影响。虽然不坏，但时间掌握稍迟就会碰撞到车头而被弹出，留下一条生命，跳的力量过大时，还有可能落到轨道另一边。&lt;/p&gt;&lt;p&gt;没有慌张的必要。驶入车站的电车，来到你面前一百多公尺时，即使急刹车也是来不及的。电车是一面刹车一面驶来的，所以紧急制动器起不了作用。慢慢地跳到轨道上横卧在那里时，不会有人来阻止的。一个四十二岁的公司职员从月台下到轨道，并俯卧在那里等待电车的到来，最后电车辗过了他，造成头部、右腿轧碎，当场死亡。&lt;/p&gt;&lt;p&gt;一辆山手线电车以时速五十七公里的速度驶入东京站，因三十公尺前方一个男子跳轨而紧急刹车，但由于惯性仍向前驶过了一百多公尺，男子浑身碾碎，后脑脑浆迸出，当场身亡。这时应该记住，电车的警笛会特别地响，简直要把耳朵震聋了。&lt;/p&gt;&lt;h4&gt;[选择夜间行事]&lt;/h4&gt;&lt;p&gt;在离车站一段距离的轨道上卧轨的时候，要尽量选在驾驶员不易看到的转弯处。事先乘坐电车，在车头观察驾驶员不大留意的地方也是个办法。找到了合适的地方，可安心地卧在轨道上等待电车的到来。不过，电车迫近的时候会听到隆隆的轰鸣声，据说以一般的精神状态是无法继续留在那里的，所以最好服用一点酒类、安眠药、镇静剂等较好。可是也有面对时速二百公里的「光」号列车，从静冈站上行线月台跳到轨道伫立不动，被火车辗过的高中三年级女学生，真是令人甘拜下风的有胆量例子。&lt;/p&gt;&lt;p&gt;在一般路线上电车还更难停下来的。一辆以时速九十公里行驶的电车，当发现前方200公尺处有人影而紧急刹车，但电车停下来的地方却是辗了那个人后又行驶了200公尺。据资料说，电车紧急刹车之后到停下来的距离是刹车时的速度。&lt;/p&gt;&lt;p&gt;从时间上说，绝对应选择夜间。周围的人也好，驾驶员也好，都不大容易发现。&lt;/p&gt;&lt;p&gt;进入路线区有困难时，或从平交道口迅速跑入，或从人行路桥上跳下亦可，从平交道口跳入的情况也不少，进入线路区的方法其实很多。(见案例16)&lt;/p&gt;&lt;h4&gt;[经过] 确实立刻死亡&lt;/h4&gt;&lt;p&gt;一开始就横卧轨道的话，凡是横在轨道上的头、腹、胸、手脚某部分都会被辗断，只要胸部和头部被辗断就会当场即死亡。如果衣服被车辆钩住的话，会被拖上十多公尺，然后身体多次翻滚而各部分也被多次辗过，粉碎的尸体散见在数百公尺内。从月台跳下或从平交道口闯入时，多半会出现这种情况。&lt;/p&gt;&lt;p&gt;电车的动能极大，有时鞋子或皮包会碰到在月台上的人，该情况显示人已死亡了。一个男子飞身去撞时速八十五公里的电车，结果双手、双腿、躯体被压得粉碎，分散在一百公尺范围内，头部更是不知去向了。&lt;/p&gt;&lt;p&gt;被新干线火车压断的情况更惨，好像被搅拌机搅过似的。在相模平野附近，一个男子突然在时速200公里行驶的「光」号列车的300公尺前面，背对火车而蹲在路轨上，只见一阵尘土飞扬似地鲜血四溅，大体完整的肝脏、部分头皮和头发、三十公分左右的连骨盆的脊椎、脖颈和下颚的一点皮、右手腕、三颗牙齿等散落在四五百公尺之内。其它部份则成为肉片和骨片飞散到远处了。火车是在刹车以后又向前行驶了三、四公里才停了下来。&lt;/p&gt;&lt;h4&gt;[如雨般的骤下红雾]&lt;/h4&gt;&lt;p&gt;前述那位站立在轨道上被「光」号列车撞死的少女，她的上半身撞到三十公尺外的月台墙壁后又弹回月台，接着衣服和太阳眼镜也飞了过来，周围呈现一片血雾。下行月台的贩卖部说，只听到轰隆一声沉闷巨响，顿时眼前一片红色。那么，究竟是什么力量使身体的碎片或物品被弹出去的呢?&lt;/p&gt;&lt;p&gt;碰撞到普通电车的前部，如果是行驶中就会被弹出五六公尺，这时因心脏瞬时停止而死亡的例子很多。这种情况下如果被弹出后仍落到路轨上，身体又会被压断，假使摔到路轨外面，不幸的是仍有可能保住生命。&lt;/p&gt;&lt;h4&gt;[尸体情况] 血肉横飞&lt;/h4&gt;&lt;p&gt;在所有的自杀手段中这是最惨的一种，对此应有心理准备。不过，不在车站或平交道口撞车，尸体是不会被一般乘客和看热闹的人看到的。被撞飞出去的尸体，有时表面上也没有什么损伤。这种场合，内脏的破坏却很厉害。&lt;/p&gt;&lt;p&gt;车站工作人员在十分钟左右就处理好尸体，把周围洗刷干净，但经过三十分钟却还找不到被压断的手或脖子。某自杀者的脸部贴到货车上，从福岛县到北海道行驶900公里后才被发现。也有在山口县撞上的女子手臂，经过900公里的距离到横滨才被发现的例子。&lt;/p&gt;&lt;p&gt;虽然尸体运走了，电车也恢复行驶了，但零碎的东西散见各处，枕木和铺路道上依然血迹斑斑，留下凄惨的痕迹。
在车站区以外的地方卧轨压死的话，较不会留下被压成两、三段的尸体。总之，对想完完整整死去的人来说，这是绝对不适合的方法。&lt;/p&gt;&lt;h4&gt;[注意] 轨道和尸体应成直角&lt;/h4&gt;&lt;p&gt;有时运气不好，手、脚都被压断但未达到致命，而靠义肢过后半生情况也是有的(案例15)，所以一定要想法让脖颈或胸部卧到轨道上。有时身体会夹到轨道中间，奇迹般地只擦伤了一点皮毛(案例14)。因此，使身体和铁轨成直角交叉，是卧轨自杀的基本要领。&lt;/p&gt;&lt;h4&gt;[要做支付巨额赔偿金的准备]&lt;/h4&gt;&lt;p&gt;铁路自杀会带来巨额的赔偿费。据一九八五年旧国铁的统计资料，电车的一次紧急刹车会造成6000～8000日元的电力损耗和约一万日元的车轮磨损费。电车停一次，以乘客较多的东京山手线而言，每15～30分钟就损失数十万日元，如果是尖峰时间就会造成100～200万日元的损失。新干线的损失费用更大，耽误一小时就是数千万日元。此外还要加上死者收容费。也有连车撞上特快电车而被索取三千万日元赔偿费的例子，和同样连车撞入东海道线而被索取一亿四千万日元赔偿费的例子。了解内情的人流传着说，因考虑到舆论而不索赔的。但日本铁路公司也不是好说话的。虽然不提起公诉，但诉讼还是进行的。只是死者家属的联系地址不清楚的情况较多，索赔不一定能成功。&lt;/p&gt;&lt;p&gt;这样看来，卧轨自杀并不是划算的方法，不过如开头所言，当你忽然想到自杀，眼前呈现的就是这个方法。今后的事情就让它去吧，现在马上想死，对上述这种人来说，当然是再好不过的手段了。&lt;/p&gt;&lt;h3&gt;[案例研究14] 撞车中奇迹般生还的OL&lt;/h3&gt;&lt;p&gt;一九九一年十二月二十九日下午五点多钟，一个二十四岁的女性从西船桥站前方五百公尺处的天桥，跳向武藏野线行驶中的电车企图自杀。她是千叶市内某计算器公司工作的独身OL，当时是在下班途中。天桥高七公尺，只要跌得巧就是没有电车通过也会死亡的。她是在电车驶进至靠近自己十公尺左右处跳到路轨上，接着电车驶过，驾驶员也感到「这下可压着了！」电车紧急刹车后停了下来，她在倒数第六节车的车底下，但她的身体刚巧夹在两根铁轨中间，没有受伤。经医生诊断，头部和腰部受了需治疗一周的挫伤。她之所以得救，是因为体格较小，背部未被车辆钩住和电车进站前减速的缘故。否则的话，身体会被卷入而被压死。&lt;/p&gt;&lt;p&gt;她虽不讲自杀的动机，但据其友人说，最近与一个男人的不正常关系有关。&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;又跳楼又撞车，这是同时利用两种高度致死的手段，却未死亡的稀有例子。本来从七公尺的高处跳下来也会受到相当严重摔伤，再加上电车又在上面通过，最后竟只有仅以轻度挫伤，这确实是个奇迹。既不是预先把身体夹在铁轨中间，但又偶然地落在铁轨中间，这又是个奇迹。不是也有被人称作「肉弹」的女自杀者吗?她同样从天桥朝着电车跳下，结果把前车碰得粉碎再掉进驾驶室而致死。&lt;/p&gt;&lt;p&gt;有个值得令人思考的问题，那就是她决定自杀的日子和时间。一九九一年十二月二十九日是星期日。工作应在前一天或前两天结束的，为什么她在公司里留到傍晚五点多钟?她在干什么呢?&lt;/p&gt;&lt;p&gt;不管怎样，她是决心自杀的。不过，也因为有这种意外的情况，所以很难说这样做了就肯定能自杀成功。&lt;/p&gt;&lt;h3&gt;[案例研究15] 辗断单手双足而活下来的铁路自杀未遂女性&lt;/h3&gt;&lt;p&gt;T于一九五五年二月企图撞车自杀而失败了，当时她是十六岁的高中二年级学生。晚上十点多钟，她冲向从小田急线新宿车站刚发车的快速电车，由月台前端「像被铁路吸引似地跳了下去」。电车急速刹车后停下了。T的右脚踝、左脚膝下部分、左手肩部十五公分以下，右手的无名指和小拇指都撞断了。剩下来的只有左手的拇指、食指和中指三个手指。当时T拼命叫喊:「热啊，热啊！」，不久即丧失知觉。被救护车送进医院，昏迷了一个星期，等恢复意识并知道自己情况，则是事故发生后的第十天了。T曾绝望的想:「只有再死一次」，后来相信了基督教牧师的话和圣经而决定生活下去。八月份出院，双腿都装了义肢。第二年与这位牧师结了婚，有了两个孩子，现在她正从事宣扬生命可贵的讲演活动。&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;从站台的前端向刚起动不久的电车冲撞是她的失策，但脖颈、躯体等会造成致命伤的部位未被轧断，恐怕也只是偶然现象。但从该例亦可知道电车速度应该是愈快愈好，但是，即使是刚发车的电车仍具有撞断手脚的威力，这是告诉人们「铁路自杀失败的话就是这样」的稀有例子。&lt;/p&gt;&lt;h3&gt;[案例研究16] 青函隧道中压死的女性&lt;/h3&gt;&lt;p&gt;一九九一年三月，在青函隧道内的吉冈海底车站附近发现了一具二十六岁女性尸体。双手双腿前额以上完全被切掉。可是，吉冈海底车站是青函隧道中两个无人车站中靠近隧道一侧的防灾用车站，电车是不停靠的，不是一般人可随意走进的地方，她怎么会在这样的地方死掉呢?&lt;/p&gt;&lt;p&gt;调查结果表明，这位女性自大前天起就去向不明，十八日决定回东京的家里，事情发生于从札幌回到家里的途中。她不久以前就有点神经衰弱，不知在什么地方下了决心要死，乘上同日二十二时发车的快车，第二天三时五十分左右通过吉冈海底车站时，趁列车减速之际爬进了车掌室，打开窗子跳出，再卧到另一侧的铁轨上，被四时左右通过的货车压死。&lt;/p&gt;&lt;p&gt;十八日她给家里打电话，告诉父亲说:「就要回家了。」&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;横卧在铁轨上等死，尤其在都会区域是非常困难的。但她所发明的「隧道自杀」，在都会区是可以采用的。到处去寻找都市的死角，也是为铁路自杀做准备的乐趣，地铁看来也有许多不为人知的好地方。&lt;/p&gt;&lt;p&gt;要想走进行驶路线内，主要条件是周围一定要黑暗。在都会区进入平交道口也不要让人看到，晚上可能性就大些，驾驶员也难发现。事实上这个女性尸体，是一个半小时以后的五时四十分左右才发现的，也就是说驾驶员完全没有意识到。&lt;/p&gt;&lt;p&gt;前额以上完全切断也是重要的一点。可以想象到列车车轮所具有的巨大切割力。人们推测她是横卧在路轨上，这是从尸体状况得出的。如果飞身撞车的话，被辗得粉碎的情况较多，横卧的话唰地一下就割成两段了。对企图在车站以外的地方卧轨自杀的人来说，这有很大的启发。&lt;/p&gt;&lt;p&gt;在西村京太郎的推理小说中，也有假设吉冈海底车站发现女性尸体的情节，或许她看过这部小说也说不定。&lt;/p&gt;&lt;p&gt;话虽如此，在地面下150深的海底，在刺骨寒冷黑暗中，能够横卧在路轨上面等待十来分钟，令人难以想象，超过一般惧怕的极端恐怖经历，对平常人来说是难以想象的。自杀前的心理，实在是难以捉摸。&lt;/p&gt;&lt;h3&gt;[自杀地图3] 三原山&lt;/h3&gt;&lt;p&gt;与其它自杀名胜一样，现在特意跑到三原山去自杀的人恐怕是不会多的，可是，火山却有吞没尸体的好处。火山口内却是一种秘境，而且不像树海那样进行尸体大搜索，从这一点来说还是有其利用价值，故加以介绍。&lt;/p&gt;&lt;h4&gt;[历史]&lt;/h4&gt;&lt;p&gt;位于伊豆诸岛的大岛三原山，怎么会成为自杀胜地呢?现在知道的人还是不多，起因要推溯到六十年前的神秘案件。一九三三年二月二十四日，二十一处的实践女子高等学校的两个学生登上了三原山。其中一个人说了一句「向大家致意」就跳进了火山口，而另一个人正在犹豫不决的时候被人救了。两个人原是准备一起自杀的，仅此一点就够使周围震惊的了，经过调查知道这个女学生在一个月以前的一月九日也曾和另一朋友登上三原山，同样地使朋友只身自杀而她本人则返回来了。「死亡引路人」事件轰动了社会，不知是何原因，以青年男女为主的自杀志愿者涌向三原山，三个月的时间里产主了自杀者三十二人，未遂者六十七人的惊人事件。&lt;/p&gt;&lt;p&gt;真实的情况是，这个成为见证人的女生在一个月以前受人委托陪人自杀，一个月后，有人偶然向她吐露了想自杀的念头，于是她介绍了三原山的事，岂知那人再三逼她「做个引路人」，不得已只好带友人去火山口。&lt;/p&gt;&lt;p&gt;结果就在这一年，三原山出现了男804人，女140人，合计近千人的自杀者，甚至还出现在山顶见面后感到意气相投而一起跳进的，也有对游览者说声「大家再见啦」而跳下的男子。于是，三原山一下子就成了自杀胜地。&lt;/p&gt;&lt;h4&gt;[跳入方法]&lt;/h4&gt;&lt;p&gt;从火山口四周的休息处或纪念品店的山顶口朝内轮山走去。火山口四周，只有内轮山山顶禁止入内，无法窥视火山口内部，想跳的话，也只是翻过栅栏后剎那间的事(参照图一)。跳火山口的时候，在半路上挂在岩棚上或者即使摔到火山底但达不到岩浆地区的情况也很多(案例17)，不过也会因吸入有毒气体而昏迷&lt;sup&gt;61&lt;/sup&gt;，加上翻滚掉下时的碰伤，数小时便会死亡的。&lt;/p&gt;&lt;p&gt;虽不是三原山的事，一九四八年追随太宰治之后留下「把我也带去吧」的遗书而投身到阿苏山的青年，悬在150的岩石上，最后被拉了上来。事实上，据调查数据显示，从阿苏山口往下240公尺处，岩石的温度是100度，空气是65.6度。&lt;/p&gt;&lt;p&gt;往下跳的时候要注意，不要让山顶上瞭望台上的人发觉。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;61&lt;/sup&gt; 火山气体的主要成分是水蒸汽(H&lt;sub&gt;2&lt;/sub&gt;O)，二氧化碳(CO&lt;sub&gt;2&lt;/sub&gt;)，硫或者作为二氧化硫(SO&lt;sub&gt;2&lt;/sub&gt;)(高温的火山气体)或硫化氢(H&lt;sub&gt;2&lt;/sub&gt;S)(低温的火山气体)，氮气，氩，氦，氖，甲烷，一氧化碳和氢气。在火山气体检测的其它化合物是氧(大气)，氯化氢，氟化氢，溴化氢，氮氧化物(NO&lt;sub&gt;x&lt;/sub&gt;)，六氟化硫，硫化羰，和有机化合物。异乎寻常的微量化合物包括汞，卤烃(包括氯氟烃)，和卤素氧化自由基。火山气体充足程度的差异很大，各个火山是各不相同的。水蒸气一贯都是最常见的火山气体，一般包含总排放量的60％以上。二氧化碳通常占10～40%的排放。&lt;/blockquote&gt;&lt;h4&gt;[交通·住宿]&lt;/h4&gt;&lt;p&gt;从东京、横滨、热海、伊东有船去大岛，从羽田、调布还有飞机直达，如到三原山山顶口，可利用巴士或出租汽车。&lt;/p&gt;&lt;p&gt;住宿则在三原山第八段的大岛温泉旅馆，港口的元町和冈田也有大小旅馆，还有农家客栈，住些日子再自杀也不错。&lt;/p&gt;&lt;h3&gt;[案例研究17] 三原山火口壁爬上来的男子&lt;/h3&gt;&lt;p&gt;一九五六年十二月三日下午一时左右，一对年轻男(29岁)女(26岁)从三原山双双跳下约六十公尺深的火山。三原山是在当年一月间曾大规模地喷发，这两个人跳下的时候还可看到岩浆喷出造成的新火山口。&lt;/p&gt;&lt;p&gt;接到消息的救助员冒着喷发着难以忍受的热气和亚硫酸气&lt;sup&gt;62&lt;/sup&gt;下去营救。女子的腿陷进了三处冒着溶岩火焰中的一处，动弹不得，已经没有营救的可能，男的则稍离火焰，满身是血在呻吟着。由于他还有知觉，营救人员就背起了这个腿部受伤的男子，设法搬到十公尺以上突出岩石比较安全的地方。到这里为止，已经到深夜，所以就折回到火山口岸，这时已是三点十五分了。&lt;/p&gt;&lt;p&gt;可是第二天清早再次前去营救时，男子已经靠自己的力量爬上了火山口岸，倒在那里。完全无法使用腿的他，撕裂了围巾包扎了头部和手，用手在火山壁上挖出两个洞，把膝盖放到洞上后爬上，再挖两个爬上，不断地重复这个动作，完全爬上余下的倾斜度约七十度的火山口壁，时间是上午四点左右。从跳下开始经历了十五个小时的死斗。他的面部因血液凝固而变黑，左眼青肿，但只受了点轻伤，放在身旁的围巾已变黄而破碎不堪。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;62&lt;/sup&gt; 亚硫酸气：即二氧化硫，一种有毒气体，吸入后与水反应生成亚硫酸，硫酸等物质能灼伤呼吸道。&lt;/blockquote&gt;&lt;p&gt;死亡的女子于上午十一点多钟被拉了上来。左腿部和左膝以下烧得没有了，腿部因充满气体而鼓胀，面部和手则没有变化。&lt;/p&gt;&lt;p&gt;自杀的动机，据说是为了清理数年来的三角关系。&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;生命力是惊人的。当他被营救队员留在岩石时，「曾想再跳一次，但这时孩子的面孔浮现在眼前，要活下去的信念涌了上来。」事后他这么说，而这种人从一开始就不该去尝试自杀的。&lt;/p&gt;&lt;p&gt;跳下倾斜度七十，深六十公尺的断崖，也只受点伤却是个意外，但投身火山口直接跳进岩浆里的是极稀有的，大半都在半路上撞到岩石上再坠落到火山口底，因热气和瓦斯而死亡。关于火山喷火口的可怕，人们谈论得够多了。他形容攀登火山壁时的情景:「由于猛烈的热气和喷上来的硫磺烟雾，面部发烫，喘不过气来。」&lt;/p&gt;&lt;p&gt;女子圆满地触到岩浆，达到了目的，但尸体是惨不忍睹的。&lt;/p&gt;&lt;p&gt;这个故事说明了，在火山口投身自杀时，跌落的位置和想死的意志是非常要紧的。&lt;/p&gt;&lt;h2&gt;6. Gas-Poisoning瓦斯中毒&lt;/h2&gt;&lt;h3&gt;(1) 车内瓦斯中毒&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;从汽车排气口接一条管子通到车窗内，并将缝隙堵住，相当费时费事，不过可以死得轻松，死状也不太难看。&lt;/p&gt;&lt;p&gt;为避免出差错我要先讲清楚的是，靠城市煤气是不大可能那么痛快地死去。在房间里扭开煤气开关，然后倒下，逐渐地昏迷……这已经是过时了。现在的城市煤气，因煤气公司已经将过去的煤气变换为不含引起中毒的一氧化碳的天然气，除部分地区外是不会发生中毒死亡的。液化气也不含一氧化碳。即便是死，也不过是因缺氧窒息而死罢了。中毒死和缺氧死，感受到的痛苦是截然不同的。一般来说，中毒死还是比较舒服的死法。能在房间里轻而易举中毒自杀幸福的七十年代，已经一去不复返了。不过含有一氧化碳的汽车排放气，还是具有致命力。实际上，现在的「煤气自杀」大部分都被这种排放气体所代替了。&lt;/p&gt;&lt;p&gt;如果想用煤气或丙烷气，那只有准备承受比死还难受的痛苦，采取用嘴吸住煤气管，在狭小的室内放满气体，最终因缺氧而死的方法。运气好的话，就像十七岁的女孩那样，在管子打开的瞬间达到窒息死。话虽如此，有的家庭装有安全装置，大量排放数小时后自动停止排放，加上还有爆炸的危险性，因此，最好不要考虑在家里进行煤气自杀。&lt;/p&gt;&lt;p&gt;如你要想因缺氧而死的话，完全没有必要在室内充满气体，从头上罩个塑料袋就行了。看起来虽然有点原始，但每年有一百人以上是用这个方法自杀的。塑料袋之外，再同时并用药物自杀等其它方法，则效果更好(案例19)。&lt;/p&gt;&lt;p&gt;同样地，虽不是中毒死，但也有在室内放满气体而点火炸死的人。该方法简便，适合于冲动型自杀的人。但是，炸死固然有当场死亡的效果，事实上全身烧伤、痛了好几天再死的例子也不少，对周围造成的危害较大，是否顺利完成也没把握，有时仅仅引起一场火灾而已，所以不值得推荐。&lt;/p&gt;&lt;h4&gt;[准备] 油箱内加满汽油&lt;/h4&gt;&lt;p&gt;在汽车里的自杀方式，首先要准备三至四公尺长的橡皮管和胶布。橡皮管应根据排气口的粗细，在杂货店购买即可，粗细不对时可用胶布多缠几层，这样既不会漏气也不会脱落。然后将橡皮管接到排气口，用胶布牢牢地加以固定，再将橡皮管从车窗插入，窗缝亦用胶布严密封柱。这样车内便成为密封状态，坐上去关上门发动引擎，再把座椅放倒，听车内音响播放的音乐，而慢慢地走向永久睡眠的路。&lt;/p&gt;&lt;p&gt;一定要把汽油加满。如果近邻不注意的话，汽车停在自己的车库也可，但在人们看不到的森林中较好，过了季节的度假地因乏人问津也是极好的地方。或者罩上汽车车套，这样即使在听音乐也不会被人发现音响的指示灯。&lt;/p&gt;&lt;p&gt;在房间自杀时，首先要确认所使用的气体是否含有一氧化碳，同时也要查看一下有无安全装置。剩下的就是不论一氧化碳中毒死还是缺氧死，要把窗缝严密封死，在窗缝和门缝处多贴一些胶布，准备妥当后打开开关睡下就可以了。&lt;/p&gt;&lt;p&gt;如果是用丙烷自杀，因为丙烷比重大于空气，必须在地板上横卧。相反，煤气比空气要轻，因此尽量在高的地方较好。倘若有把橡皮管塞在嘴里的勇气，那是再好不过了。利用这种绝断手法的人意外地多，作家川端康成也是这样自杀的，也有把头塞进煤气炉里死掉的例子。&lt;/p&gt;&lt;p&gt;头上罩住塑料袋的方式，只要不会漏气就万无一失了，在脖颈处绑一道绳子也是好的。&lt;/p&gt;&lt;h4&gt;[注意] 当心爆炸&lt;/h4&gt;&lt;p&gt;在汽车里自杀的方式，因一氧化碳比空气要轻，因此气体有时会从窗缝泄出去。在这期间被发现，或者出现汽油用完的情况，所以奉劝你们把窗缝堵严实点。虽说中毒死亡痛苦少，但在较长时间里没有失去知觉的话，头痛、恶心也会持续，所以，同时服用安眠药较好。&lt;/p&gt;&lt;p&gt;把气体引入车子，堵好窗缝，用毛毯挡住前窗玻璃使人看不到里面，再服下六十片安眠药的男子，居然一直清醒着，被人发现后通知警察。虽然他大喊「我有权利去死！」，但还是被强行拉出了车子。并不是所有的方式都是缓慢地丧失知觉的。&lt;/p&gt;&lt;p&gt;在房间灌满气体时，特别要注意的就是爆炸。即使是日光灯点光器的闪动，也会引起爆炸。如果造成大爆炸，会背上巨额赔偿金的，而往往这种处身在气体包围中却未死的情况较多(案例18)。就像有的人先贴上纸条「关紧煤气开关，打开门窗排出气体，因有爆炸危险不要使用电气开关和火柴」以提醒他人注意，再进行煤气自杀的那样，对爆炸要有足够的注意。&lt;/p&gt;&lt;p&gt;在公寓中用一氧化碳中毒自杀的方式，也要留意住在楼上的人。一九七六年，二十岁的女子在公寓家中用煤气自杀，结果本人未死，而在楼上睡觉的二十一岁女子却因一氧化碳中毒死亡了。这是由于一氧化碳比重轻的原因。可是死者的家属，追究自杀未遂者的双亲、公寓房东、警察和消防单位的管理责任，向法院起诉请求2.037万日元的赔偿费。在室内的煤气自杀，应该意识到是最容易给人造成麻烦的方法。&lt;/p&gt;&lt;p&gt;万一得救的话，一氧化碳中毒自杀和上吊一样会使脑神经组织因缺氧而损伤，可能终身留下严重的后遗症。不过，常常所说的「一生中留下严重后遗症」这句话，不仅限于煤气自杀的。上吊、跳楼、撞车、药物等所有自杀手法都是一样，要想自杀，这点后果也是应该想到的。&lt;/p&gt;&lt;h3&gt;(2) 烧炭自杀&lt;/h3&gt;&lt;p&gt;准备一些木炭和火种，将自己密闭在一个狭小的空间中，点燃火焰，看着木炭火焰一点点燃烧然后减弱，意识渐渐丧失然后死去，尽管有些麻烦，，但死状好看而且很轻松。1844年Eugène Sue&lt;sup&gt;63&lt;/sup&gt;著作的小说Le Juif Errant&lt;sup&gt;64&lt;/sup&gt;中即有述及该自杀手法，因此自木炭被人类使用以来即可能有人以该手法自杀。烧炭自杀的原理和上文所述汽车瓦斯中毒的原理是相同的。&lt;/p&gt;&lt;p&gt;烧炭自杀在香港流传极广，并随着互联网而传播到中国大陆，中国台湾和日本等地，在煤气等成分变更而不适于自杀，其他自杀方式难以实行的情况下，烧炭自杀算是一种易行的方法。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;63&lt;/sup&gt; Eugène Sue：尤金·苏(或Marie-Joseph Sue,1804.1.26～1857.8.3)，法国小说家，代表作有《巴黎之谜》《流浪犹太人》&lt;sup&gt;64&lt;/sup&gt; Le Juif Errant：即Eugène Sue的代表作之一《流浪的犹太人》&lt;/blockquote&gt;&lt;h4&gt;[准备] 寻找狭小且易于封闭的环境、足量的炭、火种和胶带&lt;/h4&gt;&lt;p&gt;大多数烧炭自杀者会把自杀地点选择在家中或旅馆的单人间内，而其中的浴室因为面积狭小又得之亲睐。一般来说，狭小的空间有相对更少的氧气，烧起炭来一氧化碳浓度达到致死浓度也会更快些。一般来说，浴室、车厢之类的面积小于6m2的地点是很适宜的，但应尽量避开木结构的建筑，一方面木结构的建筑比起混凝土会有更多缝隙难以密封，而且木结构无形中也增加了火灾的风险。&lt;/p&gt;&lt;p&gt;火种和木炭在各种自杀工具中应当是最容易获得的。一般来说机制炭和烧烤炭是最佳选择，它们都可以在沃尔玛等各大商场买到，找不到的话去找导购员说要买烧烤用具就可以。火种的话一次性打火机、火柴等任君选择，不过还需准备一点纸张、汽油之类的东西来点燃木炭。&lt;/p&gt;&lt;p&gt;胶带是用于制造密封环境的，如果有其他能起同样作用的东西也可以。关好门窗，用胶带把所有的门缝和窗缝封死，浴室的话一定要堵住排气扇的扇口，甚至下水道排水口和天花板的缝隙也不放过。&lt;/p&gt;&lt;p&gt;如果可以的话，服下一些酒或者安眠药让你入睡，可以帮助抵御吸入一氧化碳后的痛苦。&lt;/p&gt;&lt;p&gt;接下来，将买好的木炭准备好，用最后的勇气点燃它，静坐着等待死亡的来临吧。&lt;/p&gt;&lt;h4&gt;[注意] 防火、保持坐姿&lt;/h4&gt;&lt;p&gt;既然是点火烧炭，必然会有火灾的风险。害怕殃及他人的话在点火之前把周围的可燃物清空，在地上铺好阻燃毯或者用烧烤架来烧炭也是可行的做法。&lt;/p&gt;&lt;p&gt;因为一氧化碳的密度比空气小，所以空气中的一氧化碳会趋向上浮，保持坐姿才可能保证吸入足够的一氧化碳。&lt;/p&gt;&lt;h4&gt;[经过] 痛苦极少&lt;/h4&gt;&lt;p&gt;随着空气中一氧化碳浓度的提高、吸入时间的增加、目眩和心跳加剧，不久就丧失意识直至死亡。这是因为血液中输送氧的血色素，以氧的二百乃至三百倍的强度与一氧化碳结合，在血液中形成「一氧化碳血色素」，而使体内细胞供应的氧气锐减的缘故。当一氧化碳在空气中的浓度达35ppm就会对人体造成伤害。&lt;/p&gt;&lt;p&gt;汽车尾气中所含一氧化碳浓度大约是0.4～0.5%，血中一氧化碳血色素的浓度达到30%时，首先感到目眩、头痛、虚脱、疲痨、判断力降低。达到40%时，恶心、对想做的事情无力去做且有乏力感。达到50%时，皮肤因为一氧化碳血色素的关系而呈红色，体温降低。达到60%时呼吸急促，出现失神、失禁、痉挛。达到70%时呼吸停止很快就死去(参照图2)。在汽车内的中毒自杀，半小时到一小时左右就会不省人事。&lt;/p&gt;&lt;h4&gt;「最漂亮的死法」 应该避免脱粪&lt;/h4&gt;&lt;p&gt;在所有自杀尸体中，人们说煤气自杀尸体是「最漂亮的」。由于含有一氧化碳血色素的血液使皮肤呈现粉红色，你的尸体将以被染成粉红色的状态被发现。出现痉挛现象时衣服可能会紊乱，但没有关系。不过，煤气自杀常常会发生失禁情况。在浴室因一氧化碳中毒死亡的男性家中，在厨房和床上都有粪便。因为死者的直肠没有粪便，所以知道是他的。当时因空烧洗澡水而产生一氧化碳，在厨房和床上都憋不住而排粪后，再到浴室之后死亡的。一般而言，即使是神志清醒也会出现失禁。要给人看到干净尸体的人，事前去趟厕所绝不可少。&lt;/p&gt;&lt;h3&gt;[案例研究18] 因煤气自杀未遂而被判刑的男子&lt;/h3&gt;&lt;p&gt;一九七八年四月，家住福冈县町营住宅的四十七岁无业男子企图用煤气自杀，上午十点左右他陷入了兴奋剂中毒的幻觉症状。他因为情妇出走苦恼而想到了自杀，把放在屋外丙烷桶橡皮管拉到浴室，使室内充满气体。可是过了很长时间也没死掉，两小时后想要吸烟而点打火机的瞬间，气体爆炸了。爆炸造成了住在町营住宅的二十八户人家总额达1.24万日元的损失，九个居民受伤，他本人则住院一个月治疗烧伤。&lt;/p&gt;&lt;p&gt;他以「气体泄漏罪」被起诉，次年二月福冈地方法院饭冢分院以「使多人受伤造成严重后果」而判他八个月的徒刑。&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;这是选择了用气体爆炸自杀的例子，但如果未遂并给周围造成损害也会被判刑的。因为，在室内里灌漏气体本身相当于「气体泄漏罪」的。&lt;/p&gt;&lt;p&gt;日本刑法一一八条第一项规定:「因使瓦斯、电或蒸汽泄漏或流出、或阻断而对人的生命、身体或财产造成危险者，处以三年以下徒刑及十万元以下的罚款。」&lt;/p&gt;&lt;p&gt;与此相类似的例子是在一九七六年，大阪某公寓的一个二十八岁公司经营者，同样在室内企图用煤气自杀未遂，导致了大爆炸，一户烧毁、约七十户受害，以「气体泄漏罪」和「重大过失失火罪」(因失火对他人住屋等造成损害罪)起诉。即使他是自杀未遂者，也不能逃脱法律责任。&lt;/p&gt;&lt;p&gt;从上述事例亦可知道，在家里充满两小时的丙烷也可能没死掉，却对二十八户人家造成灾害的爆炸，本人却只是受了治疗一个月的伤。&lt;/p&gt;&lt;p&gt;在室内充满气体，马上就要断气的时候，竟然因想抽烟而点燃打火机，看来他是个胡涂虫，但实际上这种事情却还不少。&lt;/p&gt;&lt;h3&gt;[案例研究19] 照自杀指导手册自杀的男子&lt;/h3&gt;&lt;p&gt;一九八三年七月，一个身穿游泳裤浸在浴缸的冷水里，头上套着黑色塑料垃圾袋，脖子上扎着绳子并系在窗台上的奇怪男子(当时四十六岁)的尸体，被人发现。从他死亡的公寓房间里找到了四十片止痛剂「雪德丝」的空袋，看来他是服了药以后再用这种方法自杀的。同时还在房间里找到同年日本出版的指导手册「自杀－－最能安乐死的方法」(德间书店)，并在参考的一页夹上了一条带子。在一八四页，作为能安乐死的自杀手段的搭配，介绍了四种组合:「一、用止痛剂和塑料袋的窒息；二、因可达到中毒程度的大量药物和汽车排出气体引起的中毒；三、止痛剂和异常低温症(长时间浸泡冷水中)；四、止痛剂溺死。」他是选了一和三项搭配而自杀的。&lt;/p&gt;&lt;p&gt;他曾是东京室内球场的前身－－后乐园球场的售货员，一年前失踪，后来又离开了妻子和孩子，在一间小小的房间里过着酒鬼的生活。失踪的原因，据说是背了一身债，被债主追逼而逃走的。&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;用塑料袋的窒息自杀虽有痛苦，但像这样是非常简单的。止痛剂「雪德丝」是无法达到致死量的，但药物的作用和冷水造成的低体温症，对降低呼吸机能倒是有用。&lt;/p&gt;&lt;p&gt;自杀手册的作用之大也是不容忽视的。这本书的原著是一九八二年在法国发行，很快就有六个人受影响而自杀，因此引起很大回响，成为最畅销的手册。这个人所参考的部分，来自「英国安乐死协会」对会员限制发行的手册，所以记述是正确的。毋庸讳言，本书也从该书引用了一些材料。&lt;/p&gt;&lt;p&gt;有趣的是，他特意为了让别人明白是「看这一段死的」而夹了一条带子。在法国也有翻开所参考书页而服毒自杀的人，试图通过这种方法引起世人注目的意图是再清楚不过的了。&lt;/p&gt;&lt;h3&gt;[案例研究20] 用塑料袋进行自杀实验的失败者&lt;/h3&gt;&lt;p&gt;一九七四年十一月，在川崎市发现了一名十八岁男子，在被窝里用塑料袋套住鼻子和嘴，再用橡皮筋缠住而窒息死亡的事件。书桌上有两张四百字的稿纸，写着试验各式各样的自杀方法的结果，标题则为「实验中」。由此可知，这个青年是把塑料袋套住嘴巴在做自杀实验当中，窒息而死的。&lt;/p&gt;&lt;p&gt;他的笔记是这样写的:「(1)实验开始十五分钟以后，呼吸加速、手脚麻木。二十五分钟以后，全身瘫痪、呼吸增加三倍、心跳120下。如果在床上不动可以生存三十分钟。(2)约一小时发生脑障碍，约两小时死亡。在这之前应取下塑料袋，按摩心脏。」&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;看来用塑料袋自杀，是经过「气闷-&amp;gt;手足麻木-&amp;gt;全身瘫痪-&amp;gt;心跳加速-&amp;gt;失神」等顺序至死的。那么，他为什么没能取下塑料袋呢?所能考虑到的理由是:(1)马上要窒息时慌忙想取下，但着急之中没料到很快就不省人事了:(2)慢慢失去知觉时，身体也瘫痪而不听使唤就昏迷了。
如果第(2)项是正确的话，那么我们一直写窒息自杀是痛苦的，但事实上也可以说是相当舒服的方法。可是，这种关于濒死关头的感觉是无法实验的，只能靠医生的推测才能知道。因此说，这几起「死亡实验」在医学上也是极为宝贵的资料。&lt;/p&gt;&lt;h2&gt;7. Electrocuting 触电&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;缺点是数秒钟的电击与剥开电线时的麻烦；比一般所想象中还要温和的方法。&lt;/p&gt;&lt;p&gt;日本厚生省一九九一年的统计显示，当年一九八七五个自杀者中，有五十六人采用了人数最少的触电自杀法。而且，奇怪的是男子为五十三人，占全部的95%。可以说是几乎只有男子采用的自杀手段。并不是整体数字低的缘故，即使在超过100人的统计里，90%以上还是男子，有人说可能是女性特别害怕电的缘故。&lt;/p&gt;&lt;p&gt;触电自杀的死亡，是由于刹那间的呼吸停止、心脏停止、休克等所造成，痛苦真的只是瞬间的事。有位医生说，触电自杀是舒服的死亡方法之一。&lt;/p&gt;&lt;p&gt;办法非常简单。把电线的一头剥开露出铜丝，插上电源后触碰到胸口或背上就可以了。冲动想死的人，这是最佳的手段。缺点是未遂的情况较多，但没有特别的后遗症，所以是一种不妨重新加以考虑的好方法。&lt;/p&gt;&lt;h4&gt;[准备] 给心脏通电&lt;/h4&gt;&lt;p&gt;偷偷地溜进变电站去触碰高压电流部分是最简便的作法，但毕竟是可怕的。还是在自己的屋子里接根电线，两个端子贴在身上，装上定时器后睡下。一根铜丝贴在胸口，另一根贴在背上，如果不愿贴在胸口，贴在两只手腕上也行。一个十六岁女高中生把一根电线缠在右手大拇指上，另一根贴在背心自杀了。但是要这样做的话，电线应该缠到离心脏较近的左手拇指较好。也有把电极的一端含在嘴里，另一端插入肛门使用定时器自杀的核子科学家，但他是怎样不使铜丝从嘴中脱落而入睡的仍是个谜，这种方式方法还是不去模仿为好。&lt;/p&gt;&lt;p&gt;铜丝用胶布贴住就可以了，这时把与身体接触的部分弄湿，电阻就少，效果更佳。一般情况下电流不通也是降低准确率的因素，不妨用湿脱脂棉或纱布从上按住。弄湿脱脂棉时可用食盐水，如果能弄一些做心电图使用的油膏，电阻就会更小。也有用拾圆硬币做诱导体的例子。当然，把两根铜丝都缠到胸口上是最可靠的方法。不管怎样，要紧的是要让心脏通电。用变压器把电压提高，致死度就更高了。&lt;/p&gt;&lt;p&gt;在这种情况还能够熟睡的人是不多的，因此要喝点酒。定时器设定在睡后两小时左右最熟的时间。设定在上午三点钟的例子较多，应该就是这个道理。总之，尽量减少电阻，提高电压是最重要。&lt;/p&gt;&lt;p&gt;沐浴中把开动的电热器或电动刮胡刀扔进浴缸里也会导电的，不过可靠性极低，为了提高导电性在热水中加些食盐效果会更好。&lt;/p&gt;&lt;h4&gt;[经过] 瞬间的刺骨疼痛&lt;/h4&gt;&lt;p&gt;这里的最大的问题是当电流通过的瞬间，人的意识是怎样的呢?使用定时器的方式，如果按照预定计划顺利进行的话，在你入睡数小时后一百伏特的电流便会通过全身，立即引起心脏收缩，数秒钟后失去知觉，心脏血液循环停止而死亡。据某医生观察:普通状态下会产生瞬间的刺骨疼痛，筋肉松弛剂因为不易弄到手，所以不可避免地要经验肌肉痉挛，如大量饮酒或服用安眠药可使神志模糊不清，就在睡眠之中安然死去。这时虽丧失意识，但全身皆会抽搐着。还有另一种说法:丧失知觉只是数秒钟或剎那间的事，但等到心脏停止跳动则需要三分钟左右。&lt;/p&gt;&lt;p&gt;一个触电昏迷后恢复知觉的男子，就「瞬间」这一点是这样说的:「突然我感到被一股力量控制便不省人事了。」&lt;/p&gt;&lt;p&gt;那么，当电流短路后会不会跳闸呢?电力公司认为「这种情况并不是没有」。某位验尸官说:「至今为止好像没出现过跳闸」。因此，关于这一点，看来是不必担心的。&lt;/p&gt;&lt;p&gt;既然有坐上2000伏特的电椅上仍没有立即死去的死刑犯人，那么家庭中的100伏特的电压够吗?有人会感到不放心。可是，电压也并不是愈高愈好。&lt;/p&gt;&lt;p&gt;人体皮肤的电阻，在干燥状态下是1000欧姆到2000欧姆(女性的阻抗比男性低)，继续保持这一状态能通过身体的电流强度最大也只到100毫安。这种强度是能引起可使心脏停止的心室颤动的最小电流。当然，如果弄湿皮肤的话阻抗可少十分之一，事实上，在低电压的场合，对心脏来说弱电流倒容易引起心室颤动，反而危险。还有，对人体最危险的频率为50～60Hz，与家用电流的周波是一致的，从插座来的交流电要比直流电更容易引起心室颤动。这就是说，只要在发生心室颤动的三秒钟里向心脏通电的话，家用100伏特电压也能完全电死人。&lt;/p&gt;&lt;p&gt;在浴缸内电死的方式，其死因为心脏停止或休克。对脑通电则会使呼吸中枢麻痹而导致呼吸停止，不过这种情况不多见。&lt;/p&gt;&lt;h4&gt;[尸体状况] 几乎无损伤&lt;/h4&gt;&lt;p&gt;电极触及的部分会留下灼伤痕迹，但是尸体几乎没有损伤。皮肤的电阻小时，有时连灼伤痕迹也没有。就好像是处在睡眠状态，这也是非常漂亮的尸体之一。&lt;/p&gt;&lt;h4&gt;[注意] 瞄准心脏！&lt;/h4&gt;&lt;p&gt;目标就是心脏。确实想死的话，其它部分是不行的。一定要设法使电流通过心脏。如想用定时器在睡眠中死去的话，不要忘记牢牢固定铜丝以免在被窝中脱落，即使缠在身上，一旦在睡眠中脱落也是达不到目的。&lt;/p&gt;&lt;p&gt;本人已经死掉了，但身体上仍有电流的时候赶来的人有触及尸体而触电的危险，因此要留神，但这一点自杀者就无能为力。假使不想给别人添麻烦，那就贴上「不要碰，危险！」的纸条吧。&lt;/p&gt;&lt;h3&gt;[案例21] 在赛马场厕所触电自杀的男子&lt;/h3&gt;&lt;p&gt;一九八一年四月某日的下午六点在船桥市中山赛马场，全部赛程结束后两小时发现一个年约五十岁，身高160公分，运动员发型的男子尸体。他把电线接在厕所的换气扇上，另一端用胶布贴在胸口而触电死亡，发现时尸体已经僵硬了。死者身穿新的三件头西装，刚浆洗过的蓝直条衬衫，系着蓝底白点的领带，披着草黄色风衣，脚穿黑短统皮靴，相当整洁。身边只有现金8350日元，短支HOPE香烟，百元打火机，写有遗书的赛马报纸，但是却始终未弄清死者的身分。&lt;/p&gt;&lt;p&gt;他用红笔在报纸上留下的遗书写道:「我是个混蛋，为了马而人生失败。对不起啦！愚蠢的人留。实在对不起，我太累啦！」。&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;这是轻易实现触电自杀的好例子。大概他露出铜丝电线贴到胸口后，再把插头插入插座的同时心脏通了电，引起了心脏停止。遗书中的「为了马而人生失败」是句名言，第二天报纸的社会版用这句话做标题报导此事。&lt;/p&gt;&lt;h3&gt;[自杀地图4] 自杀村熊取町&lt;/h3&gt;&lt;p&gt;一九九二年的六月到七月之间，在大阪的熊取町每周有合计共五名男女自杀了。最早死的无职业的少年A君(17岁)。发现时是六月四日(星期四)。接着十日(星期三)建筑业的B君(18岁)，十七日(星期三)旅馆服务员C君(18岁)，二十五曰(星期四)邻市的市公务员D氏(22岁)上吊自杀。七月二日(星期四)町内体育大学女学生E向自已胸口猛刺三刀自杀。&lt;/p&gt;&lt;p&gt;不知是何缘故，几个人全部都在星期三或星期四死去的。自杀的地方也异常接近，集中在半径五百公尺的范围内。加上前三个人又都是一年前结成暴走族(飞车队)的不良少年们。全员自杀的动机完全不明。这一连串的动机不明自杀震动了全日本。其神秘程度，在日本自杀史上可以和三原山的「死亡引路人」事件媲美。&lt;/p&gt;&lt;p&gt;在当地他杀说占绝对上风，如果是他杀的语，那就等于有那么一个每周杀掉一个人共杀五人的杀人魔存在，当这种古怪的自杀出现时必然会引出他杀说的。不过，不要太相信为好。&lt;/p&gt;&lt;h4&gt;[死亡地点]&lt;/h4&gt;&lt;p&gt;据说人口不足四万人，但熊取町并不是个乡村城镇。车站前有很大的巴士站大楼，商业街行人来往频繁。可是，町西端的车站搭乘出租汽车沿国道170号线向东行驶十分钟，就可看见右边已有的农村土地了。就在这附近，五个人自杀了。在这附近下车走走。到处有杂木林和农作小屋。自杀地点任你挑选。&lt;/p&gt;&lt;p&gt;事前查看一下连续自杀者的死亡地点，不妨怀念故人而浮起连续去死也是不错的念头。A君和B君自杀的洋葱小屋和小仓库已经拆掉了，D君上吊的粟树也被砍倒了，只有C君上吊的做农活小屋还留在那里。夏天也有点阴森的，屋顶有几根梁的小屋是最好不过的自杀处。自杀现场的位置见图二。&lt;/p&gt;&lt;h4&gt;[自杀方法]&lt;/h4&gt;&lt;p&gt;要想在这个城镇自杀，那么除上吊之外别无他法了。上吊，还是用绳子比较符合周围气氛。把自己反绑后上吊，在高处放下绳子，模仿连续自杀者们演出的神秘色彩也是有趣的。或许在当地再度兴起他杀说，说不定你也成了宣传媒介的注目人物。最好不写遗书，那么更增添神秘色彩。&lt;/p&gt;&lt;h4&gt;[交通·住宿]&lt;/h4&gt;&lt;p&gt;由大阪乘ＪＲ环城线到东天王寺后换乘阪和线，三十分钟可抵达熊取町站。&lt;/p&gt;&lt;p&gt;熊取町内没有住宿设施，夜晚抵达，或者打算休息一夜再去自杀的人，可到距车站只有五分钟距离的泉佐野市的HOTEL·NEWyutaka。这是最近建成的高级旅馆，内部装潢也很好，单人房6800日元，双人房14000日元，是合理的价格。&lt;/p&gt;&lt;p&gt;贸然到了熊取町，你会搞不清地理环境的，最好是前一天到达，预先查看一下环境后住在这家旅馆里，仔细酝酿方法并决定地点，第二天再去自杀。&lt;/p&gt;&lt;h2&gt;8. Drowning 投水&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;只要有水的话，在任何地方都可以进行。不过窒息的瞬间很痛苦，死状也很惨。综合来看，并不是很好的自杀方法。&lt;/p&gt;&lt;p&gt;是不是有人会误认善泳的人是不会投水自杀的呢?不管你泳技多么高明，也会因为以下将要说明的由于「某种作用」而莫名其妙地淹死的。至今为止，游泳高手淹死的并不少。&lt;/p&gt;&lt;p&gt;投水自杀主要是窒息而死。因为要体验几秒钟的呼吸困难、窒息状态，不能算是安乐自杀。尽管这样，这一古老而有情趣的自杀手段，不论古今中外都被采用。这一点，从古希腊女诗人采用过亦可得知。现在在日本，高龄者和女性特别喜爱这种方式，从整体来看利用率有所下降，但每年按采用方法分类统计显示，仍然在前五名。既遂率也高达80%，难怪很有吸引力。&lt;/p&gt;&lt;p&gt;基本上，投水或溺死不仅限于海、湖、河、池，只要有「水」哪里都可以的，没有把全身浸在水里的必要。喝醉了酒而溺死在水沟的人也不少，甚至还有在山林小道上醉卧，一场大雨使他肺部进水而死亡的「山中溺死者」。也有把头伸到脸盆或洗衣机自杀的例子。因名作家太宰冶投水自杀而出了名的玉川上水，一个自卫队员在水深只有四十公分的地方淹死。&lt;/p&gt;&lt;h4&gt;[准备] 捆绑身体&lt;/h4&gt;&lt;p&gt;捆绑身体的做法有点原始化，但却是非常有效的手段。捆绑双脚，然后在背后绑上手后，一股气跳入水中的话，不论你的游泳术高明与否，都会淹死的。(当然更高明的即使在这种情况下，还可仰面浮在水上。)不过，单独一个人捆绑手脚是困难的。这里介绍一种谁都能做的方法，首先捆住双脚后，再把左手(惯用的手或相反的手)绑在左大腿上跳入。假如把船划到深海或湖中心而跳入的话，就会很快地沉下去的。这时在口袋里放入石块一类的东西，更可加速淹死。喝过酒感到疲倦就容易失去平衡感，可靠性大，大量服用安眠药就更可靠了。&lt;/p&gt;&lt;p&gt;要想简单而方便地去死，那就连车子一起驶入水中，只要不设法爬出车子就不会得救。&lt;/p&gt;&lt;p&gt;更简便的方法是乘上大型客船，在半路跳入水中，那就会被轮船激起的水流漩涡而淹死。据说，在濑户内海半数被打捞上来的尸体就都因为如此。&lt;/p&gt;&lt;p&gt;作为跳入或下水的地点，还是以海和湖比较理想。选择的时候，就应选人迹稀少湖流湍急的海岸，时间当然选在不易被发现的夜晚。&lt;/p&gt;&lt;h4&gt;[在浴室也OK]&lt;/h4&gt;&lt;p&gt;在浴室死亡也是很简单的。浴缸内放满水，捆绑双脚，再把双手反绑趴下把头伸进水里就行了，某主妇就是用此一方法成功地自杀了。&lt;/p&gt;&lt;p&gt;更为特殊的方法是在固定好的汽油桶内放满水，从头部入水的话，便可以因无法摆脱而淹死。&lt;/p&gt;&lt;p&gt;此外，作为特别适合溺死的地点，就是濑户内海鸣门的涡流。朝着漩涡游去时可能被推出来，但一旦被漩涡卷入的话就再也出不来了，致死率为100%。&lt;/p&gt;&lt;p&gt;季节以冬天为佳。水温低的时候，或者休克死或者引起心脏麻痹，疲劳出现也快，所以能安然地死去。就是说，也有不是溺死而是「低体温症」即冻死的情况。要想冻死，则必须喝些酒或安眠药为好。&lt;/p&gt;&lt;h4&gt;[经过] 游泳高手是这样溺水的&lt;/h4&gt;&lt;p&gt;现在来介绍一下会游泳的人投水自杀的方法。&lt;/p&gt;&lt;p&gt;最好是在晚上出发，一直往前游去就会顺着潮流游向深海。不久就会感到疲劳，但无法停下来。外海的波浪很大，喝水的次数增加，气管里进水呛得厉害。在不断地重复喝水、吐水、呛水过程中，连接嘴和耳朵的耳管里也进水了，这是关键。有的人说:「耳朵有鼓膜，水应流入三半规管。」，可是水还从嘴里流入的。&lt;/p&gt;&lt;p&gt;投入水中时的溺水经过:首先由于皮肤突然受到刺激，会做一次深呼吸(第1期)，接着会有30秒～1分钟时间呼吸停止(第2期)。不久后由于血液中的二氧化碳增加，会有1～3分钟时间出现激烈的痉挛性吸气吐气(第3期)，之后失去意识约有1分钟的痉挛(第4期)，沉没死亡(第5期)。(摘自《小法医学书》金芳堂)&lt;/p&gt;&lt;p&gt;流入耳管的水产生活塞运动而使覆盖三半规管的部分出血，通过急性循环不良而引起三半规管的机能障碍。这种机能受到损伤，就失去平衡感，上下左右前后分辨不清。愈是想吸气，气管进的水就愈多而引起咽喉的痉挛，最后呼吸停止、失去知觉而沉入水底。&lt;/p&gt;&lt;p&gt;会游泳的人淹死的情况大体如此。到达神志不清的过程，大部分不是因大量喝水窒息，而是在呛水中间把水吸入气管所造成的。这样的话，即使你是游泳高手也会对投水自杀抱有信心了。而且有人说，在即将失去知觉的时候，以往的记忆会像闪电般清晰地浮现出来，就像在上吊和跳楼项目中所介绍的奇妙体验。&lt;/p&gt;&lt;p&gt;失去知觉以后，先在水中大口呼气，接着大口吸进水到肺里，呼吸停止而死亡。从呛咳开始到失去知觉大约是一至三分钟，淡水需四至五分钟，海水则需八至十二分钟，到心脏停止则需二十分钟至半小时。话虽如此，在水中经过两分钟以上就难以得救了。&lt;/p&gt;&lt;h4&gt;[尸体状况] 你能成为萝拉帕玛吗?(注:萝拉帕玛-电视影集「双峰」的女主角)&lt;/h4&gt;&lt;p&gt;过了数日，浮上来的尸体，其身体和脸都肿胀得连双亲都辨认不出来(专业者形容为「巨人样&lt;sup&gt;65&lt;/sup&gt;」)，呈现皮肤剥落，阴囊膨胀得像气球，身体生出青苔，有时手脚被鲨鱼乱咬，留有船只推进器切割的伤痕，肉则有被鱼、螃蟹等吃过的惨状。&lt;/p&gt;&lt;p&gt;在一度沉下水底的尸体中，20～30%不久就会浮上来。被打捞到陆地上的尸体，从口和鼻会吐出大量的小泡。如果尸体没有很快浮上来，夏天是两三天，冬天是两三个月后，因体内产生的腐败气体而浮上来(参照图二)。腐败气体的上浮力是很大的，连栓有近十公斤重物的尸体也都浮上来过。不过下沉深度达到三、四十公尺以上，因水温低而腐败气体蓄积不起来，水压又压缩气体，大都分的尸体是不会浮上来的。&lt;/p&gt;&lt;p&gt;再说，四国最南端的足折岬，是尸体绝对不上浮的投水自杀胜地。「尸体拒绝被发现者」不妨选择水很深的地方，像是足折岬。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;65&lt;/sup&gt; 巨人样：即巨人观，是一种尸体高度腐败后因尸体内细菌大量滋生产生大量腐败气体而使尸体膨胀成巨人样，且面貌难以辨认的现象。&lt;/blockquote&gt;&lt;h4&gt;[注意]&lt;/h4&gt;&lt;p&gt;不会游泳的人比较有利&lt;/p&gt;&lt;p&gt;投身到海和湖里的时候，绝对不要被人看到。尤其是跳海时，会造成花费很大的海岸救助部队的出动。&lt;/p&gt;&lt;p&gt;会游泳的人也有可能这样自杀，但不可否认，这种方法是适合那些「不会游泳」和年迈者的。实际上，二十和三十岁左右的男子几乎很少投水自杀的。虽然下了决心而跳进水里，但总也得游几下，在噗通的过程中被救上来的例子也很多，会游泳的人还是选择别的方法更好些。&lt;/p&gt;&lt;h3&gt;[案例22] 把头埋进马桶而淹死的女星&lt;/h3&gt;&lt;p&gt;一九四四年，曾经是好莱坞电影界的红星把头埋进马桶而淹死了。&lt;/p&gt;&lt;p&gt;她是一九零八年出生在墨西哥，渴望当一位名演员，于十岁那年离墨西哥城来到了好莱坞，在电影《鹅》中扮演女主角。后来爬上了名演员的宝座，和许多著名男演员交往，过着奢靡的生活。由于她的任性和嫉妒的性格，闹出离婚事件，而且还出现丑闻。为了这些丑闻，她的声名下降了，不久落到了R级喜剧电影的地步。但是忘不掉昔日光荣的她，借了难以还清的债务而过着奢侈豪华的生活。最后她怀了一个年轻男演员的孩子而被对方要求打掉，极度心灰意懒的她觉得「与其打掉孩子而活着，倒不如自己死掉的好」。她决意自杀，邀请了许多朋友出席她那赊账而举办得点有数十根大蜡烛的豪华宴会，当天晚上服用了一手掌的安眠药睡到床上。可是半夜发生呕吐而未能断气，在极端痛苦的情况爬到浴室，把脸伸进马桶淹死了。&lt;/p&gt;&lt;p&gt;成为尸体的她，固然不复当年银幕美女的形貌，但她的面部是祥和的。她最后留下的遗言是:「对人生感到太累了，已经厌烦竞争了。虽然从孩童时代起一直想竞争下去。」&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;马桶里那么一点点水就能死人，这是个证明那里都能淹死人的例子。同时这个例子也让我们看到了用药物自杀的典型失败范例。尽管如此，一蹶不振的女演员在马桶内了却一生，也太过分了点。&lt;/p&gt;&lt;h3&gt;[案例23] 即将溺死前的濒死经验&lt;/h3&gt;&lt;p&gt;美国的十七岁少女，有一天和其兄一起去湖里游泳。湖中有很多年轻人在游泳，不知是谁喊了一声:「游到对岸吧！」，于是大家开始向对岸游去。这个少女曾多次横渡过，但却遭到差点溺毙的情况。&lt;/p&gt;&lt;p&gt;少女被救了上来，后来她谈了当时的情景:「我在半沉半浮中。突然有一种我和自己的身体分割开来的感觉，独自一人呆坐在一片空虚之中。我在那里一动也不动，但我的身体却在三、四英呎前面的水中浮沉。我是从右斜后方看到自己的身体。就算我的身体在一段距离外，我还是感觉到我是有着完整的身体。……心情十分轻松，好像变成了羽毛似的。」&lt;/p&gt;&lt;h4&gt;[检验本例]&lt;/h4&gt;&lt;p&gt;这并不是自杀，但却谈了即将溺死时发生的濒死体验。这种情况是意识脱离身体观看自己的灵魂脱离，身体变成羽毛似的轻松经验。而且，不管曾横渡过多少次湖水的游泳高手，有时也会因「不知是何原因」而淹死&lt;sup&gt;66&lt;/sup&gt;，这一点是值得注意的。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;66&lt;/sup&gt; 这里“不知因合原因而死”可能是艾比克反射所致，即人突然入水或入水时神经受到强烈刺激引起休克致死。&lt;/blockquote&gt;&lt;h2&gt;9. Self-Burning 自焚&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;冲击最强烈，绝对可以致死，也有在历史上留名的可能。不过，痛苦也最强烈，死状凄惨。自焚自杀是痛苦的。皮肤百分之百地烧伤却未立即死亡而被送往医院，在那里折腾了半天才断气的情况不少。未死而造成的后遗症，比任何其它自杀手段都更为悲惨。对想普普通通死去的人，我是决不劝他采用的。不过，如果你对这个社会想控告什么而死的话，再也没有像自焚自杀这么悲壮的方式了！曾在越南战争中反对政府而死的僧侣，最近在韩国同样为反政府运动而自杀的学生，在日本为争取改善基层工人阶级待遇的釜崎共斗会议干部，他们都采用了自焚自杀而引起了社会的注目。不错，在被火焰包围之中叫喊着自己的主张的形象确实是深具影响力。&lt;/p&gt;&lt;p&gt;用自焚表现坚强意志和死的决心是再好不过的了。一九八六年追随已故「真理之友教会」教主而集体自杀的七个女教徒，也是自焚自杀。&lt;/p&gt;&lt;p&gt;有人可能以为采用这种自焚自杀的人不会太多，可是人数却年年在增长，目前一年间约达七百人之多，要比触电自杀多得多。照现在医疗诊断标准，在全部自杀者中有三分之一的人被认为是「狭义」的精神病患者，而企图自焚自杀的人中间，被认为患有精神病的居多。&lt;/p&gt;&lt;h4&gt;[准备] 五公升是安全地带&lt;/h4&gt;&lt;p&gt;不用说是用汽油或煤油的，但浇几公升好呢?&lt;/p&gt;&lt;p&gt;全身皮肤烧伤20%对全身已造成很大的打击，但为了死去就只有全身浇满汽油了。虽然有用两、三公升煤油而体无完肤的例子，但为了保险起见，还是准备至少五公升吧。&lt;/p&gt;&lt;p&gt;汽油、煤油是可以一点一点浇上的，衣服易燃，所以可以浸透。煤油进入眼睛非常痛会睁不开，不过，过多地考虑这些是无法进行自焚自杀的。&lt;/p&gt;&lt;p&gt;如果害怕火灾，不妨在下面铺上阻燃地毯，这样即使在房间里躺着燃烧也不会造成火灾。也有浇上汽油后钻进焚烧炉去自杀的四十八岁主妇，不过完全没有这种必要，反而成为妇女周刊的好材料。&lt;/p&gt;&lt;p&gt;浇上汽油之后就可以用打火机或火柴点燃宿命之火。打算发表声明的人要事先牢牢地记在脑子里，免得一入惊慌状态而忘得干干净净。&lt;/p&gt;&lt;p&gt;还有在房间内浇洒汽油，连房子一起焚烧而死的方式，采用的人也不少，这样的话倒不如选少点痛苦的方法，让人看到在燃烧才是自焚自杀的最大特点。&lt;/p&gt;&lt;h4&gt;[经过] 冒出三公尺高的火柱&lt;/h4&gt;&lt;p&gt;火苗比想象中厉害得多。汽油、煤油一经点火，会发出声响而一下子冒起两三公尺高的火焰。被火焰笼罩的身体会有剧烈痛疼和灼热感，因难以忍受会在地上打滚，四周有人肉烧焦的臭味。但大致上知觉还都是清楚的。气管因吸入热气而烫伤，但声音还是能够发出来。当衣服烧得干干净净之后火也就灭了，但有的人还能靠自己的力量站立在那里，继续喊叫(案例24)。&lt;/p&gt;&lt;p&gt;火灭了以后，如果皮肤有三分之一以上坏死的话，有接近半数的人会死去，如果坏死三分之二以上，几乎毫无例外地都会死亡的。到达死亡的时间是各不相同的，全身皮肤被烧得像炭一般焦黑时会当场死亡的，火被扑灭后用救护车送往医院，身子动弹不了，便在痛苦的情况下迎接死亡的到来。有的经过半天或一天，甚至还有经过五天或十天才好不容易断气的。高呼「反对越南战争」而自焚自杀的一位八十二岁美国妇人，神志清醒地生活了十天。她的毛病恐怕是浇上了燃烧不良的酒精性洗涤剂的缘故。&lt;/p&gt;&lt;p&gt;焚身自杀所导致的死因有休克，缺氧及高热引起的重要器官热凝固等。&lt;/p&gt;&lt;h4&gt;[尸体状况] 皮开肉绽、血肉模糊，尸体的惨状仅次于卧轨自杀&lt;/h4&gt;&lt;p&gt;浇上五公升以上的汽油后点上火，当没有人扑灭火的时候，皮肤表面的一部分或全部碳化，头发全部烧光。皮肤剥离，露出了赤红色的肉。本来人体基本上由水形成的，所以即使皮肤碳化，肉也很难烧。这时的姿势，由于肌肉的收缩成为拳击姿势是其特征。尚未坏死的皮肤出现水泡，颜色由黄色变为茶褐色，最后变为黑色。眼角膜白浊，伸出舌头的情况较多。&lt;/p&gt;&lt;h4&gt;[注意] 千万别陷入「瘢痕瘤」的地狱！&lt;/h4&gt;&lt;p&gt;最最可怕的是，留下了一条生命，但在脸部或全身留下烧伤的痕迹而继续活下去。&lt;/p&gt;&lt;p&gt;一位女性浇了一身煤油点燃了火柴但自杀未遂，经历了三年的病床生活，满身都是瘢痕瘤，虽然施行过五次整容手术也没有消除瘢痕瘤，没有了嘴唇，嘴也无法张大。而且，与采用其它自杀未遂者企图再次自杀的情况相比较，自焚自杀或许是因为采用了过激的手段而从濒死状态恢复过来，而得到了感情平衡的缘故想再次自杀的比较少，可是皮肤移植将花上巨大的治疗费。为了不至于弄到这种地步，所以至少浇上五公升汽油，四周如有人来救火你就大喝一声:「不要靠近！」即使是这样你还是担心未遂的话，可与其它方法同时并用。男子杀掉害了他的女人(二十四岁)，跑到母校大学的十层楼顶，浇上汽油后跳楼自杀了。可是，完全没有必要做到这种地步，自焚是致死度很高的自杀手段。&lt;/p&gt;&lt;p&gt;总而言之，自焚自杀是充满痛苦的自杀方法。不过要记住的是，不会立即死亡的。对于死的方法是各有所爱的，一个人静悄悄地死的话，我就劝你采用别的方法了。不过，假如你认为已经过了默默无闻的人生，但死的时候可要轰轰烈烈一番的话，就随你的便了。&lt;/p&gt;&lt;h4&gt;[案例研究24] 为要求改善劳动条件而自焚的韩国青年&lt;/h4&gt;&lt;p&gt;一九七十年十一月，在恶劣劳动条件下工作的裁剪师青年(当时二十二岁)要求改善劳动条件而在汉城和平市场自焚自杀。&lt;/p&gt;&lt;p&gt;在此以前他一直在从事争取改善劳动条件的运动，履次遭受挫折，终于在十一月三日在和平市场内强行展开被阻止的示威游行，当参加示威游行的工人们和警卫队、警察部队激烈冲突的时候，他比同伴们迟些时候出现在市场，并要求同伴们「点着火柴向我扔过来」。火柴扔到他身上时全身立刻成了一根火柱。然后又变成火球，他吸着火焰挤进人群中，高呼:「遵守劳动基本法！我们不是机器！还我星期天！反对残酷驱使工人！」，最后惨叫一声倒了下去。可是他又艰难地站了起来，大叫一声:「不要让我白死！」。眼睛、鼻子都烧得模糊不清了。他倒下去后失去了知觉，三分钟后同伙们把火扑灭了。被送到医疗中心的他，嘟嚷了一句:「肚子有点饿啦！」，过了九个小时后的夜晚十点多，他断了气。&lt;/p&gt;&lt;p&gt;他的自焚自杀，后来被命名为「人类宣言」，至今还流传着。&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;虽然在失去知觉后三分钟时火被扑灭了，过了九个钟头后死亡的严重烧伤，但不停地喊叫是可能的，而且只要有力气跌倒一次还可站起来喊叫。当然会因人而异，当变成一团火球时，要不是因为热得打转的话，他的神志可是非常清醒。&lt;/p&gt;&lt;p&gt;这可以说是最有效地利用了自焚自杀这种手段的例子。他的自杀确实具有很大效果，对死去的他来说也遂愿了。&lt;/p&gt;&lt;h3&gt;[案例研究25]为近亲通奸所苦恼而自焚的中学女生&lt;/h3&gt;&lt;p&gt;有一个十二岁的中学女生，在叔父家院子里自焚自杀了。
她出生后不久双亲离婚而失去了母亲，由祖母养大，因父亲的工作关系在小学和中学期间各转过两次学。她生长的家庭环境非常复杂的，双亲离婚的原因是由于母亲和叔父有了性关系。&lt;/p&gt;&lt;p&gt;可是，促使她走上自杀道路的原因更为复杂，她本人和祖父、父亲也都有性关系。对此一直感到烦恼的她当时还在中学一年级，在暑假前两个月就开始长期缺课了。终于在刚过中午的某一天，她到造成双亲离婚起因的叔父家后院，全身浇上汽油，进行了自焚自杀。&lt;/p&gt;&lt;p&gt;在学校里她经常玩排球，给人的印象是看上去和普通的学生没有什么两样。&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;十二岁的少女自焚自杀，这是令人震惊的例子，但首先应注意的是死的地点。她对叔父的仇恨可能相当大的，所以特意到叔父家后院变成火球，对唤起复仇之念也是非常有效的。十二岁的女孩竟然和祖父、父亲两个亲人发生性关系，更是使人惊讶不已的，太可怕了！她本人大概已感觉到为发泄恐怖、怨恨、绝望的压抑而自杀，如采用跳楼、撞车这些方法也太不显眼了。这种情况还是自焚最合适。不过，她在暑假前两个月就缺课了，就是说只有四月和五月的两个月里去上学的，那么在这期间转了两次学又是怎么回事呢?从资料上还弄不清楚，莫非是还有更复杂的隐情!?&lt;/p&gt;&lt;h2&gt;10. Freezing 雪山冻死&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;如果可以找到很好的地点，就很轻松了。不过要注意有可能经过大规模的搜索后，自杀未遂，却已冻坏手脚必须截肢。&lt;/p&gt;&lt;p&gt;冻死和上吊一样，大概都是很舒服的。说这种话恐怕要被怀疑它的真实性，但这是生还者所说的，只好相信了。&lt;/p&gt;&lt;p&gt;虽然如此，把冻死作为自杀手段而采用的人绝对是少数，在统计上也被分在「其它」一类里，或许因为特意走到雪山太麻烦亦未可知。但冻死并不是只有在雪山和寒冷地区才发生的现象，只要条件齐备，也有在房间内冻死的，当然气温也没有必要一定要在冰点以下。有报告显示，事实上在东京每年都有十几个人冻死，在更暖和的地方也会有冻死者。报纸上经常有流浪汉冻死的消息，对东京、大阪的流浪汉来说，如何度过寒冬是个很实际的愿望。&lt;/p&gt;&lt;p&gt;说了半天还是一篇大道理，毕竟不会有人想在房间里冻死的，也从未听说过在房间内冻死自杀的。在美国，有人进入冰箱里冻死自杀，这只能算是例外。要想冻死，虽然麻烦但还是到雪山的好。这方法的优点很多，可以弥补那些麻烦呢!?下面将要详细加以介绍，例如尸体无损伤，痛苦也少等。&lt;/p&gt;&lt;p&gt;一个人对寒冷的耐受性是重要的因素，因此对不怕冷的人是不适合这种自杀手段。&lt;/p&gt;&lt;h4&gt;[准备] 选定山上休闲地作为目标！&lt;/h4&gt;&lt;p&gt;要想去雪山，首先买一本寒冷的山岳休闲地的导游手册以了解情况。即使没有登山经验和体力，谁也都能到寒冷得足以冻死人的地方。在去滑雪的时候，不妨到那些人们很少光顾的地方。就连滑雪练习场的旁边，说不定也能找到合适的地方。当然，喜欢登山的人可以很周到地决定路线和地点。&lt;/p&gt;&lt;p&gt;需要准备携带的东西:有药房可买到的镇静剂、止痛药等使情绪稳定而能入睡的药物以及酒类。饮酒固然能使体温上升，但为了克服痛苦喝点也是允许的。反正，到了雪地里是很难抵御外部的寒冷。脱掉衣服，一个晚上就能死的，但是有些难度，所以至少找个两、三天别人找不到的地方蹲着，如果能够入睡那就更OK了。&lt;/p&gt;&lt;h4&gt;[在房间冻死要挑选最寒冷的冬季]&lt;/h4&gt;&lt;p&gt;真的想在房间里死，那就非选隆冬的日子不可，还要看天气预报，选择最寒冷的夜晚。另外，还必须做些能使身体降温的准备:全身赤裸浇上水，然后面向电风扇和冷气机，窗子和冰箱都打开。还要空腹、睡眠不足和疲劳，否则也很难实现。如事先喝点酒，使身体表面血管扩张，能迅速降低体温，有催促快死的效果。当然也需要一些耐心，这也是为了等待睡意来临前的忍耐。&lt;/p&gt;&lt;p&gt;在街头冻死的方式:可在夜间穿著湿透的衣服到僻静的公园、空地和树林里去。为了避免人们的猜疑，携带水壶在决定好地点时淋上也可。尽量选择散热较快的水泥地，不过最为重要的就是不要让人看到。&lt;/p&gt;&lt;p&gt;在气温五度、无风、半裸体、空腹的状态下，有一天之内就能冻死的例子；也有在最低气温五度的夜里，烂醉如泥的夜归者在路上冻死的例子。&lt;/p&gt;&lt;p&gt;在水中，气温十五度的情况下冻死的危险性大，如果是五度的水温，浸泡数小时就会死亡的，而且这样的水温有时也会有在瞬间引起心脏停止的情况。向报社和杂志社编辑部寄上自杀预告信的四十三岁家庭主妇，就在隆冬季节的室兰市内，坐在路旁的公园水池内冻死。&lt;/p&gt;&lt;h4&gt;[经过] 「甘美的恍惚感」&lt;/h4&gt;&lt;p&gt;不论是钻进雪堆里还是在房间里脱光衣服，死亡的经过是一样的。&lt;/p&gt;&lt;p&gt;开始时全身冻得直哆嗦，直肠体温到达三十五度时会产生疲劳感、倦怠感和睡意。连孩子们都会说的那句有名的「睡了会死的啊！」的俚语，就是指这种情形。体温降到三十三、三十四度，思考力逐渐减弱，意识模糊不清，会被一种「甘美的恍惚感」笼罩。到了三十至二十三度就失去知觉，直至死亡。降低至二十五度以下时就无法救助了，所以比想象要爽快得多。&lt;/p&gt;&lt;p&gt;对这甘美的恍惚感，某冻死自杀生还者这样说:「随着呼吸急促有一种……神志不清，……。」此外，一位学者在访问而得的报告中，有以下的例子:「数千条光彩夺目的光线在她眼前闪耀，数千台大炮的轰隆声在她耳边响着。脚感到剧烈疼痛，仿佛在针山上跑动似的，不久出现了睡意。一种令人平静的倦意不断地涌现，这么一来好像从世上的担心和灾难中解放出来。空气清新，仿佛是春风似的，优美的音乐再次在她耳边响起。把身子靠在柔软的皮毛枕头里小憩时，各种彩光又在闪耀，不久就神志不清，直到获救以后才恢复了知觉。」&lt;/p&gt;&lt;p&gt;也有的生还者说:「做了一场在盛大宴会上狂舞的梦。」&lt;/p&gt;&lt;p&gt;根据上述体验，可以说与跳楼自杀一样，冻死也是一种除了初期的寒冷以外，完全没有痛苦的自杀方法。&lt;/p&gt;&lt;h4&gt;[尸体状况] 真的是「最美」的吗?&lt;/h4&gt;&lt;p&gt;在雪山冻死的尸体和煤气自杀的一样，有时被形容为「最漂亮的死法」，但这是因发现时期而有所不同。如果因雪而尸体以冷冻保存的状态来看，皮肤因失去血气而呈现透明般的白色。可是，到了春雪溶化时，尸体就腐烂。尸班是红色，这是因为氧和血液中的血色素结合变为粉红色的氧化血色素的缘故。&lt;/p&gt;&lt;p&gt;在雪山等处，有时手尖和脚尖会冻伤而出现水肿的情况。有时也会发生神经错乱，自己脱光衣服被人发现的情况。尸体被野生动物撕烂的也不在少数(案例26)。因此这样说来，并不能说是很美的。&lt;/p&gt;&lt;h4&gt;[注意] 会被找到！&lt;/h4&gt;&lt;p&gt;不管在哪里死，不要在半路发现是最重要的。在雪山的地方，万一在手脚被部份冻坏的情况下被救出，那就需要切除而成为没有手脚的人。不过，气温不到冰点以下是不会出现坏死现象。&lt;/p&gt;&lt;p&gt;此外，在雪山自杀的场合，家属和朋友发现后要求搜索时就需要巨额的搜索费用。因此事先要做些手脚，不要留下暗示行踪的遗书，外出录音电话也照旧就如平时外出那样即可。&lt;/p&gt;&lt;p&gt;如果真的想自杀，还是朝雪山进行的好，在房间内或路旁的冻死，必须一切条件齐备而且还要不易被发现，倒是挺困难的。&lt;/p&gt;&lt;h3&gt;[案例研究26] 在雪山冻死的女剧作家&lt;/h3&gt;&lt;p&gt;一九八一年六月，在北海道中央部石狩山地大雪山系黑岳五合目发现了女性白骨尸体，地点在山上站三百米左右的原始森林内。这位女作家是曾参与《七个刑事》电影制作的杉江慧子(当时四十七岁)。&lt;/p&gt;&lt;p&gt;现场白骨散乱各处，只发现了头盖骨、右大腿和小腿骨。冬天在这一带，狐狸、野鼠等野生动物出没频仍，有被动物咬啃的痕迹，大概在冬季里被这些动物享受过吧！在尸体附近有安眠药的瓶子，里面还有剩下的药片。估计服用的安眠药未达致死量。袋里也有一大瓶威士忌，还剩下八成左右。从她留下的遗物中找到的车票日期是前年的一九八零年十月二十四日。大家认为，她从所居住的东京来到了人烟已稀少的冬季大雪山，由车站走进原始森林，然后服下安眠药睡着后冻死的。&lt;/p&gt;&lt;p&gt;杉江慧子约在五年前开始从事剧作写作，对不能出人头地感到非常烦恼，同时对年龄的不断增长也感到恐慌。所留下来的稿子上虽有数行笔迹潦草的文字，因墨水浸濡，无法辨认，结果始终没弄清她的自杀动机。&lt;/p&gt;&lt;h4&gt;[检验死因]&lt;/h4&gt;&lt;p&gt;这是到山岳地区服用安眠药后在雪地里睡着的典型雪山冻死自杀。然而，遗体却令人惨不忍睹，不是什么最美的。在雪山的自杀，过了十个月尸体就会成为白骨了，而且还要注意野生动物的袭击。&lt;/p&gt;&lt;p&gt;此外，到雪山冻死自杀的时候，是有必要事先做一些实地调查的，杉江本人则因为编写已成为遗作的《星期六剧场》(朝日电视)剧本是以北海道为背景的，所以对当地多少作了调查的。&lt;/p&gt;&lt;p&gt;如果对选择自杀地点感到太麻烦的话，我就劝你采用和她相同的路线。为了慎重起见，再介绍一下去黑岳的方法，首先去旭川，再从旭川乘两个小时到层云峡温泉。然后乘缆车，在换乘缆车的地方转向雪道，进入原始森林就行了(参照图2)。&lt;/p&gt;&lt;p&gt;模仿她的死法的话，可买些在药物章节中介绍市面出售的安眠药和镇静剂，再带一大瓶酒也不错。即使尸体散乱，但起码会在散乱前完全死去。&lt;/p&gt;&lt;h2&gt;11. Special Cases 其它自杀手段&lt;/h2&gt;&lt;p&gt;自杀的方法，除以上介绍之外，还有很多。例如，反正不易弄到手就没介绍的枪支自杀。&lt;/p&gt;&lt;p&gt;电影和电视经常出现的用枪口对准眉间或太阳穴而扣扳机的画面，仿佛是枪枝自杀的典型手法。可是，这种扣扳机的做法是不值得推荐的。由于头盖骨比想象得要坚硬得多，万一角度不对就有可能使子弹弹飞，即使打进去但子弹裂开，碎片在头盖骨内击伤脑子，而又转了一圈从眼睛或另一侧穿出以未遂而告终的情况。要用枪，那就衔在嘴里击穿后脑部的延髓，这才是正确的。&lt;/p&gt;&lt;p&gt;在本章里，让我们依据案例研究来学习这些其它的自杀方法。&lt;/p&gt;&lt;h3&gt;(1) 饿死&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;[案例研究27] 东京都足立区都营新村饿死自杀的姊妹&lt;/h4&gt;&lt;p&gt;一九八五年八月，在东京都足立区都营新村的某一房间内发现了已腐烂的两个女尸体。这是二十五岁和二十三岁的一对姊妹，死因是饿死。死亡推定时间为一九八四年底至一九八五年二月左右。在遗体旁边，有一个姐姐写的「死给你看」几个字的旧信封。&lt;/p&gt;&lt;p&gt;姐姐为支付母亲和妹妹的医疗费以及父亲留下的债务而奔波，她积极认真的工作态度在工作单位也获得好评，可是每月十一万日元的工资是无法偿还的，最后只好借贷。不久所借贷的金额达到了三百万日元，讨债的电话也打到工作单位。即使这样，姐姐还是勤奋地工作着。姐姐是在一九六五年和双亲、妹妹一起搬到这个新村的，母亲病弱，父亲在外工作长年不在家，因此每月有十一万日元的生活补贴。本来就有点精神分裂症的妹妹，上中学后常遭欺负，常常不去上学，姐姐一面看顾母亲的病，一面鼓励妹妹，本人也进入商业高中。然而，念高三时父亲背了一大笔债回来，次年因患癌症死亡。就在这个时候，妹妹又得了甲状腺亢进症，姐姐也因就职而被取消了生活补贴。&lt;/p&gt;&lt;p&gt;母亲终于在一九八三年病死了。但是，亲戚们不同意她领回骨灰。大约从这个时候开始，做姐姐的也对生活感到厌烦起来。她在阳台随意放置垃圾袋，讨债的电话不断，从一九八四年六月起开始旷职，终于在九月被开除了。而且就在九月间因未按时付费而被切断了电和煤气，第二年的一月，自来水也断了。讨债的连日找上门来，两个人只好装作出门而不倒垃圾。十月间曾到邻居那里要吃的东西，过了一阵子邻居们不放心来找过她们，但她们回答说:「不要再管我们啦！」。事实上，就在这个时候或许已经坚定了自杀的念头。新村附近有地区的福利事务所，但她们从没去谈过什么。&lt;/p&gt;&lt;p&gt;大概是妹妹先死以后，姐姐才死的。到了春天，由于苍蝇孳生，臭味冲天而被发现，当时妹妹身穿Ｔ恤衫和西裤偎在姐姐身上，而姐姐则不知为什么光着身子罩了一件对襟毛衣，下半身却赤裸着。&lt;/p&gt;&lt;p&gt;房间内堆满了垃圾、被褥和衣服，其中还有一些「十七岁」等杂志和赤川次郎的小说等。壁面上贴着大岛弓子和幻想漫画「棉花国星」的大幅贴画。&lt;/p&gt;&lt;h5&gt;[检验死因]&lt;/h5&gt;&lt;p&gt;这是令人感到惊愕的不幸。饿死这个手段，只有吃尽人生的苦头才会选择的。因为，她们已经疲劳到极点，连去自杀的力气都没有了。&lt;/p&gt;&lt;p&gt;人与人之间的差异固然很大，但只要连水也不喝，那么在一至二周便可死去，只喝水则在三十至四十天饿死。能量的储存量也是个很大的因素，这对姊妹有些肥胖，大概比一般人花费了更长的时间才死去的。&lt;/p&gt;&lt;p&gt;一家四口都各有其不幸，但姐姐的不幸更加凄惨。母亲的病，父亲的借债，妹妹的受欺负和病，所有的不幸都压到她的肩上。不管怎样去努力也得不到报偿，毋宁说越是努力情况越糟。&lt;/p&gt;&lt;p&gt;她的一生仿佛就是站在自杀与否的十字路口上。自然，要是想活下去那也是可能的，她却拒绝了帮助而选择了死亡。面对这种人生，难道还会有「活着就会有好事」、「要想死什么都做得出来」、「自杀是弱者的事」等说出这种蠢话的人吗?对她的「死给你看」这句话，恐怕是无言以对的。&lt;/p&gt;&lt;p&gt;也有人说饿死才是最好的自杀方式。「相比其他的自杀方式饿死需要极大的耐心和毅力，即使突然不想去死了也不会留下什么后遗症，也能够很快的回复过来。」是不是这样我们不得而知，只是说出这番话的人一定是有所经历吧。&lt;sup&gt;67&lt;/sup&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;67&lt;/sup&gt; By Rena&lt;/blockquote&gt;&lt;h3&gt;(2) 流沙&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;[案例研究28] 在鸟取沙丘流沙自杀的男子&lt;/h4&gt;&lt;p&gt;一九八八年十一月在鸟取沙丘发现了一具男子白骨尸体。当天下午一点多，在远离观光旅游路线几乎无人影的地方散步的当地老人，发现了一个头盖骨微露沙面，报警后挖掘是一具左手握着小型铲子，好像抱在胸前似地蹲在沙坑里的尸体。&lt;/p&gt;&lt;p&gt;这名男子是一九七四也就是十四年前因失恋和患病的失踪人口，当时三十二岁。一天晚上他来到了沙丘，用铲子在沙丘斜坡挖了约一公尺深的洞，蹲进去后用双手往自己身上堆沙，然后就靠着沙子埋了头部而窒息死亡。&lt;/p&gt;&lt;p&gt;他失踪后父母收到的遗书写道:「搜索也是白费的。」&lt;/p&gt;&lt;h5&gt;[检验死因]&lt;/h5&gt;&lt;p&gt;这是一个决意把自己从社会中抹消掉的人所做的彻底例子。&lt;/p&gt;&lt;p&gt;鸟取沙丘是和树海齐名的日本秘境，但把自己活埋窒息而死的流沙自杀是极其痛苦的。十四年中未被发现，他的目的可以说是达到了，可是并不是值得推荐的方法。因为，不被发现尸体的自杀方法还是很多的。&lt;/p&gt;&lt;h3&gt;(3) 熊&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▼▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▼▽&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;[案例研究29] 被幼熊咬死的女性&lt;/h4&gt;&lt;p&gt;一九八九年二月晚上七点多钟，一个六十七岁的家庭主妇跑到离家约一个半小时路程的熊本县阿花町的阿苏熊牧场十二支苑，跳到苑内的幼熊棚自杀了。&lt;/p&gt;&lt;p&gt;听到「噗咚」大响声的饲养员赶了过去，只看到离栅栏2.5公尺下面的熊棚，六十八头熊挤成一团，好象一座小黑山似的。用灭火机驱散熊后，白粉中浮现出人的身子。尸体已被幼熊撕烂了，内脏完全消失，从胃到肠子处开了一个大窟窿，手和脚等全身有数处被撕咬的痕迹。衣服被撕成碎片，好像祼体似的。&lt;/p&gt;&lt;p&gt;她是虔诚的佛教徒，以前就在谈论「自己将落入恶魔的世界」、「人死了但灵魂永生」等。中午过后离家时还说:「叫我到那个世上去」，给丈夫也留有遗书，近邻也都认为她是个古怪的人。&lt;/p&gt;&lt;p&gt;有的人说这位女子以前曾说过:「我想被老虎吃掉」的话，也曾想到熊棚旁边的老虎笼子，但因没法进入铁栅栏，于是就跳进了熊棚。&lt;/p&gt;&lt;h5&gt;[检验死因]&lt;/h5&gt;&lt;p&gt;用被动物吃掉的方法进行自杀，这是出人意料的方法。不过，从动机来说有点宗教气息，过于脱离现实的死法，不能作为自杀方法的参考。而且，这种方法痛苦大，尸体也惨不忍睹，死亡的可靠性也不大，因此我不想劝人使用。&lt;/p&gt;&lt;h3&gt;(4) 死亡装置&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;痛苦&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;麻烦&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;死状&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;牵连&lt;/td&gt;&lt;td&gt;▼▽▽▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冲击&lt;/td&gt;&lt;td&gt;▼▼▼▽▽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;致死度&lt;/td&gt;&lt;td&gt;▼▼▼▼▼&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;[案例研究30] 利用自杀装置死去的美国妇女&lt;/h4&gt;&lt;p&gt;美国病理学家杰克·盖博坎博士以开发独特的「自杀装置」而闻名。这个装置是把生理食盐液、喷妥撒(Pentothal&lt;sup&gt;68&lt;/sup&gt;)、氯化钾分别装在三个瓶子倒挂的高三十公分的设计。喷妥撒是开刀时使用的麻醉药，氯化钾是毒杀死刑时所用的剧药。其结构是自杀志愿者按下揿键后定时器起动，食盐水自动地变为喷妥撒，一分钟后氯化钾开始流入体内。&lt;/p&gt;&lt;p&gt;利用这一装置于一九九零年六月进行自杀的是美国家庭主妇贾耐特·阿德金斯(当时五十四岁)。她于一九八九年被诊断为早发性痴呆症而打算自杀时，听说了盖博坎博士的自杀装置，取得了联系。盖博坎博士准备了一辆白色德国大众小客货车，并寻找了适合于自杀的野营车专用公园。一九九零年六月，她和博士一起乘上车驶往公园，她躲在车后，博士首先把针头插入静脉注射了食盐液，博士调节其流量情况时，贾耐特就按了揿钮，注入液变成喷妥撒，二十秒钟后她入睡了，然后喷妥撒切换为氯化钾，四十秒钟后脸部发红，再过三十秒就发青，很快出现红斑点。心电图在经过五分三十秒时已完全成为直线，其实她的心脏在此以前已经停止跳动了。&lt;/p&gt;&lt;p&gt;贾奈特是个英语教师，又是个酷爱古典音乐的严肃女性，大家认为她的这种性格使她难以承受早发性痴呆症。&lt;/p&gt;&lt;blockquote&gt;&lt;sup&gt;68&lt;/sup&gt; Pentothal：是一种巴比妥酸盐（bar-BIT-chur-ate）。这种药可以减缓大脑和神经系统的活动。&lt;/blockquote&gt;&lt;h5&gt;[检验死因]&lt;/h5&gt;&lt;p&gt;这一事件，就是在全美掀起的尊严死自主性大论战的「帮助自杀事件」。&lt;/p&gt;&lt;p&gt;在眼前，真的要完全可靠而又安然死去的话，只有依赖盖博坎博士的帮助自杀，否则别无他法了。他在一九九一年十月也用这一装置使两个女性自杀，找他咨询的络绎不绝。他之所以能使用这一装置，是因他所居住的密西根州没有惩治帮助自杀罪的缘故。在日本，刑法明确规定了帮助自杀罪的。所以，贾奈特才特意从奥勒冈州到密西根州。&lt;/p&gt;&lt;p&gt;除了针刺以外没有其它痛苦，又可以在睡眠状态下死去，不论别人看见与否，不想在自己房间内死去而又愿意去美国的话，不妨取得联系。不过，对没有被病魔缠身的人，他是否肯使用这一装置就不得而知了。&lt;/p&gt;&lt;p&gt;日本也有尊严死协会，但该会所承认的只是以现在的医疗技术无法医治的癌症晚期痛苦患者，不愿采取白费的延长生命措施的消##极安乐死，对一般的自杀是反对的。&lt;/p&gt;&lt;p&gt;日本尊严死协会的联系地点如下：邮政号码113，东京都交京通本乡2-29-1渡边大楼2楼，电话：03-3818-6563&lt;/p&gt;&lt;h4&gt;[案例研究31] 企图骗取生命保险金而煤气中毒自杀的男子&lt;/h4&gt;&lt;p&gt;一九七一年十月，一个五十六岁男子被发现在公寓的一间屋子里用煤气自杀。&lt;/p&gt;&lt;p&gt;据调查得知，这名男子在自杀的前两年的五月开始至七月间，加入了「安田生命」、「第一生命」、「第百生命」等三个公司的保险，死后家属可支领7260万日元。&lt;/p&gt;&lt;p&gt;生前他对人说过，「我要为子女们留下保险金去死。」&lt;/p&gt;&lt;p&gt;这名男子患了四年的肺结核，后来又热爱于赛车而使家计不济，给家中造成很大不幸而感到羞愧苦恼，自杀的时候正和家人分居中。&lt;/p&gt;&lt;p&gt;他在一家不动产公司工作的同时，还兼做保龄球的夜警和生命保险公司推销员，甚至还向亲友借钱支付了总额达550万日元的保险费。&lt;/p&gt;&lt;p&gt;据不动产公司的同事们反映，他平时为人老实，不像做那种事的社员。&lt;/p&gt;&lt;h5&gt;[检验死因]&lt;/h5&gt;&lt;p&gt;如果是利用普通煤气的自杀，想自杀的人也应该知道一点有关生命保险的事，所以介绍这个例子。生命保险金，即使你的死因是自杀，但要加入一年以后才可支付金额。而且，保险金是领取越早越有利，所以，签订合同以后过了一年就马上死去为好。不过，考虑这些而去自杀的，恐怕除这名男子以外就再没有别人了。&lt;/p&gt;&lt;h3&gt;自杀的统计&lt;/h3&gt;&lt;p&gt;从前的资料对了解采用什么手段，在什么地方自杀等问题是很有参考价值的，因此这里就简要地加以叙述。首先是按方式分类的资料，至今为止的自杀者究竟用什么方法死的呢?&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;年份&lt;/th&gt;&lt;th&gt;1950&lt;/th&gt;&lt;th&gt;1960&lt;/th&gt;&lt;th&gt;1970&lt;/th&gt;&lt;th&gt;1980&lt;/th&gt;&lt;th&gt;1991&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;上吊&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;6641&lt;/td&gt;&lt;td&gt;6560&lt;/td&gt;&lt;td&gt;7542&lt;/td&gt;&lt;td&gt;10968&lt;/td&gt;&lt;td&gt;11313&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;药物&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;4540&lt;/td&gt;&lt;td&gt;8135&lt;/td&gt;&lt;td&gt;2211&lt;/td&gt;&lt;td&gt;1335&lt;/td&gt;&lt;td&gt;1360&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;跳楼&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;152&lt;/td&gt;&lt;td&gt;281&lt;/td&gt;&lt;td&gt;562&lt;/td&gt;&lt;td&gt;1365&lt;/td&gt;&lt;td&gt;2119&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;瓦斯&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;39&lt;/td&gt;&lt;td&gt;834&lt;/td&gt;&lt;td&gt;1693&lt;/td&gt;&lt;td&gt;2342&lt;/td&gt;&lt;td&gt;1251&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;投水&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;2619&lt;/td&gt;&lt;td&gt;2029&lt;/td&gt;&lt;td&gt;1762&lt;/td&gt;&lt;td&gt;1543&lt;/td&gt;&lt;td&gt;1342&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;撞车&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;1816&lt;/td&gt;&lt;td&gt;1142&lt;/td&gt;&lt;td&gt;1166&lt;/td&gt;&lt;td&gt;865&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;其它&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;2320&lt;/td&gt;&lt;td&gt;488&lt;/td&gt;&lt;td&gt;816&lt;/td&gt;&lt;td&gt;1823&lt;/td&gt;&lt;td&gt;1625&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;总数&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;16311&lt;/td&gt;&lt;td&gt;20143&lt;/td&gt;&lt;td&gt;15728&lt;/td&gt;&lt;td&gt;20542&lt;/td&gt;&lt;td&gt;19875&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;第一名是上吊，其次是跳车，其它排名如下:&lt;/p&gt;&lt;p&gt;据厚生省一九九一年的统计，「缢首、绞首及窒息」(上吊、绞死、塑料袋等)11313人，以悬殊的优势独占鳌头。其次是「高坠」的2119人，第三是「固体或液体」(服毒)1360人，第四是「投水(溺死)」的1342人，第五是「气体或蒸气」的1251人。再往下就是跳火山的865人，「热伤(自焚)」的783人，「刃器及利器」(即割手腕等)的616人，触电则格外地少，为56人。&lt;/p&gt;&lt;p&gt;上吊曾于一九五五年至一九六零年把第一名宝座让给了服毒，但在一九八零年又回升破了一万人大关，首位的宝座坚如盘石。跳楼也于一九八六年红歌手冈田有希子的跳下而一下破了当年两千人大关，次年起上升到第二名后未曾再少于两千人，趋于稳定。&lt;/p&gt;&lt;p&gt;服毒以一九六零年达到顶峰的安眠药自杀浪潮而曾一度升到第一名，后来有所下降，但不知为何到了一九八五至八七年间又有了回升达到两千多人，但是目前因药品管理日趋严格所以略有下降趋势。投水在一九六零年只有两千人以上的自杀者，可是现在却下降到1400左右。天然气在一九七五年前后因煤气普及而出现风潮时，曾有过三千人的记录，自从都市煤气已变换为不含一氧化碳的天然气以后，使用车辆排放气体的也只有一千人左右，排位顺序大致来说没有变更。男女间的自杀手段的变迁请参照图二。&lt;/p&gt;&lt;p&gt;女子常采用的投水、塑料袋男女间的最引人注目的差异，首先是投水自杀。自杀者中男人居多在全世界都是一致的，不论从哪一种自杀手段来看，基本上是三比二到二比一，男人居多。可是，为什么日本的投水自杀自古就以女性为多，不论投水自杀的总数多的一年还是少的一年，男人自杀者只有女性的三分之二。&lt;/p&gt;&lt;p&gt;用塑料袋的窒息自杀，每年不过一、二百件，但大多数是女性采用，其原因完全不清楚。在正文中也提到过，男子采用的触电自杀却多得出奇。触电自杀每年也不过一百多件，其中女性自杀者每年只有十多件，而男性从来不会低于全部的90%。这也是专家中间所未解的「谜」，当然有人说女子因为缺乏电的知识，但其理由也不清楚。&lt;/p&gt;&lt;h4&gt;[跳楼对十几岁的女性很具影响力]&lt;/h4&gt;&lt;p&gt;不论哪一个年龄层，上吊占绝对是多数的，但多以十几岁和二十几岁的女子为主。自一九八六年起跳楼超过了上吊。尤其是十几岁的，在一九九零年里跳楼是七四人而上吊却还有三十一人，而在一九八六年则为一六二比七十八，跳楼超过了一倍以上。在一九八五年，十几岁女孩子的跳楼自杀只不过是五十二人。无庸讳言这是受到跳楼自杀的冈田有希子影响的缘故，她在日本自杀史上所留下的影响，是无法估量的。&lt;/p&gt;&lt;p&gt;过去，作为超过上吊数的例子有，在安眠药顶峰期的一九六零年，十几到二十几岁中间上吊人数1311人，而安眠药的自杀竟然达到3889人之多。&lt;/p&gt;&lt;p&gt;不过，除去这种例外而言，不论什么时候什么年龄层上吊总是位于第一名。据说在美国手枪自杀是占第一名，固然是因为容易弄到手枪的缘故。可是，包括美国的其它各国在内，上吊是普遍被采用的，这就说明了作为自杀手段上吊是最受欢迎的。&lt;/p&gt;&lt;h4&gt;[关于自杀日的研究] 五月是自杀旺季&lt;/h4&gt;&lt;p&gt;先按月份来看，世界性倾向皆是春秋多而夏冬少。同时，有的报告说，春天比秋天多，冬天比夏天少，其中最多是四月，其次是五月，最少的是十二月和一月。不过，无论哪一个月份，差别都不是很大。根据最近几年日本的统计，五月份最多。&lt;/p&gt;&lt;p&gt;据一九九一年的资料，月别自杀者的情况如图三所示，这一年五月最多而二月极少。星期天自杀也休息
在东京市内，整理了六年救护科机动处理的自杀者两千余人的情况，自杀多少的顺序(包括未遂者)是星期二(15.3%)、星期一(14.9%)、星期五(14.5%)、星期天(13%)、星期六(13.8%)。&lt;/p&gt;&lt;p&gt;东京市内的某区调查结果是星期四最多，星期三、星期日最少。从已自杀成功的看，星期三最少。&lt;/p&gt;&lt;p&gt;一百多年前，法国的社会学家盖尔凯堡所作的统计显示，星期二和星期四多而星期五至星期日就减少。星期日较少这一点都是一样的，其它的日子没有多大的差别。&lt;/p&gt;&lt;h4&gt;[夜间自杀者多过白天]&lt;/h4&gt;&lt;p&gt;据东京观察医务院自一九五五年以来三年间所处理的八千人的资料分析，夜间的21～24时最多，清晨最少。当时大为流行的安眠药自杀，21～24时占36%，而56%则在21～3时发生的。&lt;/p&gt;&lt;p&gt;在镰仓进行的未遂者调查，最多的也是在夜间，清晨和白天较少。把一天照六小时分成四段在进都进行的调查显示，已遂中多的是12～18时之间(32.1%)和0～6时之间(27.4%)，少的是18～24时(19.0%)和6～12时(21.4%)。但是，在未遂者中反而是18～24时，占31.0%最多，其次是12～18时的29.4%。&lt;/p&gt;&lt;p&gt;这些调查结果显示结果不一致，所以不能一概而论，但是自杀在夜间与早晨至少还是可以取信的。&lt;/p&gt;&lt;p&gt;但是，在新泻县所作的调查的顺序则是0～6时(29.4%)、12～18时(23.5%)、18～24时(21.6%)、6～12时(17.6%)。5～12时较少，还一点大致相同，分析除此以外的结果是有困难的。在农村中老人自杀较多的地区，其自杀时间可以说与都市的时间是不同的。&lt;/p&gt;&lt;h4&gt;[关于自杀的排名] 自杀是他杀者的两倍&lt;/h4&gt;&lt;p&gt;那么，自杀者在增加吗?据图四来看，在战后，一九五五至一九五八字和一九八三年至一九八六年出现过两次高峰，一年里有两万多死亡者，从此以后一直减少，一九九二年略有回升而已。不过，一九八三年之所以增多被认为是小额信贷的缘故，一九八六年则是受冈田有希子的影响。从整体来说，大体上以两万人为标准上下浮动的。这是交通事故的1.5～2.0倍，他杀的2.5倍的数字。&lt;/p&gt;&lt;h4&gt;[自杀在20～30岁间名列前茅]&lt;/h4&gt;&lt;p&gt;从死因类别来看，近十年来自杀跟随在癌、心脏病、脑溢血、肺炎、支气管炎、意外事故、衰老之后，占第七位。战后时期，因患结核和肠胃炎而死亡的很多，所以顺序还在后面。可是，从年龄层来看，最近几年来的记录显示，自杀在二十多和三十多岁中占第一名或次于事故或癌症的第二名。在15～19岁、40～44岁，也在第三名。在自杀率很高的老人中间，随着年龄的增长自杀的顺位排列就下降。厚生省统计情报部所说的「仅从数字来看自杀者中以老人居多的说法，未必是正确的」就是从这种原因。&lt;/p&gt;&lt;p&gt;处在第一位的癌症，到了四十多岁常年的死亡者达到一万多件，但随着到了50、60、70多岁，其死亡数则以二万、四万、六万地增加。同时，自杀的排位顺序却是第五、第六、第七。&lt;/p&gt;&lt;p&gt;具体地说，从一九九一年的数字看，20～24岁的自杀者为962人，这个年龄层的每十万人的死亡率为10.4%，排在第二。而70～74岁则为1188人，死亡率为30.5%，排名第九。的确，按人口比例来说自杀指数是高的。可是，如果有人问到自杀中死的最多的是什么人的话，这个顺序排列就是重要的回答。可以说，从十到三十多岁的年青一代以自杀而死的是最多的。&lt;/p&gt;&lt;h4&gt;[国际间的自杀排名比较] 难以理解的自杀大国——匈牙利&lt;/h4&gt;&lt;p&gt;即使在日本的统计方法，厚生省和警察厅就在两万人中相差一千多人，以按国别进行比较是没有必要了，但却是个有趣的问题，因此加以比较。&lt;/p&gt;&lt;p&gt;根据WHO(世界卫生组织)的最新资料所载自杀死亡率(每千万人口中的自杀死亡数)来看，以自杀大国闻名的匈牙利独占鳌头，占39.9%(一九九零年调查)。仅仅男人就占了惊人数字59.9%。以下是斯里兰卡的33.2%(一九八六年)、芬兰的28.5%(一九八九年)、丹麦的24.1%(一九九零年)、奥地利的23.6%(一九九零年)、前苏联的21.8%(一九九零年)、瑞士的21.9%(一九九零年)。相反地希腊极少，只有3.8%(一九八九年)，可以说少得可怕。其它就是以色列的6.8%(一九八八年)、阿根廷的7.4%(一九八七年)、英国的8.1%(一九九零年)、葡萄牙的8.8%(一九九零年)、波多黎各8.9%(一九八九年)、荷兰的10.2%(一九八九年)、香港地区的10.5%(一九八九年)等。总括来说，统计是有点暧昧的，不必深究。&lt;/p&gt;&lt;p&gt;主要国家中，日本是16.4%(一九九零年)、美国是12.4%(一九八八年)、法国是20.9%(一九八九年)、中国是17.1%(一九八九年)，中国的女性自杀者较多是个特点。加拿大是13.3%(一九八九年)。日本在第二次安眠药自杀高峰期间曾跃居第一名而被称为「自杀大国」，目前居于中间。&lt;/p&gt;&lt;h4&gt;[以枪自杀的美国，以上吊自杀的德国]&lt;/h4&gt;&lt;p&gt;因国家不同而采用的自杀手段各有不同也是很有趣的。&lt;/p&gt;&lt;p&gt;按照目前的说法是，美国以枪击，拥有水都威尼斯的意大利以投水，德国以上吊都具有特色。据最近的资料得知，美国因枪和爆炸物的自杀是47.1%，确实不少。以下就是服毒。煤气是20.8%，上吊是20.5%，其它手段则相当地少。在意大利、瑞士、加拿大、澳大利亚，据说枪枝自杀最多。&lt;/p&gt;&lt;p&gt;由西德的一九六九年的资料显示，上吊占绝对多数，为全部的39%。以下就是服毒。安眠药是23%、煤气是13%、投水是9%。当然也有地区差别，柏林以煤气、汉堡以安眠药最多，与日本相似之处就是跳楼只占5%。同样在瑞典和丹麦，上吊是最多的。&lt;/p&gt;&lt;p&gt;英国的英格兰和威尔斯一九六五年的资料显示，男性是煤气占34%最多，接下来是镇静剂。麻醉药25%、上吊13%。女性药物49%和煤气33%，不知为何这两种多得出奇，除此以外的方法都在个位数。&lt;/p&gt;&lt;p&gt;法国是药物。据一九六六年和一九七十年的资料，第一名是药物，第二名是利刃，第三名是煤气。女性用药物的特多。&lt;/p&gt;&lt;p&gt;印度也同样是药物。一九六六年的统计，采样数虽只有912人，但顺序为药物46%、投水22%、上吊14%。&lt;/p&gt;&lt;p&gt;在非洲的尼日利亚，据一九六二等发表的资料，上吊最多占50%，以下顺序是枪枝、毒物、利刃。&lt;/p&gt;&lt;p&gt;上述情况，看来反映了各种不同的国情。&lt;/p&gt;&lt;h4&gt;[令人萌生死念的绝景－－金门桥]&lt;/h4&gt;&lt;p&gt;与日本一样，海外当然也有自杀胜地。&lt;/p&gt;&lt;p&gt;最为著名的就是美国旧金山的金门桥。就像很多自杀者所说的并不是为了自杀的目的而来的那样，可是目睹令人萌生自杀念头的绝景，纯属气氛。某位七十岁的老人留下了「为什么造就了这样容易自杀的风景呢?」的遗书就跳了下去。同样地，美国的尼加拉瓜瀑布也被称为是自杀胜地。英国的泰晤士河、印度的恒河等都曾被称为自杀胜地，在日本来说大概就是华严瀑布吧。&lt;/p&gt;&lt;h2&gt;后记&lt;/h2&gt;&lt;p&gt;在前言中，写了近似「关于现代社会与自杀」这样夸张的开场白，不过事实上的确是有点言过其实。&lt;/p&gt;&lt;p&gt;写这本书的最初理由，只是因为厌倦了「不可以自杀」这个怎么想都想不出有任何根据的观念，却受到大众非常单纯的信任。&lt;/p&gt;&lt;p&gt;小学老师用「生命的重要」做题目请学生写作文的情形到处可见；自杀的人随随便便被说是意志力薄弱等等。「要活得坚强」这种话轻易就能说出口的社会，不仅封闭得令人喘不过气来，而且也令人活得痛苦。因此，让这本书流通，创出「万不得已时，也可以寻死」的选择，希望在封闭且走到末路的社会开辟一个通风口，使空气流通，使生活更容易些，这才是我真正的目的。&lt;/p&gt;&lt;p&gt;我不是在阐述「大家都来自杀吧！」这样无聊的事，想活的话就要活得自在，想死的话也要死得自在，生命应该就是这么一回事。&lt;/p&gt;&lt;p&gt;在此，要向负责编辑的落合美沙、负责美术设计的铃本成一及插画的沙达希罗卡兹诺利，致上深深的谢意。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;中国时报84年5月9日星期二第五版——出版商紧急回收「完全」系列丛书负责人陈明达提前自大陆返台善后&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;原订近期出版的新书也一并取消&lt;p&gt;【记者张企群台北报导】被台北地检署认定有煽惑他人犯罪之嫌的「完全复仇手册」，出版商茉莉出版社和代理发行的黎铭图书公司，八日已展开回收措施，至于同样引起争议的「完全自杀手册」也决定全部回收。茉莉出版社负责人陈明达昨晚已搭机返台处理相关事宜。&lt;/p&gt;&lt;p&gt;据了解，这项回收作法是茉莉出版社与黎铭图书公司于前日达成的决议，茉莉出版社负责人陈明达在国外获如「完全复仇手册」被国内检察官认定有教唆犯罪之嫌，以电话紧急通知公司将「完全复仇手册」全数回收，并委请代理发行商台北县三重市的黎铭图书公司办理回收事宜。&lt;/p&gt;&lt;p&gt;昨天上午，黎铭图书公司已出动外务员携带回收通知书送给北部各书商，而中南部的书商则以传真方式通知，希望在最短的时间内将全省市面的「完全复仇手册」悉数回收。&lt;/p&gt;&lt;p&gt;据了解，一般惯例书商在接获回收通知书的一个月内，会将书籍退还，如果逾期不退，发行商便不再接受退书，因此，回收的关键仍视书商的配合度而定。&lt;/p&gt;&lt;p&gt;黎铭图书公司经理林俊言表示，今年三月才上市的「完全复仇手册」只印了一版，原本市场反应平平，但在媒体曝光后又变得抢手，各地书商纷纷要求补书，目前市面上的书很可能大部分已流入消费者手中，因此回收的数量可能有限，不过该公司还是会尽最大努力进行。&lt;/p&gt;&lt;p&gt;原本在大陆洽公的该公司负责人陈明达，昨晚也提前结束大陆的行程搭机返台处理后续事宜，他表示，当初出版这一系列的书籍，是着眼于日本、香港等地都面临相同的问题，台湾走在日、港的后面，势必会遇到相同的情形，才本着关怀社会的心理出书，先后出版「心目中的自杀」、「完全自杀手册」、「完全病死手册」、「完全失踪手册」和「完全复仇手册」，绝无煽惑他人犯罪、自杀的不良意图。&lt;/p&gt;&lt;p&gt;陈明达说，基于该系列书籍造成社会人士的非议，他返国后已决定除了回收市面上约三千余本的「完全复仇手册」外，约万余本的「完全自杀手册」也一并回收，至于另二本「完全病死手册」和「完全失踪手册」也考虑予以回收，一切损失由该公司自行吸收，此外，他也打消原本该公司预定近日出版的「完全中毒手册」，今后对书籍的出版会将更审慎地研究评估。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;联合报84年5月9日星期二第七版--复仇手册检方侦办出版商列被告&lt;/strong&gt;&lt;/p&gt;&lt;br/&gt;类似的「黑色书刊」都将比照&lt;p&gt;【记者高年亿／台北报导】台北地检署检察长卢仁发认为坊间最近出版的「完全复仇手册」，内容涉嫌煽惑他人犯罪，昨天指示将出版商茉莉出版社列为被告，由主任检察官陈时提侦办。检察长卢仁发特别强调，类似的「黑色书刊」不仅对社会有负面影响，且有触法之虞，检察机关一旦发现，都将比照办理、主动侦办。&lt;/p&gt;&lt;p&gt;卢仁发强调，检察官主动侦办「黑色书刊」，是依据刑事诉讼法有关「检察官知有犯罪嫌疑，应即开始侦查」的规定，并不是扼杀言论或出版自由；而且刑法对言论、出版自由都有给予保障或限制的相关规定，并非漫无界限，他希望外界不要误以为是在进行「白色恐怖」。&lt;/p&gt;&lt;p&gt;主任检察官陈时提昨天完成研究报告，认为「完全复仇手册」的内容，针对不满政府官员、新闻媒体、办公室、校园、邻居、企业及亲人的不特定人，提出各种复仇手法的建议。其中虽然有一些建议是属于单纯的恶作剧，但也不乏血腥暴力的模式，研究报告认为出版商有触犯妨害秩序罪煽惑他人犯罪之虞。&lt;/p&gt;&lt;p&gt;陈时提向检察长卢仁发报告后，卢仁发认为有必要详查，立即指示主任检察官陈时提签分「他」字案，将发行完全复仇手册」的出版商茉莉出版社列为被告，如果调查发现出版商涉嫌煽惑他人犯罪的事证明显，再签分「侦」字案追究出版商的刑责。&lt;/p&gt;&lt;p&gt;【台北讯】茉莉出版社的负责人陈明达昨天晚上表示，除了已决定收回的完全复仇手册之外，他也决定要自市面上收回完全自杀手册。&lt;/p&gt;&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[其实除了梧桐，什么都没有]]></title><description><![CDATA[月下梧桐三色柳。]]></description><link>https://www.abellee.cn/2021/07/06/其实除了梧桐_其它什么都没有/</link><guid isPermaLink="false">https://www.abellee.cn/2021/07/06/其实除了梧桐_其它什么都没有/</guid><pubDate>Tue, 06 Jul 2021 04:03:00 GMT</pubDate><content:encoded>&lt;p&gt;月下梧桐三色柳。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[my_friend's_essay]]></title><description><![CDATA[content: ]]></description><link>https://www.abellee.cn/2021/05/11/my_friend&apos;s_ essay/</link><guid isPermaLink="false">https://www.abellee.cn/2021/05/11/my_friend&apos;s_ essay/</guid><pubDate>Tue, 11 May 2021 23:46:57 GMT</pubDate><content:encoded>&lt;p&gt;content: &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;ztdER,1aIJ7oXRgSV(yO2W&amp;amp;&amp;quot;exCkNB&amp;quot;o{VR3Z0ZcOug+j8go06x3sxDZbjdU$D7I7+=*l1GQ$N++d8^oi9g&amp;amp;?yR1hM;qZgLZszLIl[*,ZUPWtsT*q}+_iu}P,Q$+S=@oGaN3.xk[?i;qVg)&amp;gt;53`Gl[xEZU^K,.)*%J|/v3GNo9&amp;quot;*HOwoJ5J3H3!;P?CVzww:S2R:Q]_5ZUrh%G($602;)@C3BU*Bz4aC&amp;amp;5ncH[.P3qWI!3@YC@m_:2EQ.NS.}Tz`oU!g5ueF26xYF}ThD5nII[?rZUi&amp;quot;n$.MzF@ff=m2NSG[fxE}FBrs=)WBA!wDZcz|gKT&amp;gt;Kd2,4:P3BYj_u/=2S`YMJ38%~KB5(C|wg:}4rcK[&amp;amp;Bh%VDA(fbR+u_n&amp;amp;3PE5O.P&amp;lt;goL5EKy#oTk@^SEfzhS2ynm@opQUDLz..g4h#FM(&amp;amp;V4NJ./U^oU[&amp;quot;}R#C+.?6&amp;quot;AmjXGH@m*ZFq.:l1XN49p,UxxooNg&amp;amp;!&amp;amp;+NK[=q=kken27oj@W~QU{idQo/IES0h%zPB]H+HOiCfSptB%bb?4n,P&amp;lt;$orGMKj3yC04uRWr2.&amp;amp;3:z$@+rZULP,.)*|%b/*1WbC?++Ix$orGR3L4]pq[6&amp;quot;AmjXGHy4aCu13_.[Ob||]dnsWf[~*zB%JV3@q,&amp;lt;lzokvN3jw`prO&amp;quot;gAr2.&amp;amp;38`(@z:YU5L9KQ.b12$A0)S&amp;lt;h(+FER`~&amp;lt;ygMx*~o?=q2Zugz3ARM[JC,|?DBWdh2,4:P3{Jf4I.oD[`|Y&amp;quot;}$1xvp[MXza&amp;gt;g,06nm@npi+6&amp;quot;1Pz8&amp;gt;.+1h`izAKFx&amp;gt;Win)+d8j`;YIK!1!;7Lmp{T8W&amp;amp;tHX1EQO.NS.daj`M[N3&amp;quot;7K_G]^S.T8WT2YRC@ggZ%eDHyuXC@8yB%&amp;amp;r3Qw/fa&amp;amp;oqs!g5u_{94Boe|ThU2KTJ[Db?|1X@^=:&amp;lt;lf/&amp;amp;u6Pf@K+HOiCfS|(iuOVw9.+`]@o2{EK&amp;lt;xE+`l4TDaugG1qz+[n.IUEens4+v5r`q2+ah6d:1wBovD&amp;quot;}F2C+ul:Qr26c@0PcH[?r$|]K1.4(*XZzB%aS7k{.2%_`nN!g5ufyamfBLU8WAT$4wDb[bL{sef1bi2j$K]K0h%VDpsK=XBv`P3:PIl1&amp;gt;8,Fp#^(=WzAL99uR4lf=6zmTr[{MAU*B3.y**XM{n&amp;amp;VVzMv,pw^`J:&amp;quot;}o3ALPn;q|ew:T2={m@&amp;gt;xK%&amp;amp;EWhbgFqDpdtAmjXGH&amp;quot;Em+7`SIT!@J&amp;lt;hx/Uxxo{&amp;amp;`r~6t&amp;gt;Z87&amp;quot;JV+jx/W7j`_*N3jwW(X?=qJwG.[3g/m@~g!qvJDy6(WnRTju|S+jT.p&amp;lt;(`d$`rI9!;OirKMx`;g2kps[{MQU@p+32/!v9H&amp;gt;9|Jf4tJh/+ub12$B%mSc[O.H2QoI8yg8%%snPLq+f[Xr2S#J[&amp;amp;r,qhMHy2+$`o!2y/S2LP.yJyovNx3sx&amp;quot;K99hI4lh,73:z$@$dZU*GHy1ZLL*#8$jKf4tJh/*BvM^/iurYj_k,21S`q2x3sxm$Y8JQSrE&amp;gt;/3v$q[{MDrwVFys=7`}{iuRV4NJ.+T_`[KAK[t/61NzF$lH*F5#0k@P;ZUeMo~&amp;gt;eW_x#nv)P|4&amp;lt;+FEwo)![r$wC+)jQesZ)&amp;gt;!3:zg@=@#|JBAF|(gWV;*1/SxiM.yJyovN3=~1tCrL%oYlq&amp;lt;e2NS+[&amp;amp;ERUDNz.6dW_8yh%iSh6f:&amp;lt;ZU`CBbVHwa[D^DCTg&amp;amp;)GyPc)E!k[t!hafA:}0qz+[4d$||iu~+&amp;lt;$`QG#6sPb8,+HEMq^R(=1tc[YM%o.fy)+0S;.[4d$||i,.)*gW}!L(&amp;amp;P49x,Ar^`g&amp;gt;k&amp;amp;V6k[hMwr%k1b}4!TH[LsYU!X|&amp;amp;9h;;H1h%Cs3QL.+T^odCg&amp;amp;36&amp;lt;.6[^S9k$aE1^QX_;jE}Xre9gYn[1#2yiSJ6=+{%QoqJAK[t^{w?oD9wG.]&amp;amp;c1%@2Yh%BX~&amp;amp;~+$`o!L(iSA94/&amp;amp;JAovDR3g2WW,P{s&amp;quot;Zugi6=:H[8jFV|IDy6(tFQ{g0FQSne:D&amp;lt;jo!!EK&amp;lt;x1Qe]=qrq2.kzj$%@9jAU*B0bEcM4EG.v`P9mv,SxwokvR3Z7k[?iwrifH*w6unk@Oe}|]dnsX&amp;lt;{Uu$A0LNo9&amp;quot;*HOh`&amp;gt;7MK)9,NCOGc,k2.33ARs[QsBU*B:^E*sFHpdt!MXQt/;2_`TkMK0$eFJ[=q2Zug}46T,@djQU5CV&amp;gt;3WLL*#8$jKf4!+S=woL$!g5uWWA8XGTw/f1z&amp;gt;;V_;jIU7J;mw;&amp;lt;l2_G&amp;amp;wVCn4/=2xoW&amp;gt;!g5u/6D7SlAV8WAT$4wDq&amp;gt;Gl|G4Zv=U2[!q[{M||}p83d:$`o!A0CQb8v&amp;gt;8,wo9Kg&amp;amp;36k[?i`sZqrZ,0O;E@DH{qdr2bIgC@(/*14V(8h:I7Lq^Rc&amp;amp;iv]pt9rK81C)wz}pI[d^p%,B1.PeIx^`n&amp;amp;zPnQy/&amp;quot;fyo{&amp;amp;&amp;quot;}F2C+AP#hWfs+C(yTV_;j!qTdDy0*&amp;lt;l;F.v`P9my&amp;gt;8,wo8YN3I4WW3icncrE&amp;gt;;0jI%@T;RU@ba9#)WB(FL2+V#4V.5Ii`&amp;quot;4{}$vALPn=E*qVbQ2s`K[dxYUPWtsT*WBA!HvGQj80/=2i`&amp;gt;7MK)9DZ.Mki9wFb$3:z*[ZYq%Ls;m6=7`H`+&amp;amp;DNo9n&amp;gt;8,wo8Y&amp;quot;}$1E+`lVsjqqcA1Reo[{MAU*Bo~Ka7o=#[xoS%6|.v}[`J:&amp;quot;}&amp;amp;vtCrLki9wFb$3!Hl[}5ZUrho~7=[z}:swWV4NJ.]Z_`*RAK[t*~v6uR4lH*F5!Hm@}g+qpag9cX[G;/dtPKf4j,Ar^`@/N3qywCh[=q=kH*W2s`:[n.2qMGIF8XM4|`q2[Jf4tJh/*B4hFHu9KQ.N.+h8zo9Kx3sx7;m97&amp;quot;wV.l:.p2Kq^R&amp;gt;}a%*~uNBoXaug!32zm[{MJ%&amp;amp;Ets,/$`#/Mw^aJiX.c|]`0N&amp;quot;}|7U(LmcncrE&amp;gt;;0jI%@T;K%&amp;amp;EAF|(gWV;*1nY?QO.)|]odCJ3a7CZHPmpsrVbk6od)@Hm&amp;gt;q~px.Qhm:20+&amp;amp;GY|4t,8JNq^RMK`%E+o88HFw[X~0eTL[C{?q?ga9IZi(.!MwMNo9&amp;lt;+`]QoBB!gV%!;OidU6lx,WyPc$@$BJUbpdQnc7oc!F12ST81/K7yowUyg8%D+R[6&amp;quot;tP!7I.A,xo8YfVe27;=4XGTw[X~0eTa_;jQU{ipsVcA/&amp;lt;!7z.Mw9N.d}GpZlx3sxIn.8/Qal6&amp;lt;&amp;gt;0hGh@=@AU*BHy2++)d;l16Sdm(+Xgyo8Yc&amp;amp;Ry^{?]^S_v?=0zv$M[1u#|&amp;gt;Pu~CbC@u0B%fVQN;.]Z%`m6V3d75994mpFU8WP2YRi@lp3|~P^&amp;amp;he!Cg!~5yV4NJ.Iljo?jMKQzWW4?^SmZDhqzY1*@j=xU]Ka9#)$`o!Xi|Gn&amp;lt;=q2Z&amp;gt;gG1S;m@W~YUrhu~Cbn[AGu9FNY9{.]Zgo73AK[t*~uNBo@fK&amp;lt;mzyT(@^uh%t&amp;quot;t&amp;gt;imDC*29(mz&amp;amp;;U_;jIUw&amp;quot;PI:m)C9av=D5TcK[FpAU*BpsK=5h{0h%%Mo9J.5Iho[*N3jwV(EQ%oalS)G(c1%@4*p%Via9!XLL*#8$;S.N4/&amp;quot;%iobMJ38%tCs4dU,k$ap23_.[ObR%NG2b];$`#/=9eV5]0/=2xoW&amp;gt;6gO4zC26uR&amp;quot;fzhB5ST&amp;lt;[C^F}^Kg9d)WB(Fs(ySbkK.IlNqaM&amp;gt;}$1`pDmXGOlX*D51S*[R64|w&amp;quot;&amp;lt;.BMmpg|U&amp;gt;&amp;gt;&amp;amp;c1G[[2}|Elg9cXj(o:dt`S|@/+FEG{]7g&amp;amp;M#zCh[6&amp;quot;`XinO.)|yo8Y!g5uc[_^DCr}Thlz`{(@c6||taHy@;[z5#~50SQN:+h8(orG]}U6D+(m@LzU8WP2mnM[?r$|kR@^G&amp;lt;uMc:swFYRi&amp;amp;+S=z`EB[r{u_{y5%oZqVbQ2_9I[[2BU*B^@g&amp;amp;GvJ_n&amp;amp;mSxix/faSo2]x3sx*~uNBoXaug!32z+[GQ||oFYByztF=;*1/S&amp;lt;hP.+TzokvN3jw*~!N=XJw)&amp;gt;A5rc*@&amp;lt;x#qcFR&amp;gt;G+&amp;lt;l1ndXtCrLLq:ZDhk2mnM[?rJU7Jts&amp;quot;:7oq_n&amp;amp;3P,QU:P]jo+^MKj3yCH?6&amp;quot;`XeL%+h8)`|^N3Ut]p&amp;gt;NTlirVb&amp;quot;4Do:[.VJ%gKGF#bZBxndtAmjXGHCy6(WnS$P3^P~]W..[k`:V&amp;quot;}|7U(4PBo1kb/&amp;gt;3:zg@R;GV|IP&amp;gt;!XCj&amp;amp;0B%8MY9c:D&amp;lt;zokvN3jwk[hMBoeZug36F!M[+EErZFts/(WBA!2yQNCn2/K7go06!g5uAL99.jcl2.~xPcK]C^ZUrhIN|nvDCs6&amp;amp;E+nPBoTqzhg2_9I[[2JU7J9KK:aIQ{q2eSf4].81CovDYC2@+EFV|IOBbojCx3sx2tO%RBAF|(vMD1%%Os3Qm,ili`hJAK[t*~v6MXmrVbhz%eb_;jE}XrdQnc7oEGs(TYVOm,Sxh`${!g5uwC=N8&amp;quot;uP^M;..%Ton`fV7vq&amp;gt;07/Q+l%,B(c1%@A34|^U1.,(:e`;l1dbgN;+HEz`;&amp;amp;!g5u&amp;quot;3B_LqYl9(L5mnA@DHSuPJgc`;7z&amp;amp;;G[dx||]dnsWfm:20+&amp;amp;5PP@/+Xgio0eR3Z7+Nul~g6lq&amp;lt;G1@Fm[&amp;lt;}h%VDDy6(gWZH&amp;gt;9.PP@/+XgiobMg&amp;amp;!&amp;amp;!;OiIj9qLZSyPcl[0uRUzcg9cXvM8!=9^S&amp;gt;jR.|+yo9Kg&amp;amp;36]p0^nWNa#=43Ed(@*xFV|I^&amp;amp;N:*XZzm&amp;amp;*Pu7z/ir0`]0!g5utC~hGHy4J`G1EKMxE+`lrKvw`;NT$4wDDZ.MXZGf[X8zLI$@$r.|Wd=mF/&amp;lt;lf/04HQaPq&amp;gt;8,Qo3]/r(8wv4PkiJaThe2YRH[~ai%PWAF{WvM8!9t&amp;quot;X^kJ.VOy`5N!g5uDZU7MXn}Thlz%en@:jRU{iKF,c7`0:MwrS|@T.VOy`5NAK[tDZ.MXZGf&amp;lt;Wszj$h@T;R%{REFYZj(${n&amp;amp;.Mo9&amp;lt;+6,io[*UKz5Z[M7XG$Zv=lz/e(@/,QUDLu~+&amp;lt;WBX/Mw8P`&amp;gt;u/&amp;amp;f$o9*6gxzzvF@=q2Z&amp;gt;g8zY1*@*xpUJZx.XcvM^/*1nYqP6/7]$orGyg8%tCs4XGef=(A5q#F[Dbx%&amp;gt;ig9cXZue$N9,r3Q%+h8U`^!IKs!zvjO;qalH*W2s`*@!j?|UBAF{WvM8!9t&amp;quot;X^kk,fqzoEux3sx7;lQLq_fK&amp;lt;V5wpk@GCZUeMHy?eC@*#nv[S3Q@.]Zgo^&amp;lt;F3F2tC~hQL4l[,A1JqH[dxgUVWg9d)4h&amp;lt;GSx[Pf@x,0|y`,&amp;lt;x3sx7;lQLq_f{Yo2|_*[mKZUeMpsW/4hM!bzLQX@F+HOiCu1s/)@)g}|4V!3s=%2zRjuNQ[]U.|eLq^R!gK!CZw8WZDwn*3z`{j@T;#|zQx.}/WBA!wDZcyqcW&amp;gt;^8aCjV;MwaVzMv,pw&amp;amp;orGyg8%/6wk=E*qy)|0M`E@DHSuPJ&amp;amp;W&amp;gt;g@3c`N]I{GV|Ik9v&amp;gt;$2)yB%&amp;lt;a[6n,X2CovDw&amp;amp;yz+N_7/Q8fk&amp;gt;zz/eV_;j&amp;gt;qdr5.P;+)%zB%}agNL+HOiCfS|(Mw8P}l7/=2RoI8EKA149h5JQ0lx,/3v$q[5mi%VD1.Z+JL%;MwaVCnP.e%%orGR3d&amp;amp;3Qq[=qUfmYzzg1X_;j?vXGTw(hJ5!H+@.&amp;amp;x%}Yyb&amp;lt;:[zk:K2[r3QL.5IhoL5g&amp;amp;a1zCIkBoY|Tho6Pc(@l{QUQp,.)*LL^/]!Ab#@u/n}(`:&amp;amp;EKMxk[?impZw`;{0Hol@FC2qMG%KtX.)H1h%2Pj8`.]Z[`K((=c%U(U^Lqaf?=^0Fql[{MR%rVQhee_N]Qm1^PP@G+HOwo8Y+gt5&amp;gt;bm9Sltw8W53!#%@rpa%IsfQ4gA/B;c$7V4N/.|+)`JrAK[t39@kQLef[XG1~S&amp;lt;[n.IUEeDyu,/e{_n&amp;amp;.Mo9{..%0`_*]}s!!;P?LqUl2.HyPcU_0Y!qgra9#)#JB#t9.M+^U:%OHp{xyg*2)si[=q=kH*&amp;lt;0dG%@J{QUMiu~D.LL{_n&amp;amp;{JeLx/~$]oX9EKA149h5/Q8fQ:,0B{Y_;jQU@bFyDfF|;`g0^PAlS.#qwo&amp;lt;m&amp;quot;}K369YkyFDa!g;0I`l@LQhUPIFyDf?shz%%TYVOL.)|hodlMK;y^{,?^S9k$aE1+nb_;jJ%bpDy^Y[~r/*1&amp;quot;P[]k,r2Roc$!g5uwv_jnWZqjhwz&amp;amp;;A@DHgUTWR&amp;gt;=,gWAG#6sPP@o,ADTo3]c&amp;amp;{zwvP?FcWfrZQ2&amp;lt;`r[{MDr9LFyJ=WBX/S!%SyPr&amp;gt;8,woK:x3sxALy[|GL}ThD55!)@m=GV|IHy=:&amp;lt;]I{n&amp;amp;3Pu7t,@7ho~7J3i27;g?=qUfxX6zj$*@sB@|2JDy_*b11TjueN49p,i,_`@/EKD8I_sj`sl29(d2kpn@&amp;gt;EGV|I0bVZj(n/X#4V_hJ+HOQo3]R3L4!;Oi{Z*whX,0yTm@_SFV|I4b8)7`G$MwoY@9*+FEG{n;!g|$!;7L;q)f*;76F!M[%}$|zQDy^Y&amp;lt;]!_n&amp;amp;EYin)+d8So|fo&amp;amp;nx%sdQBoXak&amp;gt;83!Hl[}5ZUrh,.(YvMlzB%WVzkb:&amp;amp;T%oH5/rYt&amp;lt;.BM#hLw`;k2S#J[+r||Zia9#)WB(Fju|SK?v,AD(orG&amp;gt;}}7E+{]=q=k$ae2F!U_;jZ%TIo~_*WBX/:2EQu7&amp;gt;.]Zgo[*MK)9b[LOGcIfs+C(c1%@pHZ%LU1.RYC@g!~5yV4Nu/A=Lq^REK,w+Nn]dU$1S)9zj$h@T;gUPIFyE&amp;lt;$`Rz+&amp;amp;;PP@T.R]_`dC&amp;quot;}&amp;amp;v}3tl~gva&amp;gt;gG1=Gk@P;RUWK+31cz$X1%%&amp;amp;MXQj,m7]o8D&amp;amp;g0t+NWl8H&amp;lt;f!gn2BGm[{MFV|Iybs:tFeIs(nVzkb:D&amp;lt;TobT{}V6wvW]6&amp;quot;cSK?5/haToBB&amp;gt;}T6th55MX]l3*.0r$n[{MR%/NBWw;$`Rzh%5S|@T.daio(^MKQz^{C5(C|w_e=3:z*[u^AUjH@^{cj(_y+&amp;amp;YY|4t,8JDoQQx3sx7;_^IjXgA:|0)dI[2:oUgY,.)*[z5#~50SQNU.670`13UK{uV(4kQL&amp;quot;fPdjz3$W_;j||JSHy?e[~*zB%LNY9=./+$orG&amp;gt;}&amp;amp;9OI#P%oSf&amp;quot;c|xPcF[;:,q.bKFs)q}XRr2}S6?R.7+go*3k&amp;amp;ZutCs4rK=k+.~4_9$@tVRU(SdQo/IES0h%zPu7O.670`13AK[tK_GiXGVaugV2YdM[OVi%VDs~h.WnMqdt?J&amp;lt;hn,21hoY)&amp;quot;}F2XW??=q=kH*73*Sl[f#.|UkWhbgC@^92ydY}lF+HOgo&amp;amp;D7=G3I_6[rKBg1b8.i6]!&amp;gt;Jf4t/)%J2n[S$WyxP85y&amp;gt;8,R`EuIKs!E+nPBo5UB21,q_q2$Mo9M+HO[`{^YC{Q2OfQw,[kh`K,x3sxI_5kji8l[,2z5ePS~1(a%ogrVbhz%eH@DHSuPJgcGYV5!TN]WjYUeM%K^f[Gw:c$VVzMy&amp;gt;8,@odC]}wz%sFluR=U8W*0k/+@c{YUeM9KPbC@s!e6eN{^K.CfKq^Rg&amp;amp;Q$]p|6uR4lH*73:zg@Se}||DAF|(+)G$iupS.Nt/&amp;lt;J]`TkEKD8tC!iji,qM+.0~yE@gg||JSDyC;b1O$N9_PaP&amp;lt;.]Zx`=HygMxtCs4XGefxXE1S;(@+r4|wae9gY&amp;lt;]7/iuwPn4&amp;gt;.]ZQozeyg70b[2impy|Thlzr$i@L9YU*GT&amp;gt;m/WBX/Hv8Sjk++S=$o8.AK[t%so8uR4lH*W2KTO]?J3qMG9KQ.$`QGetmS|@T.c7QotQ[r{ueFJ[^SmZug)0gdp[Q~AU*BDy^Yz$NHs(`Mw9;+&amp;quot;%Kq^RIK4uVW|i@L9kb/&amp;gt;3:zg@&amp;quot;gFV|IHy2+tF=;$0fSS?m,K7%orGnVW%CZ2]tkjU8W*0I`:[C^ZUrhGFaaLL*#8$BQn4&amp;gt;.]Zgo~7g&amp;amp;!&amp;amp;k[?i{Z@f)e53];V_;j{qqfKF$Y[GBHE7BYin)+d8So|fo&amp;amp;nxs&amp;gt;im8Hal$aN5Tc%@ZVBU*BGF}gCjs{G&amp;amp;RY|4t,8J^oP}`rKx$;XnyYVU8W03g/+@}oIUw&amp;quot;+N[8MXbgy){0k/m@2mhU@N3.~+&amp;lt;]&amp;lt;:l1XKf4B=+0d!8&amp;amp;c1G[8B|qjHAF{WLL*#[xDKf4m&amp;gt;uCxT]4|alL,XZ2(._{U&amp;gt;@tTDTj3o]T`RzC&amp;lt;S%&amp;amp;*.cLwCt9oDvww:jzY1n[`SYU)UKFM)*XD`q2$MY9=./+wo{&amp;amp;+gt5&amp;lt;.w?^Sbq)e)0t!W_0Y+q.Z&amp;gt;^5(xT;Rw3/P&amp;gt;^v,Gxzo;VbVnwC+$?^Sbq)e)0t!W_jbAU*B/m}Wqr[zG&amp;amp;dVw9J.};[o_EIKMyk[i5Slur*b)0CTL[+Ey%}Y83DY7oz/&amp;amp;upS&amp;lt;h*+&amp;gt;lAovDMK`%E+o8|G;2Vb]3ARR]I{JUbpts&amp;quot;:4&amp;gt;zpdt`X@l3/W7j`_*[r{ut&amp;gt;APwrNws+YyPcF[8BS%hT0bF/$`#/B%KQG^L.c|Lq^RfVqy(~;&amp;gt;=qUfbZjzXIg@xY||taT&amp;gt;A&amp;gt;&amp;lt;l;F4#oV$9S.c|Lq^RN3jwV(F9oD6fc+7z%es[_}YUrhyb]YFqu_q2vPTM].81j`4wx3sxV(5[;qKl$ae2=!$@*xS%@p9KPb=5p:j@~=}|&amp;gt;B&amp;amp;t9(~4BS,[.Vh%VDa9zYsF5ndtAmjXGHGy1ZC@(/*1&amp;quot;PYNP.EPj`1z`r98k[i5XGefbZj2s`K[8B$|ohQhCYF|f`n&amp;amp;mSM5=+S=goY)!gF(3Q|67&amp;quot;3SK?:+d8@oX}IKH!wvh5MX92Ue@0&amp;amp;;k@Oeh%VDa9&amp;lt;=WBA!!6cS}NZ:Vq[`dCygivk[hM;q[w*;vz`{I[?rK%PN~&amp;amp;q=3hW0h%,MCnb:D&amp;amp;Nq^R`r^$7;kjrKUfU&amp;gt;;&amp;amp;c1m[8g||JSDyBe&amp;lt;]SI9$S3;F;qZg0&amp;gt;FyPcl[f#RUWK~&amp;amp;t:X_[#{y|Xj_k,!Z$orGR3K4.6B_6&amp;quot;tP%6q,mPi`1z`r98!;84/Q+f0e]&amp;amp;c1+[4d$||ibQ%YLL*#8$pYn4l,X2Mq^R&amp;quot;}|7U(LmaNJw[X~0eT;[F&amp;gt;{q@IGF#bsF]0B%TV4NJ.TEx`)H7=Ry&amp;gt;.I?^S9kx,qzqTV_;jgUVWg9cXCj&amp;amp;0h%IY2^Q.eD(`a&amp;gt;x3sx598^MX3k_es6unk@A&amp;gt;QUroybR;6om0B%^Xu^V.X8]oP[o&amp;amp;UtV(5[#OIrVb&amp;quot;4F!R]!r!qgr:^!,[zyodt!M*mL.GPz`G8V3b%7;=4/Q72$aJ(c1%@]x$|xJa9!XLL*#8$Ns3QL.oDgosU&amp;quot;}$1C+d4/QalWY}4E`G@DH2qWI!3@Yj(`Hs(!r3QL.+T^odC2gnx*~v6MXmrVbhz%e&amp;lt;[ydh%VDz.6(?~y_n&amp;amp;.M#Qr,uJk`HIvV~%nT]hjiqZjhN5rc*@&amp;lt;xS%LIg9d)0aRzG&amp;amp;%P(M;.p2Kq^RR3g2WW.84Trajh63:zF[&amp;quot;],|Uk9K~WO#?`n&amp;amp;mSp6|.9k_`TkMK0$E+`lVsBw0&amp;gt;K58/p[{MAU*BEFX&amp;lt;rF;/]!7Sbk:.~ezoes&amp;quot;}$1nT^&amp;gt;Lq4fK&amp;lt;b5IRH[*ER%{RDy6(tFm0m&amp;amp;hV*O..]ZR`mo=rztC+d4MX^U8WP2FGg@LQZUeMMFQY(Q%#N9tVbMJ+HOiCfS$47z3Py?.+h8_`+OJ377k[i5XG&amp;lt;1Fbxz&amp;amp;;*[(j3qhKts&amp;quot;:4&amp;gt;0{n&amp;amp;VVc[?.]Zwokv/rYt&amp;lt;.vi7aQx&amp;lt;W43:zA@DHAU3Lo~B*?~$Gu9AQE5O.P&amp;lt;@odC&amp;quot;}w#q&amp;gt;cL%ouZ&amp;gt;g}x^Q+E!kjXEC&amp;amp;fK&amp;lt;V5!TI[q&amp;amp;i%VD~&amp;amp;}ZFqZ#{yDs3QL.5IS`4sEK&amp;lt;xzv14MXFa&amp;gt;g}xPc)E!kjXdUql0eg23_.[zHJUWI,.(YW_x#swFY@9?.Y=j`)tEKD8b[AMBo?kx,T5rcK[dxYU)UKFM)$`o!h%XN*mL.p&amp;lt;HpZl&amp;quot;}&amp;amp;v)stQ%oF}ThD5o1.[wj+qpa@^v)dP}:dtVY=&amp;gt;m&amp;gt;8,go&amp;amp;Dc&amp;amp;70WW[kzFyZ&amp;gt;g@3c`X_;j||GZvsgYC@j`$0(r3Qw/zUI{/O&amp;quot;}F2C+APBo#qga:0izg@Oe#qVk}VAhn[jRm19V4NT:J]Hp7i!g5uDZc@6&amp;quot;AmjXGHt~CbZu&amp;lt;{q2eSxiW:oD@odCD~.!9;_4CVkl{Y`0&amp;lt;/C@DH+qk&amp;quot;q&amp;gt;07XGef&amp;amp;)rz@p%@pHIUWIg9cXj(!odtAmjXGHZ9&amp;lt;=kdw:P3rP@l0/Jg(orGMK)9Y($8^Si|ThD5&amp;quot;#J[&amp;gt;=i%VDWheX7oJ;Wy;Pu7&amp;lt;+&amp;gt;lwo8Y!g5uY($8^Si|ThU2YRn[{M,|jmvs*&amp;lt;6o_:Hv8S,4r,Pwho@Yx3sx%sp58H%qVbQ2R:Q]_53qcWSh0cbIl#2y(PFmC+HOwo8Y{}V6iFrjgbiZk&amp;gt;&amp;gt;0Do,@z:FV|IP&amp;gt;#)!vJ;dt%Sjk++@lU`4s(=87DZc@CV|e)ed29G)@dYAU*BT&amp;gt;Z=q}&amp;lt;yh%:P!7..Y%jo06AK[tDZbjeU&amp;lt;vg:O2R:Q]_5S%@pbQ%Y;;f/P3|PH@W.nqRo!N6gO5+Nm9XG1qVbQ2R:Q]_5GV|Ia9U*gW@!swKNSnO.5Ixo&amp;gt;Aybs:MSj`q2+ah6U.,qKq^RIKnxV(EQ^l9k1b1z`{(@UYZUp&amp;quot;+NWlGJ#qVbQ2ZG)@{:ZUeMg9cX4hZTm1Qs3Qm,&amp;quot;Tzo1wJ35%DZc@rKBg1b,3:zK]b0a%fFAF{W[~Y:*1/SxiM.|+]ou9N3Ut+NX]^SbqL/$3h:H@DH#|Opi9Re~%}:Mw8PinT:o%U`mo&amp;gt;}1%*~v6MXmrVbQ2?_i@hbAU*B83Hc~%}:MwrSbkK.8J0`_*!g5uV(4k8HQli)~&amp;amp;c1%@*xZUrho~&amp;amp;Y&amp;lt;]RzG&amp;amp;sV4NT:)T(`ST3=qx`{Ej:Q!lW.R2R:+@,ah%VD:^(*r}D`q2+ah6U.,qwoA[w&amp;amp;Q5!;84LqzwP=n23_D@DHSuPJ&amp;amp;WDh/0tSK[7d3|wa!3[*6olH(urSu^f:t+QobT7=D9M_!l8HIrVb&amp;quot;4&amp;quot;#.[&amp;lt;j}|Zins.gFqE{n&amp;amp;3Pj8q,9]GpF}3=g1tC~hGHy4Yo&amp;amp;D7=G3I_M7dUOf!g!6r_*[7E||JS&amp;lt;^`fj(#`n&amp;amp;&amp;gt;aC?r,PwwokUbVHwwC7m1M}|ThlzfIk@2mp%.Zu~9XvMP`n&amp;amp;mSxi&amp;amp;+S=@o2z&amp;quot;}gvI_6[=q=kH*&amp;lt;0~Sn@HCJU7Jvs@Y&amp;amp;2q_n&amp;amp;.M#Qr,t2zo8YIKnxwCNQBo)1])D51SU_;jE}Xro~~dCj%Hs(`MY9.+:l&amp;amp;`#REK,wC+cLBo5U8Wnz%eH@Vx&amp;gt;qnYa9#)WB)y%%(Vc[?.]Zwokv/rYt&amp;lt;.w?|GTgH*E(c1%@tVJU7Ja9#)&amp;lt;l1ndtAmjXGHp~XZO#h#7zmSbk$+&amp;quot;%Ro3]rV$w+Nn]^S9k$aE1^QX_;jgUPIV&amp;gt;3WW_j`q2vPTM.+!,Lq^RR3IxCZvPLq#qVb13/:I[UEFV|I3.y*uM+0G&amp;amp;fV4Nu/A=]`X$AK[twvM^nWZ2=(oz+;,[6E!q6S^&amp;amp;5Wn[+_n&amp;amp;.M49O.)|T`CBbVHwwC8^^SmZ&amp;gt;gM(c1m[:PEr%N/m}WF|&amp;lt;!WyLQn4E+HOh`[&amp;amp;MK)9DZ.MBo4ZThb21!q[G~GV|I83HcC@Vzm&amp;amp;*PnQo,t2jo+^fVe2k[hM8&amp;quot;mS|@/+l8]`(UIKCwq&amp;gt;*@=qJw(h;0hG%@uu}|4Vts&amp;quot;:4&amp;gt;:0B%bNvQ!+Ix[`TkbVHweFIk)Cbg(hJ5!Hm@_SAU*Bo~=a~%+0%%~X|4t,8J(orGJ38%+NX]=q2Z!ge2z_l@_Sx%}YDyBe4ha$Mw)V4Nu/W7j`_*AK[tc[x[^S9kq&amp;lt;vzXIg@xYR%xjg9d)WBA!9tjV4NT:)TT`YMg&amp;amp;!&amp;amp;=.TmuR:|Th53i;M[Fph%VDQh8X&amp;lt;]}{n&amp;amp;5SJik,ElG{#i!g5u)sjm~g}|U&amp;gt;uzbIo[&amp;lt;Bh%VDShAbIE=Het8rL_Z:)T^`TkEKD8C+*@kPJw(ha2NSh@FC2qMG0bVZYB!odttPu7O.yJioI,AK[tZcOuP/UxxovNEKYt%syO#h&amp;gt;|Tho6%G,[KvJUxHZ&amp;gt;1cC@P/t9FQa?:+?]%`:pN3%2!;7L#hfU8WP2YRM]C^JU7Js~L:!CsG#69M*mw/aJx`2wrVpxK_yO&amp;quot;gd}ThD5nII[?r,qbYDy5WC@k!{yZKf4tJ&amp;amp;W&amp;gt;gG1;cK[Db?|FL:^7X[~U!+&amp;amp;LQ`m=.]Z%`:pN3%2wvE@=q=kX*lz/e(@UY$|5Cc9da2,_{&amp;amp;uuYeL;.8|RoBB!gV%E+_7nW8|ThD5!To[lmYUfdq~LaCj&amp;amp;0B%}agN`.&amp;lt;|y`Qy!g5uE+_7nW8|ThU2s`l@R;ZUp&amp;quot;+NX]^SEfy)n28Fg@~gIUw&amp;quot;k[?iwr5qhXK(c1G[dx||JSHy@;[zKI}#4Sxix/W7j`_*x3sx&amp;lt;.DO#hgrVbQ2s`l@&amp;quot;gR%0V,.)*VnG0B%_Sxin,uJzo{&amp;amp;IK56L_bL{sMlb/p2iTK[B6h%VDa9&amp;lt;=PZL`n&amp;amp;sPANl,Xwh`FM=rCwtC~hGHy4oo)!{}$v$;M@0fClx,k2[!q[5m@|Og,.(YC@l#~5BQ,Ql,@7H{CT(=1t!;7LGcXqC)L(c1h@2m?|~p~&amp;amp;I/WBA!HvGQj8P.5I%orGMKj3}K.84TJgmY(3*ej@3^RU(SR&amp;gt;=:PZ^`n&amp;amp;EYeL%+za]`/i3=Hwv&amp;gt;:5^S&amp;amp;|Th:0z_G[8BRUjrg9cX5&amp;gt;d;B%|Jf4tJh/*BLLB;v3rPDMv,Vgxo;VfVN#L_bLLqeZ!g&amp;gt;&amp;amp;c1+[n.YUrhDyC;GqV#B%ZN*m2/)T$orG=r.!InOl:Qr26cGyPc)E!k[tXG$Zug8zXIg@xYIU7Je9gY[~*z%%TY}lP.D]joY)N3Ix%s+idUk|ThD59yG[?rS%{Rz.6d&amp;lt;]^Fs(Ab{Lp&amp;gt;8,h`&amp;gt;tEK8%DZ.MBo?kS)n23cG[dxh%VDts.WM4|`n&amp;amp;3Phi&amp;gt;.*2xoblUKR5!;P?6u]&amp;amp;i;7o[ndtAmjXGH0.4(*Xw!e6SVk5/+h8(oms=r%2+NX]Lq*k{.)06nL[lB&amp;gt;C;,$%Toovx3sxWWu]#Ob}Th:070p[ajGV|I)3Qb4h;`n&amp;amp;zP&amp;quot;?U.eDyo;VbVnwk[4?6&amp;quot;AmjXGHGy2+b12$iupSbk:.u1^oU[R3$1wC&amp;amp;Omp&amp;gt;lac$6:zo[gmFVUBu~=aCj~#N9tVbM/+FEQoI8yg8%*~ni@LzU8W%
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[什么是Markdown]]></title><description><![CDATA[什么是 Markdown ? Markdown 是一种可以使用普通文本编辑器编写的标记语言, 通过简单的标记语法, 它可以使普通文本内容具有一定的格式。 目录 什么是 Markdown…]]></description><link>https://www.abellee.cn/2021/05/02/什么是 Markdown/</link><guid isPermaLink="false">https://www.abellee.cn/2021/05/02/什么是 Markdown/</guid><pubDate>Sun, 02 May 2021 18:45:38 GMT</pubDate><content:encoded>&lt;h2&gt;什么是 Markdown ?&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Markdown 是一种可以使用普通文本编辑器编写的标记语言, 通过简单的标记语法, 它可以使普通文本内容具有一定的格式。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;目录&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E4%BB%80%E4%B9%88%E6%98%AF-markdown-&quot;&gt;什么是 Markdown ?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E7%9B%AE%E5%BD%95&quot;&gt;目录&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%88%86%E7%BA%A7%E6%A0%87%E9%A2%98&quot;&gt;分级标题&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%88%86%E9%9A%94%E7%BA%BF&quot;&gt;分隔线&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E8%B6%85%E9%93%BE%E6%8E%A5&quot;&gt;超链接&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E8%A1%8C%E5%86%85%E5%BC%8F&quot;&gt;行内式&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%8F%82%E8%80%83%E5%BC%8F&quot;&gt;参考式&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E8%87%AA%E5%8A%A8%E9%93%BE%E6%8E%A5&quot;&gt;自动链接&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%8C%BA%E5%9D%97%E5%BC%95%E7%94%A8&quot;&gt;区块引用&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E5%BC%95%E7%94%A8%E7%9A%84%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97&quot;&gt;引用的多层嵌套&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%BC%95%E7%94%A8%E5%85%B6%E5%AE%83%E8%A6%81%E7%B4%A0&quot;&gt;引用其它要素&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E9%94%9A%E7%82%B9&quot;&gt;锚点&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%BC%BA%E8%B0%83&quot;&gt;强调&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E6%96%9C%E4%BD%93&quot;&gt;斜体&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E7%B2%97%E4%BD%93&quot;&gt;粗体&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%88%A0%E9%99%A4%E7%BA%BF&quot;&gt;删除线&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%88%97%E8%A1%A8&quot;&gt;列表&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8&quot;&gt;无序列表&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8&quot;&gt;有序列表&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%8C%85%E5%90%AB%E5%BC%95%E7%94%A8%E7%9A%84%E5%88%97%E8%A1%A8&quot;&gt;包含引用的列表&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87&quot;&gt;插入图片&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E5%9B%BE%E7%89%87%E8%A1%8C%E5%86%85%E5%BC%8F&quot;&gt;图片行内式&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%9B%BE%E7%89%87%E5%8F%82%E8%80%83%E5%BC%8F&quot;&gt;图片参考式&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E8%A1%A8%E6%A0%BC&quot;&gt;表格&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E4%BB%A3%E7%A0%81&quot;&gt;代码&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#%E4%BB%A3%E7%A0%81%E8%A1%8C%E5%86%85%E5%BC%8F&quot;&gt;代码行内式&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E7%BC%A9%E8%BF%9B%E5%BC%8F%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81&quot;&gt;缩进式多行代码&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E7%94%A8%E5%85%AD%E4%B8%AA--%E5%8C%85%E8%A3%B9%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81&quot;&gt;用六个 ` 包裹多行代码&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#html-%E5%8E%9F%E5%A7%8B%E7%A0%81&quot;&gt;HTML 原始码&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%86%85%E5%AE%B9%E7%9B%AE%E5%BD%95&quot;&gt;内容目录&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E6%B3%A8%E8%84%9A&quot;&gt;注脚&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#latex-%E5%85%AC%E5%BC%8F&quot;&gt;LaTeX 公式&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#-%E8%A1%A8%E7%A4%BA%E8%A1%8C%E5%86%85%E5%85%AC%E5%BC%8F&quot;&gt;$ 表示行内公式&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#-%E8%A1%A8%E7%A4%BA%E6%95%B4%E8%A1%8C%E5%85%AC%E5%BC%8F&quot;&gt;$$ 表示整行公式&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E6%B5%81%E7%A8%8B%E5%9B%BE&quot;&gt;流程图&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E6%97%B6%E5%BA%8F%E5%9B%BE&quot;&gt;时序图&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#%E5%BE%85%E5%8A%9E%E4%BA%8B%E5%AE%9C%E5%88%97%E8%A1%A8&quot;&gt;待办事宜列表&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;分级标题&lt;/h2&gt;&lt;p&gt;第一种写法:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;这是一个一级标题
============================

这是一个二级标题
--------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;h1&gt;这是一个一级标题&lt;/h1&gt;&lt;h2&gt;这是一个二级标题&lt;/h2&gt;&lt;/blockquote&gt;&lt;hr/&gt;&lt;p&gt;第二种写法:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;h1&gt;一级标题&lt;/h1&gt;&lt;h2&gt;二级标题&lt;/h2&gt;&lt;h3&gt;三级标题&lt;/h3&gt;&lt;h4&gt;四级标题&lt;/h4&gt;&lt;h5&gt;五级标题&lt;/h5&gt;&lt;h6&gt;六级标题&lt;/h6&gt;&lt;/blockquote&gt;&lt;h2&gt;分隔线&lt;/h2&gt;&lt;p&gt;你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线, 行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;* * *

***

*****

- - -

---------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;hr/&gt;&lt;hr/&gt;&lt;/blockquote&gt;&lt;h2&gt;超链接&lt;/h2&gt;&lt;p&gt;Markdown 支持两种形式的链接语法: 行内式和参考式两种形式, 行内式一般使用较多。&lt;/p&gt;&lt;h3&gt;行内式&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;里写链接文字，&lt;code&gt;()&lt;/code&gt;里写链接地址, &lt;code&gt;()&lt;/code&gt;中的 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 中可以为链接指定title属性, title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。&lt;code&gt;[链接文字](链接地址 &amp;quot;链接标题&amp;quot;)&lt;/code&gt; 这样的形式。链接地址与链接标题前有一个空格。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;[Markdown Syntax](https://github.com/cdoco/markdown-syntax)
[Markdown Syntax](https://github.com/cdoco/markdown-syntax &amp;quot;Markdown Syntax&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cdoco/markdown-syntax&quot;&gt;Markdown Syntax&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cdoco/markdown-syntax&quot; title=&quot;Markdown Syntax&quot;&gt;Markdown Syntax&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;参考式&lt;/h3&gt;&lt;p&gt;参考式超链接一般用在学术论文上面, 或者另一种情况, 如果某一个链接在文章中多处使用, 那么使用引用的方式创建链接将非常好, 它可以让你对链接进行统一的管理。&lt;/p&gt;&lt;p&gt;参考式链接分为两部分, 文中的写法 &lt;code&gt;[链接文字][链接标记]&lt;/code&gt;，在文本的任意位置添加 &lt;code&gt;[链接标记]:链接地址 &amp;quot;链接标题&amp;quot;&lt;/code&gt;, 链接地址与链接标题前有一个空格。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;全球最大的搜索引擎网站是[Google][1]。

[1]:http://www.google.com &amp;quot;Google&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;全球最大的搜索引擎网站是 &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;。&lt;/p&gt;&lt;br/&gt;&lt;/blockquote&gt;&lt;h3&gt;自动链接&lt;/h3&gt;&lt;p&gt;Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱, 只要是用 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样, 例如:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;lt;https://google.com/&amp;gt;

&amp;lt;ocdoco@gmail.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://google.com/&quot;&gt;https://google.com/&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&lt;a href=&quot;mailto:ocdoco@gmail.com&quot;&gt;ocdoco@gmail.com&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;区块引用&lt;/h2&gt;&lt;p&gt;区块引用需要在被引用的文本前加上 &lt;code&gt;&amp;gt;&lt;/code&gt; 符号。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; 这是一个区块引用实例,

&amp;gt; Markdown.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;这是一个区块引用实例,&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Markdown.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &lt;code&gt;&amp;gt;&lt;/code&gt; :&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; 平生不会相思,
才会相思,
便害相思。

&amp;gt; 空一缕余香在此,
盼千金游子何之。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;平生不会相思,
才会相思,
便害相思。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;空一缕余香在此,
盼千金游子何之。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;引用的多层嵌套&lt;/h3&gt;&lt;p&gt;区块引用可以嵌套（例如：引用内的引用）, 只要根据层次加上不同数量的 &lt;code&gt;&amp;gt;&lt;/code&gt; :&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt;&amp;gt;&amp;gt; 锄禾日当午, 汗滴禾下土。 - 李绅

&amp;gt;&amp;gt; 山有木兮木有枝, 心悦君兮君不知。 - 越人歌

&amp;gt; 去年今日此门中, 人面桃花相映红。 - 崔护
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;锄禾日当午, 汗滴禾下土。 - 李绅&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;山有木兮木有枝, 心悦君兮君不知。 - 越人歌&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;去年今日此门中, 人面桃花相映红。 - 题都城南庄&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;引用其它要素&lt;/h3&gt;&lt;p&gt;引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;gt; - 入我相思门, 知我相思苦。
&amp;gt;
&amp;gt; - 长相思兮长相忆, 短相思兮无穷极。
&amp;gt;
&amp;gt; - 给出一些例子代码:
&amp;gt; ```markdown
&amp;gt;   return debug_backtrace();
&amp;gt; ```
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;入我相思门, 知我相思苦。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;长相思兮长相忆, 短相思兮无穷极。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;给出一些例子代码:&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;  return debug_backtrace();
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;h2&gt;锚点&lt;/h2&gt;&lt;p&gt;网页中, 锚点其实就是页内超链接, 也就是链接本文档内部的某些元素, 实现当前页面中的跳转。比如我这里写下一个锚点, 点击回到目录, 就能跳转到目录。 在目录中点击这一节, 就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;**[⬆ top](#什么是-markdown-)**
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#%E4%BB%80%E4%B9%88%E6%98%AF-markdown-&quot;&gt;⬆ top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;强调&lt;/h2&gt;&lt;p&gt;Markdown 使用星号&lt;code&gt;*&lt;/code&gt;和底线&lt;code&gt;_&lt;/code&gt;作为标记强调字词的符号。&lt;/p&gt;&lt;h3&gt;斜体&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;*花自飘零水自流*
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;花自飘零水自流&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;粗体&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;**花自飘零水自流**
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;花自飘零水自流&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;删除线&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;~~花自飘零水自流~~
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;del&gt;花自飘零水自流&lt;/del&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;列表&lt;/h2&gt;&lt;p&gt;使用 *，+，- 表示无序列表。&lt;/p&gt;&lt;h3&gt;无序列表&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;- 白头吟
- 击鼓
- 断句
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;白头吟&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;击鼓&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;断句&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h3&gt;有序列表&lt;/h3&gt;&lt;p&gt;有序列表则使用数字接着一个英文句点。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;1. 白头吟
2. 击鼓
3. 断句
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;白头吟&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;击鼓&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;断句&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;h3&gt;包含引用的列表&lt;/h3&gt;&lt;p&gt;如果要在列表项目内放进引用，那 &lt;code&gt;&amp;gt;&lt;/code&gt; 就需要缩进:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;* 菩提偈:

  &amp;gt; 菩提本无树，明镜亦非台。
  &amp;gt; 本来无一物，何处惹尘埃！
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;菩提偈:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;菩提本无树，明镜亦非台。
本来无一物，何处惹尘埃！&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;插入图片&lt;/h2&gt;&lt;p&gt;图片的创建方式与超链接相似, 而且和超链接一样也有两种写法, 行内式和参考式写法。&lt;/p&gt;&lt;p&gt;语法中图片Alt的意思是如果图片因为某些原因不能显示, 就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样, 表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的, 可以省略, 但建议写上。&lt;/p&gt;&lt;h3&gt;图片行内式&lt;/h3&gt;&lt;p&gt;&lt;code&gt;![图片Alt](图片地址 &amp;quot;图片Title&amp;quot;)&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![哆啦A梦](https://cdoco.com/images/duolaameng.jpeg &amp;quot;哆啦A梦&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://cdoco.com/images/duolaameng.jpeg&quot; alt=&quot;哆啦A梦&quot; title=&quot;哆啦A梦&quot;/&gt;&lt;/p&gt;&lt;h3&gt;图片参考式&lt;/h3&gt;&lt;p&gt;在文档要插入图片的地方写 &lt;code&gt;![图片Alt][标记]&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;在文档的最后写上 &lt;code&gt;[标记]:图片地址 &amp;quot;Title&amp;quot;&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![哆啦A梦][duolaameng]

[duolaameng]:https://cdoco.com/images/duolaameng.jpeg &amp;quot;哆啦A梦&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://cdoco.com/images/duolaameng.jpeg&quot; alt=&quot;哆啦A梦&quot; title=&quot;哆啦A梦&quot;/&gt;&lt;/p&gt;&lt;h2&gt;表格&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;不管是哪种方式, 第一行为表头, 第二行分隔表头和主体部分, 第三行开始每一行为一个表格行。&lt;/li&gt;&lt;li&gt;列于列之间用管道符&lt;code&gt;|&lt;/code&gt;隔开。原生方式的表格每一行的两边也要有管道符。&lt;/li&gt;&lt;li&gt;第二行还可以为不同的列指定对齐方向。默认为左对齐, 在&lt;code&gt;-&lt;/code&gt;右边加上&lt;code&gt;:&lt;/code&gt;就右对齐。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;简单方式:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;诗名|作者|朝代
-|-|-
白头吟|卓文君|两汉
锦瑟|李商隐|唐代
登科后|孟郊|唐代
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;诗名&lt;/th&gt;&lt;th&gt;作者&lt;/th&gt;&lt;th&gt;朝代&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;白头吟&lt;/td&gt;&lt;td&gt;卓文君&lt;/td&gt;&lt;td&gt;两汉&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;锦瑟&lt;/td&gt;&lt;td&gt;李商隐&lt;/td&gt;&lt;td&gt;唐代&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;登科后&lt;/td&gt;&lt;td&gt;孟郊&lt;/td&gt;&lt;td&gt;唐代&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;原生方式:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;|诗名|作者|朝代|
|-|-|-|
|白头吟|卓文君|两汉|
|锦瑟|李商隐|唐代|
|登科后|孟郊|唐代|
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;诗名&lt;/th&gt;&lt;th&gt;作者&lt;/th&gt;&lt;th&gt;朝代&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;白头吟&lt;/td&gt;&lt;td&gt;卓文君&lt;/td&gt;&lt;td&gt;两汉&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;锦瑟&lt;/td&gt;&lt;td&gt;李商隐&lt;/td&gt;&lt;td&gt;唐代&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;登科后&lt;/td&gt;&lt;td&gt;孟郊&lt;/td&gt;&lt;td&gt;唐代&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;为表格第二列指定方向:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;诗名|名句
-|-:
梦微之|君埋泉下泥销骨。
上邪|上邪，我欲与君相知，长命无绝衰。
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;诗名&lt;/th&gt;&lt;th align=&quot;right&quot;&gt;名句&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;梦微之&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;君埋泉下泥销骨。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;上邪&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;上邪，我欲与君相知，长命无绝衰。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;代码&lt;/h2&gt;&lt;p&gt;对于程序员来说这个功能是必不可少的, 插入程序代码的方式有两种, 一种是利用缩进(Tab), 另一种是利用 &amp;quot;`&amp;quot; 符号(一般在ESC键下方)包裹代码。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;插入行内代码, 即插入一个单词或者一句代码的情况，使用 `code` 这样的形式插入。&lt;/li&gt;&lt;li&gt;插入多行代码, 可以使用缩进或者 ``` code ```, 具体看示例。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;代码行内式&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;PHP打印堆栈信息 `debug_backtrace()`。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;PHP打印堆栈信息 &lt;code&gt;debug_backtrace()&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;缩进式多行代码&lt;/h3&gt;&lt;p&gt;缩进 4 个空格或是 1 个制表符。&lt;/p&gt;&lt;p&gt;一个代码区块会一直持续到没有缩进的那一行(或是文件结尾)。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;    $closure = function () use($name) {
      return $name;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$closure = function () use($name) {
  return $name;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;用六个 ` 包裹多行代码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;```php
$closure = function () use($name) {
  return $name;
}
` ``
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$closure = function () use($name) {
  return $name;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;HTML 原始码&lt;/h3&gt;&lt;p&gt;在代码区块里面, &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&lt;/code&gt; 会自动转成 HTML 实体, 这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码, 只需要复制贴上, 剩下的 Markdown 都会帮你处理，例如:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th rowspan=&amp;quot;2&amp;quot;&amp;gt;值班人员&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期一&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期二&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期三&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;李强&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;张明&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;王平&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;&lt;tr&gt;&lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;&lt;th&gt;星期一&lt;/th&gt;&lt;th&gt;星期二&lt;/th&gt;&lt;th&gt;星期三&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;李强&lt;/td&gt;&lt;td&gt;张明&lt;/td&gt;&lt;td&gt;王平&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;内容目录&lt;/h3&gt;&lt;p&gt;在段落中填写 &lt;code&gt;[TOC]&lt;/code&gt; 以显示全文内容的目录结构。&lt;/p&gt;&lt;h2&gt;注脚&lt;/h2&gt;&lt;p&gt;在需要添加注脚的文字后加上脚注名字&lt;code&gt;[^注脚名字]&lt;/code&gt;, 称为加注。 然后在文本的任意位置(一般在最后)添加脚注, 脚注前必须有对应的脚注名字。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2]。

[^1]: Markdown 是一种纯文本标记语言

[^2]: HyperText Markup Language 超文本标记语言
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PS: github 不支持注脚 :joy:&lt;/p&gt;&lt;h2&gt;LaTeX 公式&lt;/h2&gt;&lt;h3&gt;$ 表示行内公式&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 &lt;img src=&quot;https://latex.codecogs.com/gif.latex?E=mc%5E2&quot;/&gt; 来表达。&lt;/p&gt;&lt;h3&gt;$$ 表示整行公式&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;$$\sum_{i=1}^n a_i=0$$
$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$
$$\sum^{j-1}_{k=0}{\widehat{\gamma}_{kj} z_k}$$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PS: github 不支持 LaTeX 公式, 但是有个折中的解决方案, 使用 codecogs, 例如:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![](https://latex.codecogs.com/gif.latex?sum_{i=1}^n%20a_i=0)
![](https://latex.codecogs.com/gif.latex?f\(x_1,x_x,\ldots,x_n\)%20=%20x_1^2%20+%20x_2^2%20+%20\cdots%20+%20x_n^2%20)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?sum_%7Bi=1%7D%5En%20a_i=0&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?f(x_1,x_x,%5Cldots,x_n)%20=%20x_1%5E2%20+%20x_2%5E2%20+%20%5Ccdots%20+%20x_n%5E2%20&quot;/&gt;&lt;/p&gt;&lt;h2&gt;流程图&lt;/h2&gt;&lt;p&gt;流程图大致分为两段, 第一段是定义元素, 第二段是定义元素之间的走向。&lt;/p&gt;&lt;p&gt;定义元素的语法 &lt;code&gt;tag=&amp;gt;type: content:&amp;gt;url&lt;/code&gt;。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;tag就是元素名字。&lt;/li&gt;&lt;li&gt;type是这个元素的类型, 有6中类型,分别为:&lt;/li&gt;&lt;/ul&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;start&lt;/td&gt;&lt;td&gt;开始&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;end&lt;/td&gt;&lt;td&gt;结束&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;operation&lt;/td&gt;&lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;subroutine&lt;/td&gt;&lt;td&gt;子程序&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;condition&lt;/td&gt;&lt;td&gt;条件&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;inputoutput&lt;/td&gt;&lt;td&gt;输入或产出&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;content 就是在框框中要写的内容, 注意type后的冒号与文本之间一定要有个空格。&lt;/p&gt;&lt;p&gt;用&lt;code&gt;-&amp;gt;&lt;/code&gt;来连接两个元素, 需要注意的是condition类型, 因为他有yes和no两个分支, 所以要写成:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;c2(yes)-&amp;gt;io-&amp;gt;e
c2(no)-&amp;gt;op2-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;```flow
st=&amp;gt;start: Start:&amp;gt;https://www.markdown-syntax.com
io=&amp;gt;inputoutput: verification
op=&amp;gt;operation: Your Operation
cond=&amp;gt;condition: Yes or No?
sub=&amp;gt;subroutine: Your Subroutine
e=&amp;gt;end
st-&amp;gt;io-&amp;gt;op-&amp;gt;cond
cond(yes)-&amp;gt;e
cond(no)-&amp;gt;sub-&amp;gt;io
` ``
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;时序图&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;```sequence
Alice-&amp;gt;Bob: Hello Bob, how are you ?
Note right of Bob: Bob thinks
Bob--&amp;gt;Alice: I am good thanks!
` ``
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;待办事宜列表&lt;/h2&gt;&lt;p&gt;使用带有 &lt;code&gt;[ ]&lt;/code&gt; 或 &lt;code&gt;[x]&lt;/code&gt; (未完成或已完成)项的列表语法撰写一个待办事宜列表, 例如:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;* [ ] 早起跑步
* [x] 看书
&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;contains-task-list&quot;&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled=&quot;&quot;/&gt; 早起跑步&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot; disabled=&quot;&quot;/&gt; 看书&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;reprint: &lt;a href=&quot;https://github.com/cdoco/markdown-syntax&quot;&gt;https://github.com/cdoco/markdown-syntax&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[eva_2.0.0]]></title><description><![CDATA[EVA 一款因作者需求而生的一款极简风谷歌扩展! 扩展商店地址 
 logo作者 Peter Qian(钱学毅) 功能 时间戳转换 图片转base64 base64转图片 字符串编解码(md5, base6…]]></description><link>https://www.abellee.cn/2021/05/01/eva_2.0.0/</link><guid isPermaLink="false">https://www.abellee.cn/2021/05/01/eva_2.0.0/</guid><pubDate>Sat, 01 May 2021 02:21:34 GMT</pubDate><content:encoded>&lt;h1&gt;&lt;a href=&quot;https://github.com/abelleeye/eva&quot;&gt;EVA&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一款因作者需求而生的一款极简风谷歌扩展!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/eva/dcjhacinagjbejleicefnpcnbeffhihi&quot;&gt;扩展商店地址&lt;/a&gt;
&lt;img src=&quot;https://github.com/abelleeye/eva/raw/master/image/eva_store_pic.png&quot; alt=&quot;商店&quot;/&gt;&lt;/p&gt;&lt;h1&gt;logo作者&lt;/h1&gt;&lt;p&gt;Peter Qian(钱学毅)&lt;/p&gt;&lt;h1&gt;功能&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;时间戳转换&lt;/li&gt;&lt;li&gt;图片转base64&lt;/li&gt;&lt;li&gt;base64转图片&lt;/li&gt;&lt;li&gt;字符串编解码(md5, base64)&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;使用方法&lt;/h1&gt;&lt;p&gt;直接点击扩展图标会弹出主页面&lt;/p&gt;&lt;h1&gt;页面截图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/abelleeye/eva/raw/master/image/eva_timestamp.png&quot; alt=&quot;页面截图&quot;/&gt;
&lt;img src=&quot;https://github.com/abelleeye/eva/raw/master/image/eva_image_base64.png&quot; alt=&quot;页面截图&quot;/&gt;
&lt;img src=&quot;https://github.com/abelleeye/eva/raw/master/image/eva_base64_image.png&quot; alt=&quot;页面截图&quot;/&gt;
&lt;img src=&quot;https://github.com/abelleeye/eva/raw/master/image/eva_code.png&quot; alt=&quot;页面截图&quot;/&gt;
&lt;img src=&quot;https://github.com/abelleeye/eva/raw/master/image/eva_json.png&quot; alt=&quot;页面截图&quot;/&gt;&lt;/p&gt;&lt;h1&gt;离线安装方法&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;yarn&lt;/code&gt; 安装依赖&lt;/li&gt;&lt;li&gt;&lt;code&gt;yarn dev&lt;/code&gt; 将编译好的 build 文件夹拖拽进谷歌浏览器中。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;你也可以直接在Releases直接下载最新的zip包，解压后直接将文件夹拖拽到chrome扩展页面。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[aliyun_ddns]]></title><description><![CDATA[DDNS aliyun ddns 基于openjdk11开发 Feature 多主域名解析 多主机记录解析 任务轮询间隔可配置 当解析主机记录未设置过，自动创建 异步线程同时解析 jsonip.com低延迟获取公网IP docker-compose…]]></description><link>https://www.abellee.cn/2021/03/08/aliyun_ddns/</link><guid isPermaLink="false">https://www.abellee.cn/2021/03/08/aliyun_ddns/</guid><pubDate>Mon, 08 Mar 2021 06:58:20 GMT</pubDate><content:encoded>&lt;h1&gt;&lt;a href=&quot;https://github.com/abelleeye/ddns&quot;&gt;DDNS&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;aliyun ddns&lt;/p&gt;&lt;p&gt;基于openjdk11开发&lt;/p&gt;&lt;h2&gt;Feature&lt;/h2&gt;&lt;ul class=&quot;contains-task-list&quot;&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot; disabled=&quot;&quot;/&gt; 多主域名解析&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot; disabled=&quot;&quot;/&gt; 多主机记录解析&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot; disabled=&quot;&quot;/&gt; 任务轮询间隔可配置&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot; disabled=&quot;&quot;/&gt; 当解析主机记录未设置过，自动创建&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot; disabled=&quot;&quot;/&gt; 异步线程同时解析&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot; disabled=&quot;&quot;/&gt; jsonip.com低延迟获取公网IP&lt;/li&gt;&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot; disabled=&quot;&quot;/&gt; docker-compose一键启动&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;安装&lt;/h2&gt;&lt;p&gt;部署目录结构:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;- ddns 部署目录
-- config.json
-- docker-compose.yml 
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&lt;li&gt;下载config.json, &lt;code&gt;wget https://raw.githubusercontent.com/abelleeye/ddns/main/config.json&lt;/code&gt;&lt;/li&gt;&lt;li&gt;下载docker-compose.yml, &lt;code&gt;wget https://raw.githubusercontent.com/abelleeye/ddns/main/docker-compose.yml&lt;/code&gt;&lt;/li&gt;&lt;li&gt;修改config.json配置文件&lt;/li&gt;&lt;li&gt;执行 &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;配置&lt;/h2&gt;&lt;p&gt;accessKeyId 和 secret 获取方式： 阿里云 -&amp;gt; 控制台 -&amp;gt; 右上角头像 -&amp;gt; AccessKey 管理&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/40654.html&quot;&gt;可用区域&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-json5&quot;&gt;{
  &amp;quot;regionId&amp;quot;: &amp;quot;cn-hangzhou&amp;quot;,  //可用区域
  &amp;quot;accessKeyId&amp;quot;: &amp;quot;accessKeyId&amp;quot;, 
  &amp;quot;secret&amp;quot;: &amp;quot;secret&amp;quot;,  
  &amp;quot;interval&amp;quot;: 10000, // 毫秒
  &amp;quot;domains&amp;quot;: [
    {
      &amp;quot;domain&amp;quot;: &amp;quot;example.com&amp;quot;, // 主域名
      &amp;quot;rrKeyWords&amp;quot;: [
        {
          &amp;quot;rrKeyWord&amp;quot;: &amp;quot;pre&amp;quot;, // 主机记录 pre.example.com
          &amp;quot;type&amp;quot;: &amp;quot;A&amp;quot;
        },
        {
          &amp;quot;rrKeyWord&amp;quot;: &amp;quot;example&amp;quot;,
          &amp;quot;type&amp;quot;: &amp;quot;A&amp;quot;
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[2021_新年_新诗]]></title><description><![CDATA[赋汇唔，言透卷。
唔言案，由光散。
案由颂，春风泛。
颂春赋，汇唔言。]]></description><link>https://www.abellee.cn/2021/02/14/2021_新年_新诗/</link><guid isPermaLink="false">https://www.abellee.cn/2021/02/14/2021_新年_新诗/</guid><pubDate>Sun, 14 Feb 2021 18:16:20 GMT</pubDate><content:encoded>&lt;p&gt;赋汇唔，言透卷。
唔言案，由光散。
案由颂，春风泛。
颂春赋，汇唔言。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[无言]]></title><description><![CDATA[合意亦无言，张亦似无声。
水意亦无然，酒亦似无味。]]></description><link>https://www.abellee.cn/2020/10/10/无言/</link><guid isPermaLink="false">https://www.abellee.cn/2020/10/10/无言/</guid><pubDate>Sat, 10 Oct 2020 03:23:00 GMT</pubDate><content:encoded>&lt;p&gt;合意亦无言，张亦似无声。
水意亦无然，酒亦似无味。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Minecraft_skin_abel]]></title><description><![CDATA[自制皮肤, 已上传官网, 转载请注明出处. 皮肤名字: Abel 展示:
 皮肤文件:
]]></description><link>https://www.abellee.cn/2020/06/26/Minecraft-skin-abel/</link><guid isPermaLink="false">https://www.abellee.cn/2020/06/26/Minecraft-skin-abel/</guid><pubDate>Fri, 26 Jun 2020 15:23:41 GMT</pubDate><content:encoded>&lt;p&gt;自制皮肤, 已上传官网, 转载请注明出处.&lt;/p&gt;&lt;p&gt;皮肤名字: Abel&lt;/p&gt;&lt;p&gt;展示:
&lt;img src=&quot;https://i.loli.net/2021/05/01/GXVEC3sj62TDQSt.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;皮肤文件:
&lt;img src=&quot;https://i.loli.net/2021/05/01/ovZECwc9p14kzPi.png&quot;/&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[通过两点获取全部路径(string) && Return all paths from a given source to a destination(string)]]></title><description><![CDATA[参考:  https://www.geeksforgeeks.org/find-paths-given-source-destination/]]></description><link>https://www.abellee.cn/2020/06/16/通过两点获取全部路径/</link><guid isPermaLink="false">https://www.abellee.cn/2020/06/16/通过两点获取全部路径/</guid><pubDate>Tue, 16 Jun 2020 17:50:00 GMT</pubDate><content:encoded>&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// A directed graph using 
// adjacency map representation
public class Graph {

    // No. of vertices in graph 
    private String s;

    // adjacency list  
    private Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; adjMap;

    private List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; resultList;

    //Constructor
    public Graph(Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; nodeMap){
        if (Objects.isNull(nodeMap)) {
            throw new NullPointerException(&amp;quot;node map is not be null!&amp;quot;);
        }
        this.adjMap = nodeMap;
        this.resultList = new ArrayList&amp;lt;&amp;gt;();
    }

    // Get all paths from
    // &amp;#x27;s&amp;#x27; to &amp;#x27;d&amp;#x27; 
    public List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; getAllPaths(String s, String d) {
        if (Objects.isNull(s) || Objects.isNull(d)) {
            throw new NullPointerException(&amp;quot;source or destination must not be null&amp;quot;);
        }

        if (Objects.isNull(this.s)) {
            this.s = s;
        }

        Map&amp;lt;String, Boolean&amp;gt; isVisited = new HashMap&amp;lt;&amp;gt;(adjMap.size());
        List&amp;lt;String&amp;gt; pathList = new ArrayList&amp;lt;&amp;gt;();

        // add source to pathList
        pathList.add(s);

        // Call recursive utility
        getAllPathsUtil(s, d, isVisited, pathList);

        return this.resultList;
    }

    // A recursive function to print 
    // all paths from &amp;#x27;u&amp;#x27; to &amp;#x27;d&amp;#x27;. 
    // isVisited map keeps track of
    // vertices in current path. 
    // localPathList&amp;lt;&amp;gt; stores actual 
    // vertices in the current path 
    private void getAllPathsUtil(String u, String d,
                                   Map&amp;lt;String, Boolean&amp;gt; isVisited,
                                   List&amp;lt;String&amp;gt; localPathList) {

        // Mark the current node
        isVisited.put(u, Boolean.TRUE);

        if (u.equals(d)) {
            resultList.add(new ArrayList&amp;lt;&amp;gt;(localPathList));
            System.out.println(localPathList); // print one finished path
            // if match found then no need to traverse more till depth 
            isVisited.put(u, Boolean.FALSE);
            return;
        }

        // Recur for all the vertices 
        // adjacent to current vertex
        List&amp;lt;String&amp;gt; vertices = adjMap.get(u);

        for (String i : vertices) {
            if (Objects.isNull(isVisited.get(i)) || !isVisited.get(i)) {
                // store current node  
                // in path list
                localPathList.add(i);
                getAllPathsUtil(i, d, isVisited, localPathList);

                // remove current node 
                // in path list
                localPathList.remove(i);
            }
        }

        // Mark the current node
        isVisited.put(u, Boolean.FALSE);
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Demo {
    public static void main(String[] args) {
        Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; nodeMap = new HashMap&amp;lt;&amp;gt;();
        nodeMap.put(&amp;quot;0&amp;quot;, Arrays.asList(&amp;quot;1&amp;quot;, &amp;quot;3&amp;quot;));
        nodeMap.put(&amp;quot;1&amp;quot;, Arrays.asList(&amp;quot;0&amp;quot;, &amp;quot;2&amp;quot;));
        nodeMap.put(&amp;quot;2&amp;quot;, Arrays.asList(&amp;quot;1&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;));
        nodeMap.put(&amp;quot;3&amp;quot;, Arrays.asList(&amp;quot;0&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;4&amp;quot;));
        nodeMap.put(&amp;quot;4&amp;quot;, Arrays.asList(&amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;));

        List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; allPaths = new Graph(nodeMap).getAllPaths(&amp;quot;2&amp;quot;, &amp;quot;4&amp;quot;);
        System.out.println(allPaths); // print [[2, 1, 0, 3, 4], [2, 3, 4], [2, 4]]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;参考: &lt;a href=&quot;https://www.geeksforgeeks.org/find-paths-given-source-destination/&quot;&gt;https://www.geeksforgeeks.org/find-paths-given-source-destination/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[二零一九年八月下旬]]></title><description><![CDATA[二零一九年八月下旬 空雀楼台罔自若，独留空人悬闲枝。
枯流滴近终无用，映不出零星背月。]]></description><link>https://www.abellee.cn/2019/08/22/二零一九年八月下旬/</link><guid isPermaLink="false">https://www.abellee.cn/2019/08/22/二零一九年八月下旬/</guid><pubDate>Thu, 22 Aug 2019 09:55:25 GMT</pubDate><content:encoded>&lt;p&gt;二零一九年八月下旬&lt;/p&gt;&lt;p&gt;空雀楼台罔自若，独留空人悬闲枝。
枯流滴近终无用，映不出零星背月。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[iTerm2常用快捷键]]></title><description><![CDATA[标签 分屏 其它]]></description><link>https://www.abellee.cn/2019/07/24/iTerm2常用快捷键/</link><guid isPermaLink="false">https://www.abellee.cn/2019/07/24/iTerm2常用快捷键/</guid><pubDate>Wed, 24 Jul 2019 09:28:56 GMT</pubDate><content:encoded>&lt;h2&gt;标签&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;新建标签：command + t

关闭标签：command + w

切换标签：command + 数字 command + 左右方向键

切换全屏：command + enter

查找：command + f
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;分屏&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;垂直分屏：command + d

水平分屏：command + shift + d

切换屏幕：command + option + 方向键 command + [ 或 command + ]

查看历史命令：command + ;

查看剪贴板历史：command + shift + h
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;其它&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;清除当前行：ctrl + u

到行首：ctrl + a

到行尾：ctrl + e

前进后退：ctrl + f/b (相当于左右方向键)

上一条命令：ctrl + p

搜索命令历史：ctrl + r

删除当前光标的字符：ctrl + d

删除光标之前的字符：ctrl + h

删除光标之前的单词：ctrl + w

删除到文本末尾：ctrl + k

交换光标处文本：ctrl + t

清屏1：command + r

清屏2：ctrl + l

自带有哪些很实用的功能/快捷键

⌘ + 数字在各 tab 标签直接来回切换

选择即复制 + 鼠标中键粘贴，这个很实用

⌘ + f 所查找的内容会被自动复制

⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏

⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏

ctrl + u 清空当前行，无论光标在什么位置

输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令

⌘ + shift + h 会列出剪切板历史
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[弱冠赋]]></title><description><![CDATA[人衰花谢亦流年，春来物新不见先。
欲世知命忘回首，苍苍沧里获苍苍。]]></description><link>https://www.abellee.cn/2019/05/18/弱冠赋/</link><guid isPermaLink="false">https://www.abellee.cn/2019/05/18/弱冠赋/</guid><pubDate>Sat, 18 May 2019 00:17:17 GMT</pubDate><content:encoded>&lt;p&gt;人衰花谢亦流年，春来物新不见先。
欲世知命忘回首，苍苍沧里获苍苍。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[线程安全延迟初始化方案]]></title><description><![CDATA[Initialization On Demand Holder idiom DoubleCheckedLocking…]]></description><link>https://www.abellee.cn/2019/04/07/线程安全延迟初始化方案/</link><guid isPermaLink="false">https://www.abellee.cn/2019/04/07/线程安全延迟初始化方案/</guid><pubDate>Sun, 07 Apr 2019 09:43:38 GMT</pubDate><content:encoded>&lt;h2&gt;Initialization On Demand Holder idiom&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class InstanceFactory { 
    private static class InstanceHolder {
        public static Instance instance = new Instance(); 
    } public static Instance getInstance() {
        return InstanceHolder.instance ;　　// 这里将导致InstanceHolder类被初始化  
    } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;DoubleCheckedLocking&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class SafeDoubleCheckedLocking {

    private volatile static Instance instance; 

    public static Instance getInstance() { 
        if (instance == null) { 
            synchronized (SafeDoubleCheckedLocking.class) { 
                if (instance == null) instance = new Instance(); // instance为volatile，现在没问题了 
            } 
        } 
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;结语&lt;/h2&gt;&lt;p&gt;字段延迟初始化降低了初始化类或创建实例的开销，但增加了访问被延迟初始化的字段 的开销。在大多数时候，正常的初始化要优于延迟初始化。如果确实需要对实例字段使用线程 安全的延迟初始化，请使用上面介绍的基于volatile的延迟初始化的方案；如果确实需要对静 态字段使用线程安全的延迟初始化，请使用上面介绍的基于类初始化的方案。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[happens-before规则]]></title><description><![CDATA[《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则。 1）程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。…]]></description><link>https://www.abellee.cn/2019/04/07/happens-before规则/</link><guid isPermaLink="false">https://www.abellee.cn/2019/04/07/happens-before规则/</guid><pubDate>Sun, 07 Apr 2019 09:27:35 GMT</pubDate><content:encoded>&lt;p&gt;《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则。&lt;/p&gt;&lt;p&gt;1）程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。&lt;/p&gt;&lt;p&gt;2）监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。&lt;/p&gt;&lt;p&gt;3）volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的 读。&lt;/p&gt;&lt;p&gt;4）传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。&lt;/p&gt;&lt;p&gt;5）start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的 ThreadB.start()操作happens-before于线程B中的任意操作。&lt;/p&gt;&lt;p&gt;6）join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作 happens-before于线程A从ThreadB.join()操作成功返回。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[响了许久的花和炮]]></title><description><![CDATA[2019年1月1日记 响了许久的炮和花   春花谢，谢走花人怨。 花人愿，愿作梨花圈。 梨花眷，眷那故人念。 故人唸，唸不完春花。]]></description><link>https://www.abellee.cn/2019/01/01/响了许久的花和炮/</link><guid isPermaLink="false">https://www.abellee.cn/2019/01/01/响了许久的花和炮/</guid><pubDate>Tue, 01 Jan 2019 09:26:00 GMT</pubDate><content:encoded>&lt;p&gt;2019年1月1日记&lt;br/&gt;
响了许久的炮和花  &lt;/p&gt;&lt;p&gt;春花谢，谢走花人怨。&lt;br/&gt;
花人愿，愿作梨花圈。&lt;br/&gt;
梨花眷，眷那故人念。&lt;br/&gt;
故人唸，唸不完春花。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[静态代理和动态代理]]></title><description><![CDATA[静态代理 静态代理很简单，举个例子： 我们日常生活中，都要找人解决各种各样问题。 我们先不管到底解决的是什么问题，我们同意写成do…]]></description><link>https://www.abellee.cn/2018/12/23/静态代理和动态代理/</link><guid isPermaLink="false">https://www.abellee.cn/2018/12/23/静态代理和动态代理/</guid><pubDate>Sun, 23 Dec 2018 09:24:13 GMT</pubDate><content:encoded>&lt;h1&gt;静态代理&lt;/h1&gt;&lt;p&gt;静态代理很简单，举个例子：&lt;/p&gt;&lt;p&gt;我们日常生活中，都要找人解决各种各样问题。&lt;/p&gt;&lt;p&gt;我们先不管到底解决的是什么问题，我们同意写成do()。&lt;/p&gt;&lt;p&gt;静态代理的一个重要的地方就是需要固定的接口。&lt;/p&gt;&lt;p&gt;大体流程是这样的：&lt;/p&gt;&lt;p&gt;平时我们找人做事，我们需要直接找到这个人，但是个人的经历非常有限，而且能做的事情非常少。&lt;/p&gt;&lt;p&gt;比如我们在这个人的接口上面定义了他能做某件事，所以这个人就只能做某件事，为什么不能干别的，因为我们没定义。因为定义了，就违反了OOP编程的概念。&lt;/p&gt;&lt;p&gt;我再把这个例子具体一点，你也许就能明白许多。&lt;/p&gt;&lt;p&gt;比如我们定义一个Person接口，它的唯一方法是do();&lt;br/&gt;
再定义一个实现类，歌手，然后实现这个方法，我们告诉这个歌手，你只能唱歌。&lt;/p&gt;&lt;p&gt;这个时候，当我们想调用歌手的时候。发现歌手很忙。而且他只能唱歌。毕竟术业有专攻。这个时候我们怎么办。&lt;/p&gt;&lt;p&gt;我们需要给这个歌手一个经纪人。我们这里称为代理类。&lt;/p&gt;&lt;p&gt;然后我们就以后不直接找这个歌手了，我们直接找这个经纪人，也就是这个代理类，歌手负责唱歌，代理类负责做所有其它的事情。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface Person{  
  
 void do();  
}  
  
  
  
public class Singer implements Person{  
  
 @Override  
 public void do(){  
 sout(&amp;quot;我能唱歌！&amp;quot;);  
 }  
}  
  
  
public class PersonProxy{  
  
 private Person person;  
  
 public PersonProxy(Person person){  
 this.person = person  
 }  
  
 // 加这么多 o 就是想表面，名字不是一样的。但是do很恰当。  
 public void dooooo(){  
 // do something!  
  
 person.do();  
  
 // do something!  
 }  
}  
  
  
public class main{  
 psvm{  
 PersonProxy personproxy = new PersonProxy(new Singer);  
  
 personproxy.dooooo();  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到现在你懂了吗？ 当然在代码里面是不能用 do 这个关键字的。&lt;/p&gt;&lt;p&gt;当我们想用 歌手的时候就传歌手，就很自由。&lt;/p&gt;&lt;p&gt;静态代理对于一个 经常敲代码的人来说， 即使没有学过，也会很自然的写出来，但是静态代理的缺点就是，很难扩展。&lt;/p&gt;&lt;p&gt;比如：我们要在歌手唱歌之前和后，不断变换业务，那会怎么样？你是选择做超多的代理类还是？如果要复用呢？你又如何做？&lt;/p&gt;&lt;h1&gt;动态代理&lt;/h1&gt;&lt;p&gt;使用动态代理，我们实现一个接口。&lt;/p&gt;&lt;p&gt;InvocationHandler 顾名思义： 调用处理器&lt;/p&gt;&lt;p&gt;流程控制都由它处理。&lt;/p&gt;&lt;p&gt;它长这样：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface InvocationHandler {  
  
 public Object invoke(Object proxy, Method method, Object\[\] args)  
 throws Throwable;  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;记得刚学动态代理的时候，反射和设计模式，总不能很好的互相适应，每次都感觉摸不到知识。后来通过不断的看，总算把它掌握了。&lt;/p&gt;&lt;p&gt;参数的名字：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;proxy：调用此方法的代理实例&lt;/li&gt;&lt;li&gt;method：就是反射那个Method类，在这里就是正在调用的方法&lt;/li&gt;&lt;li&gt;args：这个是在这个方法内调用方法时方法的参数&lt;/li&gt;&lt;li&gt;返回值：这个返回值，真的是，看了好多篇博文，大家真的是非常默契，点到即止，一到这里就没了。所以我特地查了API，找到了答案&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;原文是：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;the value to return from the method invocation on the proxy instance. If the declared return type of the interface method is a primitive type, then the value returned by this method must be an instance of the corresponding primitive wrapper class; otherwise, it must be a type assignable to the declared return type. If the value returned by this method is {@code null} and the interface method’s return type is primitive, then a @code NullPointerException will be thrown by the method invocation on the proxy instance. If the value returned by this method is otherwise not compatible with the interface method’s declared return type as described above,a @code ClassCastException will be thrown by the method invocation on the proxy instance.

中文意思是：从代理实例上的方法调用返回的值。如果接口方法声明的返回类型是原始类型，那么该方法返回的值必须是对应原始包装类的实例;否则，它必须是可分配给声明的返回类型的类型。如果此方法返回的值为{@code null}，且接口方法的返回类型为原始类型，则方法调用将在代理实例上抛出{@code NullPointerException}。如果此方法返回的值与上述接口方法声明的返回类型不兼容，则方法调用将在代理实例上抛出{@code ClassCastException}。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;懂了没？&lt;/p&gt;&lt;p&gt;然后我们还需要一个 Proxy 类&lt;/p&gt;&lt;p&gt;这个类的作用就是：动态生成代理类和对象&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static Object newProxyInstance(ClassLoader loader,  
 Class&amp;lt;?&amp;gt; [] interfaces,  
 InvocationHandler h)  
 throws IllegalArgumentException  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个类 需要传入 类加载器，要操作的接口，和 你定义的调用处理器。 并返回一个 代理对象。&lt;/p&gt;&lt;p&gt;来，我们直接上代码：&lt;br/&gt;
我们把do改成doSomething，你们可以直接复制代码进行测试，我推荐这么做，因为动态代理，稍难理解。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface Person{  
  
 void doSomething();  
}  
  
  
  
public class Singer implements Person{  
  
 @Override  
 public void doSomething(){  
 sout(&amp;quot;我能唱歌！&amp;quot;);  
 }  
}  
  
// 注意这里我不采用名字 PersonProxy，用 PersonHandler  
  
public class PersonHandler implements InvocationHandler{  
  
 private Person person;  
  
 public PersonProxy(Person person){  
 this.person = person  
 }  
  
 // 我们会实现这个方法  
 @Override  
 public Object invoke(Object proxy, Method method, Object\[\] args) {  
    
 // 这个方法就是控制流程了，你可以在这里做一些事情。  
 // do something  
  
 //这个方法就是被代理的类内的方法。  
 method.invoke(person, args);  
  
 // do something  
  
 // 因为原始的方法没有返回值，所以我们这里返回null  
 return null;  
 }  
    
}  
  
  
public class Main{  
    
 psvm{  
 // 把要处理的对象搞进来  
 Singer singer = new Singer();  
  
 // 此类的处理器。多态真的太棒了。然后把要处理的对象传进去。  
 PersonHandler personHandler = new PersonHandler(singer);  
  
 // 这里我们会先做个代理对象  
 // 第一个参数：类加载器，这里我们随便选个默认加载器  
 // 第二个参数：处理类的接口，这里就是 Person  
 // 第三个参数：我们定义的处理器，这里就是 personHandler   
 Person proxy = (Person)Peoxy.newProxyInstance(  
 ClassLoader.getSystemClassLoader(),  
 new Class {Person.class},  
 personHandler   
 )  
  
 // 这里我们就可以调用包裹了Singer所有方法的代理类，  
 // 这个代理类 可以 调用 Singer 的所有方法，  
 // 因为我们就定义了一个 doSomething，所以我们就调用了一个方法，  
 // 但是这个方法就是：上面所谓的流程。  
 // 你可以在 handler 里面，进行在这个方法上面下面干你想做的事情。  
 // 这个就是动态代理了。  
 proxy.doSomething();  
    
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;他们最大的区别就是，静态代理只代理一个类，&lt;br/&gt;
而动态代理可以代理，一个接口下的多个类。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[spring学习笔记]]></title><description><![CDATA[介绍 作为一名java web选手，学java就有可能做web，做web就必须用框架，学框架当然就少不了Spring Framework。作为一个可以整合其它几乎所有主流框架的Spring…]]></description><link>https://www.abellee.cn/2018/12/20/spring学习笔记/</link><guid isPermaLink="false">https://www.abellee.cn/2018/12/20/spring学习笔记/</guid><pubDate>Thu, 20 Dec 2018 09:03:59 GMT</pubDate><content:encoded>&lt;h1&gt;介绍&lt;/h1&gt;&lt;p&gt;作为一名java web选手，学java就有可能做web，做web就必须用框架，学框架当然就少不了Spring Framework。作为一个可以整合其它几乎所有主流框架的Spring，我最近有特别大的心思，要将它复习一遍，顺便深入一点。其实我并不是爱写笔记的人，因为，即使我写了，我也很少回来看，但。。。我有分享精神，我希望有缘看到这篇笔记的人，可以从中收益，这是我的愿景。&lt;/p&gt;&lt;p&gt;其实，我是看了好多遍都没能深入理解，所以只好写下来，哈哈。&lt;/p&gt;&lt;p&gt;本人的文章断句及思想跳跃很大，所以请准备以分段式思维来阅读。&lt;/p&gt;&lt;p&gt;还有，我个人喜欢用的方式会详解，其它的会提及甚至略过。&lt;/p&gt;&lt;p&gt;soooo，Let’s go!&lt;/p&gt;&lt;h1&gt;Spring简介&lt;/h1&gt;&lt;h2&gt;Ioc容器和beans&lt;/h2&gt;&lt;h3&gt;Ioc的介绍&lt;/h3&gt;&lt;p&gt;IoC容器是Spring框架中的重中之重，虽然每天都在用，但我一直没有好好深入的理解它。所以要认真看。我认为，想要学习一门技术，首先要理解作者为什么做这个技术，它有什么思想？它的优点是什么等等。我就像个十万个为什么的小学生，干什么都喜欢问问问，做事却没那么棒！哈哈！&lt;/p&gt;&lt;p&gt;IoC这个词的中文意思叫控制反转。也称为DI，中文翻译为依赖注入。可能有人会问，那IoC和DI到底是什么？或者它们是什么关系？我们带着这样的问题，去理解这个该死的又非常有魅力的IoC容器。&lt;/p&gt;&lt;p&gt;IoC是什么？IoC是一个概念，是一种思想，是一种设计模式，但是这个名字很难让人理解，所以DI是它的新名字，上文提到的依赖注入。&lt;/p&gt;&lt;p&gt;我更喜欢的是把Spring的IoC容器称为一种标准，一个java大对象，使地球上的程序员都进入了同一个生态。提到设计模式，我最喜欢设计了，但是设计经验烂的要死，但是设计这个东西很酷，最喜欢创造东西时候的感觉了，很棒。&lt;/p&gt;&lt;p&gt;DI的设计思想为，举个例子：平时你写代码的时候，是不是你自己要去new一个对象？每次用，代码就要每次new，就像能突然new出来一个老婆一样，new，new，new。虽然程序运行的时候代码已经写好了，不用你自己亲自上去new，但设计你得自己设计对象和对象之间的关系。另外对象都有依赖关系，比如：老师和学校，老师和学生，更甚者，老师和学校的员工信息，老师要用教材等等。&lt;/p&gt;&lt;p&gt;具体一点：老师在学校上课，老师要依赖学校，老师教学生，学生要依赖老师，教材也要依赖老师，老师要发工资，老师要依赖于员工信息表等等。这种依赖关系在小项目里要头疼一下，在大项目里，这种依赖关系的设计是不可想象的。&lt;/p&gt;&lt;p&gt;并且最主要的一点，每个企业的J2EE的Web控制器体系各不相同，如何将控制器与数据库结合到一起，控制器的复用，都是问题，可能在自身企业中是个不太大的问题，但是也造成了在控制器体系中浪费大量的人力财力，我认为最浪费的莫过于，在整个java web 生态圈中，浪费的可不是一点半点，加一起浪费的简直可怕。&lt;/p&gt;&lt;p&gt;但是DI却不同，看到IoC的这个新名字就知道，“依赖”注入。“依赖”是重点，依赖就是对象和对象之间的依赖关系，那什么是依赖注入呢？&lt;/p&gt;&lt;p&gt;通过Spring官方文档，我们可以了解到，DI是个过程，这个过程就是：对象有它们之间的依赖关系，但是只能通过构造器函数，工厂方法参数，然后在构造器函数或者工厂方法函数返回的对象实例上面设置属性。最后IoC容器在创建Bean的时候，依次注入这些对象实例。因为这个过程和我们平时new对象的传统方式完全相反，所以称为IoC控制的反转。又因为bean本身通过本身的构造器来控制自身的依赖关系，所以你理解了“依赖注入”了吗？&lt;/p&gt;&lt;p&gt;另外还要说句重点，&lt;code&gt;org.springframework.beans&lt;/code&gt;，&lt;code&gt;org.springframework.context&lt;/code&gt;这两个包就是IoC容器的基础。既然看到了beans，那我们讨论讨论bean吧。&lt;/p&gt;&lt;h3&gt;beans的介绍&lt;/h3&gt;&lt;p&gt;上面提到了bean这个概念，我对bean的理解也不够深入，不过通过继续阅读，我也对bean也深入了那么一点点，让我们继续。&lt;/p&gt;&lt;p&gt;传统的bean是什么？&lt;/p&gt;&lt;p&gt;一句话概括bean就是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;声明 private 成员变量&lt;/li&gt;&lt;li&gt;setter getter 方法&lt;/li&gt;&lt;li&gt;声明 默认构造器&lt;/li&gt;&lt;li&gt;实现 Serializbale 接口&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接下来我们讨论的是被Spring IoC容器管理的bean的概念。&lt;/p&gt;&lt;p&gt;在Spring中，bean就是应用程序中的螺丝钉，没它不行，但它的个体不重要，就像人一样，我们每个人都是如尘埃，但是没有每个人，这个世界就不能称为我们现在所谓的这个世界。&lt;/p&gt;&lt;p&gt;bean在Spring中被IoC容器管理着，bean就是一个个对象。bean的一生不断被IoC容器实例化，管理，互相拼凑着。而IoC容器中的bean的依赖关系是在配置类或者XML（其它配置方法我也不知道了）这样的元数据文件中配置的。&lt;/p&gt;&lt;p&gt;可能大家有这样的疑问，为什么都是类，如上面的，为什么称配置类为元数据文件啊？因为，比如：世界都是由分子组成的，什么夸克，弦就不讨论了，我只是举个例子。我们的java类就相当于分子，因为构造不同用途不同，我们要将其分类，然后组装我们更为强大的应用，顺便说一句，我爱计算机。。。。&lt;/p&gt;&lt;h2&gt;IOC容器&lt;/h2&gt;&lt;p&gt;为什么题目的名字为容器一呢？因为我也不知道我接下来该如何分类，会写多少，所以这样我认为是最恰当的分类了。&lt;/p&gt;&lt;p&gt;谈起Spring的IoC容器，第一反应就应该是&lt;br/&gt;
&lt;code&gt;org.springframework.context.ApplicationContext&lt;/code&gt;&lt;br/&gt;
这个接口，这个接口代表的就是IoC容器，负责上文提到的，实例化、组装、配置bean。怎么做这一套神奇功夫的操作？就是通过上文提到的，元数据配置方法，即XML或者配置类。本人偏爱配置类，XML却不怎么会写。正因为本人的偏爱，所以这篇笔记几乎都会以配置类的方法来论述Spring。但也是稍微尽可能提及几句XML。&lt;/p&gt;&lt;p&gt;这个接口有好多实现类，因为我喜欢用注解，所以我通常会创建‘AnootationConfigAplicationContext’这个实现来拿bean，它是继承于‘GenericApplicationContext’这个类。如果你喜欢XML你也可以用‘ClasspathXMlAplicationContext’这个实现类来拿bean。‘ClasspathXMlAplicationContext’和‘GenericApplicationContext’都是继承于‘AbstractApplicationContext’这个抽象类。&lt;br/&gt;
‘AnootationConfigAplicationContext’实现了‘AnnotationConfigRegistry’这个抽象类，&lt;br/&gt;
‘GenericApplicationContext’实现了‘BeanDefinitionRegistry’这个抽象类，&lt;br/&gt;
‘ClassPathXmlApplicationContext’它撒鬼子都没实现。&lt;/p&gt;&lt;p&gt;因为语言描述可能逻辑难以理解下面的是语句：&lt;br/&gt;
&lt;code&gt;public class AnnotationConfigApplicationContext extends GenericApplicationContext implements AnnotationConfigRegistry&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;public class ClassPathXmlApplicationContext extends AbstractXmlApplicationContext&lt;/code&gt;&lt;br/&gt;
&lt;code&gt;public class GenericApplicationContext extends AbstractApplicationContext implements BeanDefinitionRegistry&lt;/code&gt;&lt;/p&gt;&lt;p&gt;原理简单表达就是：你的java类进入容器，你的配置（注解或者XML）进入容器，然后他们相结合，最后给调用者（浏览器或者其它什么的）。&lt;/p&gt;&lt;h3&gt;@Required&lt;/h3&gt;&lt;p&gt;此注解标注在setter方法上。&lt;/p&gt;&lt;p&gt;此注解的作用为，当你调用此类时，必须显式设置此属性，否则会报‘BeanInitializationException’异常。我是从来没用过到这个注解，Spring推荐在类init方法中，进行此属性的断言或者什么的，进行强制赋值，以避免报‘NullPointerException’这个让人呕吐的异常。&lt;/p&gt;&lt;h3&gt;@Autowired&lt;/h3&gt;&lt;p&gt;这个注解很重要，先说名字，自动装配。&lt;/p&gt;&lt;p&gt;它有个参数 required ，意思是：声明是否需要带注释的依赖项？默认为：true&lt;/p&gt;&lt;p&gt;这个注解天天用，很好用，各种姿势都很好。&lt;/p&gt;&lt;p&gt;大概意思就是：当标注了这个注解，你就不需要手动指定被依赖项的依赖项，它会自动装配进你的被依赖项。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;此注解标注在构造器上&lt;/li&gt;&lt;li&gt;可以用于setter方法&lt;/li&gt;&lt;li&gt;成员变量上&lt;/li&gt;&lt;li&gt;配置方法上&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;标记完，就表示这些参数会由Spring的依赖注入工具自动装配。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;当标注在构造器上时，表示当该构造器作为一个Spring bean使用时，进行自动装配。如果多个非必需构造函数声明注释此注解，则它们将被视为自动装配的候选者。将选择具有最大数量‘依赖关系’的构造函数，这些构造函数可以通过匹配Spring容器中的bean来满足。如果不能满足任何候选者，则将使用主要/默认构造函数（如果存在）。重点：如果一个类一开始只声明一个构造函数，它将始终被使用，即使没有注释。还有：带注释的构造函数不必是public。&lt;/li&gt;&lt;li&gt;当标注在有任意名字和任意数量的参数方法上时，每个参数都将使用Spring容器中的与其相匹配bean来进行自动装配，上面说的‘setter’其实就是这种配置方式中的一种方式而已，这种配置方法同样不必非是public。&lt;/li&gt;&lt;li&gt;在 容器 也就是collection或者Map的依赖类型中，IoC容器会自动装配他们声明的值的类型所匹配的所有的bean，正因如此，所以，必须将Map的key声明为String类型。这样才能成功解析为相应的bean名字。神不神奇？&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;总结：因为 ‘注入’ 是通过 ‘BeanPostProcessor’（Bean后置处理器）这个类来执行的，所以不能 自动装配 ‘BeanPostProcessor’或‘BeanFactoryPostProcessor’这样的类。&lt;/p&gt;&lt;h3&gt;@Qualifier&lt;/h3&gt;&lt;p&gt;这个注解可以说是 @Autowired 的扩展注释&lt;/p&gt;&lt;p&gt;可能通过自动装配的时候可能导致会遇到多个候选人的情况，比如：你定义了两个基于一个类的相同bean，但是当装配的时候，IoC容器却不知道装配哪个好，这时候你就要用 @Qualifier 这个注解标注在依赖参数上来区分注入哪个bean。格式：&lt;code&gt;@Qualifier(&amp;quot;apple&amp;quot;)&lt;/code&gt; 你可以标注在成员变量上，也可以标注在 构造器或方法的某个参数上面。当然 声明 bean 的时候你也要给他们添加 qualifier 属性才可以。 相互相成的东西。&lt;/p&gt;&lt;p&gt;这个注解我用过几次，那几次确实歧议很大，不得不用。&lt;/p&gt;&lt;p&gt;还有，@Qualifier 还有自定义限定符 扩展功能，我不用，所以不讨论。&lt;/p&gt;&lt;p&gt;ps：如果你打算用名称（就像是别名）这个方式来注入，推荐使用 JSR-250 的 @Resource 这个注释，因为我不爱用这个注释，所以我进行关于它的论述。&lt;/p&gt;&lt;h2&gt;基于java的容器配置&lt;/h2&gt;&lt;p&gt;说完了 @Autowired 这个很主要的注解，我们终于可以开始讨论 “基于java的容器配置”&lt;/p&gt;&lt;h3&gt;@Bean和@Configuration&lt;/h3&gt;&lt;p&gt;这两个注解不能分开说，他们息息相关，所以只好一起说了。&lt;/p&gt;&lt;p&gt;先说注意的地方：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;当@Bean注解在没有标注@Configuration的类里面时，比如：@Bean标注在一个@Component类内或者啥也没标注的类里面时，这些被@Bean标注的bean就处于‘lite’模式，我喜欢称其为“弱B”模式。&lt;/li&gt;&lt;li&gt;与在@Configuration类内的bean不同，标注在@Configuration内的@Bean被称为‘full’模式，我喜欢称其为“猛男”模式。不是不喜欢打英文，是互相切换太费劲。处于‘弱B’模式下的标注@Bean的方法不能声明bean之间的依赖关系，即：弱逼@Bean不能调用其它@Bean，简单暴力易懂。&lt;/li&gt;&lt;li&gt;Spring说了，只有在@Configuration下的@Bean才能称为猛男，避免”弱B“&lt;br/&gt;@Bean多次调用其它方法导致难以追踪的错误。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Spring基于java配置的核心工件（左膀右臂）就是 @Bean和 @Configuration， @Configuration注释类，@Bean注释方法。分工明确，XX搭配，干货不累，@Bean瞬间变猛男。&lt;/p&gt;&lt;p&gt;顺嘴提一句，@Bean 和 XMl 配置中的 &lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt; 标签一样一样的。&lt;br/&gt;
然后忘记说了，bean的名字就是方法名。这也是我喜欢的方式。因为我喜欢这个共识：约定大于配置。&lt;/p&gt;&lt;h3&gt;AnnotationConfigApplicationContext&lt;/h3&gt;&lt;p&gt;上文提过，AnnotationConfigApplicationContext这个类是ApplicationContext这个抽象类中的其中之一的实现类，看名字就知道是管理注解方面的。&lt;/p&gt;&lt;p&gt;这个Context不仅可以接受被@Configuration标注的类，还可以接受被@Component标注的类。&lt;/p&gt;&lt;p&gt;当遇到@Configuration这种情况时，无论时@Configuration这个类还是被@Bean标注的方法都会被注册为bean，&lt;/p&gt;&lt;p&gt;当遇到@Component这种情况时，这个类被注册为一个bean，然后通过@Autowired获得必要的元数据。&lt;/p&gt;&lt;h3&gt;拿bean&lt;/h3&gt;&lt;p&gt;然后我们就可以这样拿到bean&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static void  
 ApplicationContext ctx = new AnnotationConfigApplicationContext(MyService.class);  
 MyService myService = ctx.getBean(MyService.class);  
 myService.doStuff();  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;register()方法&lt;/h3&gt;&lt;p&gt;我们还可以用 register() 这个方法来 注册bean。&lt;br/&gt;
我还是第一次见到这样的写法，以前都没注意，mark下。&lt;br/&gt;
以前都是 new AnnotationConfigApplicationContext().register() 。 像这样的语法。&lt;br/&gt;
但是这样注册bean的方式，我本人不喜欢，也没用过。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static void main(String\[\] args) {  
 AnnotationConfigApplicationContext ctx = new  
 ctx.register(AppConfig.class, OtherConfig.class);  
 ctx.register(AdditionalConfig.class  
 ctx.refresh();  
 MyService myService = ctx.getBean(MyService.class  
 myService.doStuff();  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;scan(String…)方法&lt;/h3&gt;&lt;p&gt;你可以用这个方法来扫描bean，虽然我都是用注解&lt;/p&gt;&lt;pre&gt;&lt;code&gt;@ComponentScan(  
 excludeFilters = {@Filter(  
 type = FilterType.CUSTOM,  
 classes = {TypeExcludeFilter.class}  
), @Filter(  
 type = FilterType.CUSTOM,  
 classes = {AutoConfigurationExcludeFilter.class}  
)}  
)  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个String参数是包的名字，比如：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static void main(String\[\] args) {  
 AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();  
 ctx.scan(&amp;quot;com.acme&amp;quot;);  
 ctx.refresh();  
 MyService myService = ctx.getBean(MyService.class);  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;refresh()这个方法，我们先不讨论。&lt;br/&gt;
顺便说下，@Component这个注解是标注在@Configuration上面的。&lt;/p&gt;&lt;h3&gt;通过@Bean声明一个bean&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration  
public class AppConfig {  
  
 @Bean  
 public TransferService transferService() {  
 return new TransferServiceImpl();  
 }  
  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完了，easy，right？&lt;/p&gt;&lt;p&gt;bean名字就是 transferService 方法名&lt;br/&gt;
声明的bean类就是返回的 TransferServiceImpl&lt;/p&gt;&lt;h3&gt;bean的生命周期回调&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;你可以选择 JSR-250 里面的 @PostConstruct 构造器之后 和 @PreDestroy 回收前 两个注解，但是我不喜欢，但是面试的时候总有面试官将三种 声明周期函数 顺序啊什么的进行 考试，我认为很没必要，也很不喜欢别人问我这种问题。因为一个是java的，一个是spring的，谁会做四个回调函数呢？&lt;/li&gt;&lt;li&gt;如果一个bean继承了InitializingBean, DisposableBean, 或者 Lifecycle 接口， 这个bean就可以实现他们的方法 来进行生命周期回调。&lt;/li&gt;&lt;li&gt;这个是我 如果有 这方面的需求经常用的方式：init-method 和 destroy-method。&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Foo {  
 public void init() {  
 // initialization logic  
 }  
}  
  
public class Bar {  
 public void cleanup() {  
 // destruction logic  
 }  
}  
  
@Configuration  
public class AppConfig {  
 @Bean(initMethod = &amp;quot;init&amp;quot;)  
 public Foo foo() {  
 return new Foo();  
 }  
 @Bean(destroyMethod = &amp;quot;cleanup&amp;quot;)  
 public Bar bar() {  
 return new Bar();  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很方便也很让人懂是不是？&lt;/p&gt;&lt;p&gt;构造期间你也可以不用注释，直接调方法就行。我不推荐这样，因为这样很不规范。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration  
public class AppConfig {  
 @Bean  
 public Foo foo() {  
 Foo foo = new Foo();  
 foo.init();  
 return foo;  
 }  
  
 // ...  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;==========================&lt;/p&gt;&lt;p&gt;这个是实现Spring InitializingBean 和DisposableBean接口的方式。&lt;/p&gt;&lt;p&gt;容器调用afterPropertiesSet()前者，destroy()后者允许bean在初始化和销毁​​bean时执行某些操作。&lt;/p&gt;&lt;p&gt;这是例子代码：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class AnotherExampleBean implements DisposableBean {  
  
 public void destroy() {  
 // do some destruction work (like releasing pooled connections)  
 }  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;InitializingBean 同理。&lt;/p&gt;&lt;p&gt;是我没脸，我要把 @PostConstruct和@PreDestroy 的例子放在这里&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class CachingMovieLister {  
  
 @PostConstruct  
 public void populateMovieCache() {  
 // populates the movie cache upon initialization...  
 }  
  
 @PreDestroy  
 public void clearMovieCache() {  
 // clears the movie cache upon destruction...  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总结：声明周期顺序&lt;/p&gt;&lt;p&gt;以上6个方式无论是哪个初始化方式，都是在beanbean实例化，并赋值完成后开始的。&lt;/p&gt;&lt;p&gt;看文字你会懂，会填入其它的概念：&lt;/p&gt;&lt;p&gt;本图转载自：&lt;a href=&quot;https://www.cnblogs.com/zrtqsk/p/3735273.html&quot;&gt;https://www.cnblogs.com/zrtqsk/p/3735273.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/05/01/aVGeJlukiA3EqO5.png&quot; alt=&quot;bean周期.png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;bean的作用域@scope()&lt;/h3&gt;&lt;p&gt;说起bean，就必须有bean的作用域，一点都不复杂，就两个，一个单例，一个多例。&lt;/p&gt;&lt;p&gt;代码格式是这样的&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration  
 public  class MyConfiguration {  
 @Bean   
 @Scope（“prototype”）  
 public Encryptor encryptor（）{  
 // ...   
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;prototype 这个就是多例了，意思就是，容器内每次调用都会都会创建一个新的此类的实例，而singleton不一样，singleton在容器启动的时候就开始创建实例，每次调用此bean都会调用这一个实例。&lt;br/&gt;
具体可能在后面进行讨论。&lt;/p&gt;&lt;p&gt;这个部分主要讨论的还是@Scope这个注解。&lt;/p&gt;&lt;p&gt;@Scope注解不止可以定义单例和多例，还可以定义 作用域代理。像这样：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// an HTTP Session-scoped bean exposed as a proxy  
@Bean  
@Scope(value = &amp;quot;session&amp;quot;, proxyMode = ScopedProxyMode.TARGET_CLASS)  
public UserPreferences userPreferences() {  
 return new UserPreferences();  
}  
  
@Bean  
public Service userService() {  
 UserService service = new SimpleUserService();  
 // a reference to the proxied userPreferences bean  
 service.setUserPreferences(userPreferences());  
 return service;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;官网上的注释解释的很明白，如果你的bean调用比它作用域要小的bean推荐采取这样的方式。&lt;br/&gt;
&lt;br/&gt;
上面的代码 userService要调用 userPreferences 。所以在 userPreferences 上定义 该bean的作用域为 session，即：被调用bean随着session的销毁而销毁。&lt;/p&gt;&lt;p&gt;实现原理是 AOP的 代理类， 具体的AOP ，我会新开一篇来讲述。&lt;/p&gt;&lt;h3&gt;定制bean名字&lt;/h3&gt;&lt;p&gt;我认为这很没有意义，但是既然Spring有这个了，我也说一下，很简单，万一用到了呢？&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration  
public class AppConfig {  
  
 @Bean(name = &amp;quot;myFoo&amp;quot;)  
 public Foo foo() {  
 return new Foo();  
 }  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;没了，就是在@Bean注解后面加个 name属性 再填个String&lt;/p&gt;&lt;p&gt;然后还可以像这样添加别名：别名在有某B合作的时候将你需要的bean名字给重制的时候很好用&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration  
public class AppConfig {  
  
 @Bean(name = { &amp;quot;dataSource&amp;quot;, &amp;quot;subsystemA-dataSource&amp;quot;, &amp;quot;subsystemB-dataSource&amp;quot; })  
 public DataSource dataSource() {  
 // instantiate, configure and return DataSource bean...  
 }  
  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不解释，不解释，哈哈！都懂，都懂！&lt;/p&gt;&lt;h3&gt;bean构造器内参数方式形成依赖&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration  
public class AppConfig {  
  
 @Bean  
 public Foo foo() {  
 return new Foo(bar());  
 }  
  
 @Bean  
 public Bar bar() {  
 return new Bar();  
 }  
  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就形成了bean之间的依赖，简直不要太直观。&lt;/p&gt;&lt;h3&gt;Lookup method injection&lt;/h3&gt;&lt;p&gt;这个是Spring的高级特性&lt;/p&gt;&lt;p&gt;这个方式的 bean 之间的依赖，我没有用过。不过官网说，当一个单例bean依赖一个多例bean时，它很好用。不过我暂时对使用这个方式没什么兴趣，因为它有点绕，缺少可读性，我贴代码。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public abstract class CommandManager {  
 public Object process(Object commandState) {  
 // grab a new instance of the appropriate Command interface  
 Command command = createCommand();  
  
 // set the state on the (hopefully brand new) Command instance  
 command.setState(commandState);  
 return command.execute();  
 }  
  
 // okay... but where is the implementation of this method?  
 protected abstract Command createCommand();  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Bean  
@Scope(&amp;quot;prototype&amp;quot;)  
public AsyncCommand asyncCommand() {  
 AsyncCommand command = new AsyncCommand();  
 // inject dependencies here as required  
 return command;  
}  
  
@Bean  
public CommandManager commandManager() {  
 // return new anonymous implementation of CommandManager with command() overridden  
 // to return a new prototype Command object  
 return new CommandManager() {  
 protected Command createCommand() {  
 return asyncCommand();  
 }  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到commandManager返回了一个匿名类，并在匿名类内实现createCommand()这个抽象方法，然后在这个抽象方法return了asyncCommand()这个方法，这个方法return了AsyncCommand 这个类的bean。&lt;/p&gt;&lt;p&gt;绕了一大圈，结果就是：commandManager这个bean 通过内部匿名类的方式 return了个AsyncCommand，然后还是个多例的，但是到底有没有 commandManager 被创建，我还是有点晕的。&lt;/p&gt;&lt;h3&gt;Further information about how Java-based configuration works internally&lt;/h3&gt;&lt;p&gt;这也是Spring的高级特性，既然已经做笔记了，就顺手写下来吧，反正也顺便看一遍了。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration  
public class AppConfig {  
  
 @Bean  
 public ClientService clientService1() {  
 ClientServiceImpl clientService = new ClientServiceImpl();  
 clientService.setClientDao(clientDao());  
 return clientService;  
 }  
 @Bean  
 public ClientService clientService2() {  
 ClientServiceImpl clientService = new ClientServiceImpl();  
 clientService.setClientDao(clientDao());  
 return clientService;  
 }  
  
 @Bean  
 public ClientDao clientDao() {  
 return new ClientDaoImpl();  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是一个bean被调用两次的经典例子。&lt;/p&gt;&lt;p&gt;因为这个稍复杂，我担心解释起来有歧义，所以将原文贴在这里。&lt;/p&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;clientDao()&lt;/code&gt; has been called once in &lt;code&gt;clientService1()&lt;/code&gt; and once in clientService2(). Since this method creates a new instance of ClientDaoImpl and returns it, you would normally expect having 2 instances (one for each service). That definitely would be problematic: in Spring, instantiated beans have a singleton scope by default. This is where the magic comes in: All @Configuration classes are subclassed at startup-time with CGLIB. In the subclass, the child method checks the container first for any cached (scoped) beans before it calls the parent method and creates a new instance. Note that as of Spring 3.2, it is no longer necessary to add CGLIB to your classpath because CGLIB classes have been repackaged under org.springframework and included directly within the spring-core JAR.&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;h3&gt;@Import&lt;/h3&gt;&lt;p&gt;这个注解也是我喜欢用的之一，&lt;/p&gt;&lt;p&gt;它可以让你轻松从一个 @Configuration 调用另一个 @Configuration 里面的 @Bean ，通常我是经常在这种情况下使用的。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration  
public class ConfigA {  
  
 @Bean  
 public A a() { return new A(); }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration  
@Import(ConfigA.class)  
public class ConfigB {  
  
 @Bean  
 public B b() { return new B(); }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后这样之后，神奇的事情发生了，Bean A 跑到 ConfigB 这个配置类里面了。&lt;/p&gt;&lt;p&gt;然后你通过这样的方式就可以轻松调用了，虽然在一定意义上不怎么优雅。但是如果你像我一样蠢的话，不止蠢，还懒，就用这样的方式，在设计类的时候分门别类，调用的时候可以选择一把抓。不用来回翻找那么多的配置类的名字。但是这样要记住方法确实不容易，哈哈。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static void main(String\[\] args) {  
 ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigB.class);  
  
 // now both beans A and B will be available...  
 A a = ctx.getBean(A.class);  
 B b = ctx.getBean(B.class);  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你只需要将 ConfigB 放入 AnnotationConfigApplicationContext 的参数里。&lt;/p&gt;&lt;h3&gt;@Resource&lt;/h3&gt;&lt;p&gt;这个不是Spring的注解，但是，我在一个商城源代码其中一个微服务中，看到有一位大量使用偏爱此注解的同行，所以从那时起，我也对此注解做了一些研究和多了一份在意。&lt;/p&gt;&lt;p&gt;这个注解是JSR-250的注释，这也是Java EE中的常见模式，Spring也保留了这样的开发方法。&lt;/p&gt;&lt;p&gt;这个注解是标注在 bean属性的 setter方法上面的。&lt;/p&gt;&lt;p&gt;这个注解你可以指定属性名字，像这样：&lt;/p&gt;&lt;p&gt;&lt;code&gt;@Resource(name = &amp;quot;XXXX&amp;quot;)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;如果你不指定名字，它将采用bean属性的名字。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class SimpleMovieLister {  
  
 private MovieFinder movieFinder;  
  
 @Resource  
 public void setMovieFinder(MovieFinder movieFinder) {  
 this.movieFinder = movieFinder;  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上面的例子中，这个bean的名字就是“movieFinder”。&lt;/p&gt;&lt;p&gt;这个注解的名称解析由ApplicationContext中的CommonAnnotationBeanPostProcessor公共bean后置处理器来工作的。&lt;/p&gt;&lt;p&gt;这个注解和@Autowired很相似，有必要记下来，为看其它人的代码，做好准备。&lt;/p&gt;&lt;p&gt;他们的区别：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;@Autowired 在不指定名字的情况下，是按类型装配的。所以它的依赖项必须存在，要不然你也可以设置，required属性为false。上文提到过的，是否依赖性是必须的。或者使用@Qualifier来进行名称装配。&lt;/li&gt;&lt;li&gt;@Resource却不一样，它默认就是安装名称装配的。&lt;/li&gt;&lt;li&gt;这类型的注解，主要的目的就是解决bean之间的依赖问题，使代码更流畅。&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;@PostConstruct 和 @PreDestroy&lt;/h3&gt;&lt;p&gt;上文生命周期回调提到过这两个注解，既然已经说了@Resource，那就必须要带上他俩，毕竟他们是一家的，都出自JSR-250。&lt;/p&gt;&lt;p&gt;也是由CommonAnnotationBeanPostProcessor这个后置处理器来搞定的。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class CachingMovieLister {  
  
 @PostConstruct  
 public void populateMovieCache() {  
 // populates the movie cache upon initialization...  
 }  
  
 @PreDestroy  
 public void clearMovieCache() {  
 // clears the movie cache upon destruction...  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;官方的代码，很明确，很直观的描述了，生命周期时，通过@PostConstruct在初始化时调用populateMovieCache()这个方法来做一些事情，这里它举了缓存的例子。服务器内部的缓存，我一直胆战心惊，不敢使用，因为总觉得有些浪费资源。希望以后的哪天可以拨开云雾见青天。&lt;/p&gt;&lt;p&gt;然后在销毁前，通过这个@PreDestroy注解来标记clearMovieCache()这个方法为销毁前调用的方法。&lt;/p&gt;&lt;h3&gt;@DependsOn&lt;/h3&gt;&lt;p&gt;这个注解Spring文档，关键词就只出现两次，之前我也是从未见过，既然看到，就顺便填上，做戏要做足，哈哈。&lt;/p&gt;&lt;p&gt;这个注解的意思是：当你在一个bean上定义了这个注解，并填入所依赖的bean，从字面意思，我们可以知道被注解的是“依赖项”，注解内的名字是“被依赖项”。&lt;/p&gt;&lt;p&gt;我担心有理解歧义，所以我举个例子。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Bean  
@DependsOn(&amp;quot;apple&amp;quot;)  
public Bean bean(){   
 //...   
 return new Bean;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个例子表示。apple要在bean实例化前完成实例化。&lt;/p&gt;&lt;p&gt;如果两个bean存在强依赖的情况下，可以考虑此注解。&lt;/p&gt;&lt;h3&gt;@Component的详细介绍&lt;/h3&gt;&lt;p&gt;这个注解和@Configuration在一定意义上同级别，我是这么认为的。&lt;/p&gt;&lt;p&gt;我们要讲的是它的子注解，如果你的被扫描类定义很明确的话，一定要标记它的子注解，而不是标记@Component这个注解。&lt;/p&gt;&lt;p&gt;@Component的自注解有3个：&lt;br/&gt;
也是标记在类的上面，和@Component的用法一样一样的。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;@Service 标记在Service层，来表明业务类，主要处理业务逻辑。&lt;/li&gt;&lt;li&gt;@Controller 标记在Controller层，主要是路径的映射，MapingHandler 就是MVC中的映射处理器。&lt;/li&gt;&lt;li&gt;@Repository 标记在DAO层，虽然我几乎没用过。JPA处理持久层，谁用谁知道，但是最近我也遇到了JPA不好的地方，我在想办法解决这个问题。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当然你也可以指定部件的名字像这样：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Service(&amp;quot;myMovieLister&amp;quot;)  
public class SimpleMovieLister {  
 // ...  
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;@Component 定义的例子&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Component  
public class FactoryMethodComponent {  
  
 private static int i;  
  
 @Bean @Qualifier(&amp;quot;public&amp;quot;)  
 public TestBean publicInstance() {  
 return new TestBean(&amp;quot;publicInstance&amp;quot;);  
 }  
  
 // use of a custom qualifier and autowiring of method parameters  
  
 @Bean  
 protected TestBean protectedInstance(@Qualifier(&amp;quot;public&amp;quot;) TestBean spouse,  
 @Value(&amp;quot;#{privateInstance.age}&amp;quot;) String country) {  
 TestBean tb = new TestBean(&amp;quot;protectedInstance&amp;quot;, 1);  
 tb.setSpouse(tb);  
 tb.setCountry(country);  
 return tb;  
 }  
  
 @Bean @Scope(BeanDefinition.SCOPE_SINGLETON)  
 private TestBean privateInstance() {  
 return new TestBean(&amp;quot;privateInstance&amp;quot;, i++);  
 }  
  
 @Bean @Scope(value = WebApplicationContext.SCOPE_SESSION,  
 proxyMode = ScopedProxyMode.TARGET_CLASS)  
 public TestBean requestScopedInstance() {  
 return new TestBean(&amp;quot;requestScopedInstance&amp;quot;, 3);  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个部分主要举例子，来综合了解在项目中如何定义他们。&lt;/p&gt;&lt;h3&gt;一笔带过 @Inject 和 @Named&lt;/h3&gt;&lt;p&gt;这两个注解了解一下就好，我不准备深究，我也没有在实际项目中见过有人偏爱此注解，它们的大致使用是这样的，区别什么的，我就不解释了，因为我也没打算了解它，如果好奇的同学，可以去搜索一下.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import javax.inject.Inject;  
import javax.inject.Named;  
  
@Named  
public class SimpleMovieLister {  
  
 private MovieFinder movieFinder;  
  
 @Inject  
 public void setMovieFinder(MovieFinder movieFinder) {  
 this.movieFinder = movieFinder;  
 }  
 // ...  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;@Named 就像 @Component ，@Inject 就像 @Autowired 一样使用。&lt;/p&gt;&lt;p&gt;介绍在Spring官方文档的&lt;br/&gt;
5.11.3 Limitations of the standard approach&lt;br/&gt;
这个地方&lt;/p&gt;&lt;h2&gt;Bean&lt;/h2&gt;&lt;p&gt;这章有很多基于XML配置的方式引发的状况，随便看看就好，我自己也很乱。。。该死的Spring文档&lt;/p&gt;&lt;p&gt;基于java配置几乎都讲完了，有没提到的，我暂时也想不到。&lt;br/&gt;
在此章节，多多少少会提及之前已经学过的内容，所以，即使看过，也要好好学呀！&lt;/p&gt;&lt;p&gt;下面是Bean的介绍&lt;/p&gt;&lt;h3&gt;介绍&lt;/h3&gt;&lt;p&gt;Spring IoC容器管理一个或多个bean。这些bean是使用您提供给容器的配置元数据创建的，就是上面咱们提到过的元数据的设置。&lt;/p&gt;&lt;p&gt;在容器本身内，这些bean定义表示为：BeanDefinition对象，所以以后遇到这个词不要陌生。&lt;/p&gt;&lt;p&gt;其中包含以下元数据（以及其他信息）&lt;br/&gt;
我认为官方文档说的就非常棒，谁叫就是他们家出得呢。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;一个包限定类名：通常是正在定义的bean的实现类。&lt;/li&gt;&lt;li&gt;Bean的行为配置元素：意思就是bean在容器中的行为方式（范围，生命周期回调等）。&lt;/li&gt;&lt;li&gt;引用bean执行其工作所需的其他bean，这些引用也称为协作者或依赖项。意思就是，依赖。没什么特别的。&lt;/li&gt;&lt;li&gt;要在新创建的对象中设置的其他配置设置。例如，在管理连接池的Bean中使用的连接数或池的大小限制。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这些元数据转换为组成每个bean定义的一组属性。&lt;/p&gt;&lt;p&gt;读起来挺费劲，其实想想就四个东西：名字，生命周期，依赖，配置。&lt;/p&gt;&lt;p&gt;扩展：文档原文翻译&lt;br/&gt;
除了包含有关如何创建特定bean的信息的bean定义之外，这些 ApplicationContext实现还允许用户注册在容器外部创建的现有对象。这是通过getBeanFactory()返回BeanFactory实现 的方法访问ApplicationContext的BeanFactory来完成的DefaultListableBeanFactory。 DefaultListableBeanFactory支持通过方法该登记 registerSingleton(..)和 registerBeanDefinition(..)。但是，典型应用程序仅适用于通过元数据bean定义定义的bean。&lt;/p&gt;&lt;p&gt;其实就是给你了使用容器外的bean的方法。然后还是推荐你不使用容器外的配置。&lt;/p&gt;&lt;h3&gt;Bean的名字&lt;/h3&gt;&lt;p&gt;每个bean可以有一个或多个名字，也就是标识符。但是在容器内，bean的名字必须是唯一的。如果有多个名字，其它的名字会当作别名来处理。&lt;/p&gt;&lt;p&gt;规范：&lt;br/&gt;
bean的名字的规范是：首字母小写的驼峰式命名法，就是和java的方法命名是一样的。&lt;/p&gt;&lt;p&gt;别名：&lt;br/&gt;
之前已经提到过了，在java配置中，你可以配置多个bean的名字，但是只有一个会被当作bean的标记来管理，其它的都是别名。&lt;/p&gt;&lt;h3&gt;Bean的实例化&lt;/h3&gt;&lt;p&gt;bean的本质就像类差不多，就是用于创建对象的模版。容器被客户端访问时，容器会查看bean的模版。并采取该模版的模式来创建（或获取）实际对象。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;一个对象的创建，通常是容器反向调用其空构造器来创建对象。和new对象差不多。&lt;/li&gt;&lt;li&gt;或者是通过工厂类的静态方法来创建的。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;具体要学好反射，如果你的反射基础好的话，估计你没有什么疑问。但是你的反射基础不好，估计这里就有十万个为什么，甚至你会犯，方法定义为基础类型时，通过反射使用包装类型来调用方法时，会出现该方法找不到的异常。&lt;/p&gt;&lt;p&gt;其实这一章在Spring官方文档里面，长篇大论，我认为都是些很没必要的东西。&lt;/p&gt;&lt;p&gt;因为，Spring就像个大妈，它什么都想兼容，什么都要管。因为Spring年头很长，做了好多向后兼容，所以有很多，我们不需要的东西。为了老项目，也做了超多的兼容。比如Spring不仅支持标准的bean，还支持非标准的bean。&lt;/p&gt;&lt;p&gt;其实，我们还是要做到标准。标准的构造我们的应用，以免发生不愉快的bug和其它问题。最后形成雪崩式效应。虽然在大型应用中这很难避免。&lt;/p&gt;&lt;p&gt;你不只可以用普通的构造器方式来构造对象，你还可以采取工厂方法来创建对象：&lt;br/&gt;
我不喜欢这种方式，我现在很菜，我也不能掌握好，通过工厂模式创建bean后，如何解决依赖，然后等等其它问题。&lt;br/&gt;
因为我喜欢java配置方式，在文档里，我并没有看到。通过java配置方式来构造bean并且结合工厂模式的详细信息。&lt;/p&gt;&lt;h3&gt;依赖注入&lt;/h3&gt;&lt;p&gt;之前说过，依赖注入，注入。重要的事情强调一下。这是个“过程”。&lt;/p&gt;&lt;p&gt;通过这个过程，对象定义他们之间的依赖关系。即：如果它们使用其它对象，只能通过有参构造器，参数到工厂方法，通过无参构造器，然后通过一一在它们的属性赋值或者通过工厂方法返回来解决依赖。&lt;/p&gt;&lt;p&gt;当bean创建的时候，容器会为这个bean注入这些依赖。&lt;/p&gt;&lt;p&gt;这个过程是真真正正的反向的。&lt;/p&gt;&lt;p&gt;DI的两个主要的不同的方式：&lt;/p&gt;&lt;h4&gt;基于构造函数的依赖注入&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class SimpleMovieLister {  
  
 // the SimpleMovieLister has a dependency on a MovieFinder  
 private MovieFinder movieFinder;  
  
 // a constructor so that the Spring container can &amp;#x27;inject&amp;#x27; a MovieFinder  
 public SimpleMovieLister(MovieFinder movieFinder) {  
 this.movieFinder = movieFinder;  
 }  
  
 // business logic that actually &amp;#x27;uses&amp;#x27; the injected MovieFinder is omitted...  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个代码的意思是：&lt;/p&gt;&lt;p&gt;SimpleMovieLister类有个依赖，这个依赖是：MovieFinder类。&lt;/p&gt;&lt;p&gt;然后就通过构造器参数的方式来形成依赖。官方文档还给个温馨话语。&lt;/p&gt;&lt;p&gt;说，这个类没有什么特别的，只是一个简单的POJO类。&lt;/p&gt;&lt;h4&gt;基于setter的依赖注入&lt;/h4&gt;&lt;p&gt;这种依赖注入的方式，是通过调用无参构造器或无参static工厂方法来实例化bean后，通过容器调用bean上的setter方法来完成的。看完这句话，是不是有一种这章之前所说的都通畅了呢？&lt;/p&gt;&lt;p&gt;这是一个只能用stter方式注入的类的例子：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class SimpleMovieLister {  
  
 // the SimpleMovieLister has a dependency on the MovieFinder  
 private MovieFinder movieFinder;  
  
 // a setter method so that the Spring container can &amp;#x27;inject&amp;#x27; a MovieFinder  
 public void setMovieFinder(MovieFinder movieFinder) {  
 this.movieFinder = movieFinder;  
 }  
  
 // business logic that actually &amp;#x27;uses&amp;#x27; the injected MovieFinder is omitted...  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看没看到有什么不同？和构造器的本质是一样的，构造器本质我认为也是个方法。为什么我加我认为，因为我怕有人怼我，毕竟我代表不了任何人，哈哈。&lt;/p&gt;&lt;p&gt;选择 构造器注入，还是setter注入？&lt;/p&gt;&lt;p&gt;Spring官方建议的方式是：&lt;br/&gt;
如果是强制性依赖，推荐构造器方式。如果是选择性的，推荐setter方式。&lt;br/&gt;
如果你想问这句话什么意思？对不起，我也没懂。。。&lt;br/&gt;
还有，Spring的文档有地方很恶心，有很多重复，而且没准这章它推荐这个做法，下一章就变了。&lt;br/&gt;
我想说：你们写文档的时候，如果有歧义，开个会好吗？&lt;/p&gt;&lt;p&gt;Spring官方推荐的方式是：&lt;br/&gt;
setter注入方式，因为如果你有很多候选参数，那么构造器注入方式，会非常的笨重。因为它会随着bean的初始化来进行注入，如果这样，对象将不太适合重新配置和注入。&lt;/p&gt;&lt;h4&gt;循环依赖问题&lt;/h4&gt;&lt;p&gt;如果您主要使用构造函数注入，则可以创建无法解析的循环依赖关系场景。&lt;/p&gt;&lt;p&gt;例如：类A通过构造函数注入需要类B的实例，而类B通过构造函数注入需要类A的实例。如果将A类和B类的bean配置为相互注入，则Spring IoC容器会在运行时检测此循环引用，并抛出一个 BeanCurrentlyInCreationException。&lt;/p&gt;&lt;p&gt;一种可能的解决方案是由setter而不是构造函数配置某些类的源代码。或者，避免构造函数注入，仅使用setter注入。换句话说，尽管不推荐使用，但您可以使用setter注入配置循环依赖关系。&lt;/p&gt;&lt;p&gt;与典型情况（没有循环依赖）不同，bean A和bean B之间的循环依赖强制其中一个bean在完全初始化之前被注入另一个bean（一个经典的鸡/蛋场景）。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/05/01/YO4P2bg7F83BCGU.png&quot; alt=&quot;setter注入歧义.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;我不管，我不管，我就是要嘲讽一波Spring team！&lt;/p&gt;&lt;p&gt;如果不存在循环依赖，当一个或多个协作bean被注入依赖bean时，每个协作bean 在被注入依赖bean之前完全配置。这意味着如果bean A依赖于bean B，则Spring IoC容器在调用bean A上的setter方法之前完全配置bean B.换句话说，bean被实例化（如果不是预先实例化的单例），设置依赖项，并调用相关的生命周期方法（如配置的init方法或InitializingBean回调方法）。&lt;/p&gt;&lt;p&gt;这句话读了多好遍才理解。看完英文看中文，看完中文看英文。&lt;/p&gt;&lt;p&gt;剩下的关于这部分的文档，都是关于“基于java配置”部分提及到的，但是以XML方式配置的section。&lt;/p&gt;&lt;p&gt;对不起Bean这个章节上面我很混乱，造成误解，请直接忽视，我准备下个部分说说bean的作用域。&lt;/p&gt;&lt;h3&gt;Bean的作用域&lt;/h3&gt;&lt;p&gt;创建一个bean的时候，将创建基于这个bean的实际类实例的recipe，Spring说这个recipe的主意很重要，因为这意味着：你可以创建超级多的对象from这个单独的recipe。&lt;/p&gt;&lt;p&gt;因为没有看源码，我还是很难理解recipe到底是个什么东西。&lt;/p&gt;&lt;p&gt;Spring说这个recipe很强大，你可以通过它来控制bean定义创建的对象中的各种依赖项和配置的值。还可以控制对象的“范围”。&lt;/p&gt;&lt;p&gt;Spring支持5个作用域，其中三个只有用 web-aware ApplicationContext 的时候才可以用。&lt;/p&gt;&lt;p&gt;那2个其实我们早就知道了，就是单例和多例。英文是singleton和prototype。&lt;/p&gt;&lt;p&gt;其它3个是，session，request和global session。&lt;/p&gt;&lt;p&gt;session：就是HTTP session&lt;br/&gt;
request：同理就是HTTP request&lt;br/&gt;
global session： global HTTP Session&lt;/p&gt;&lt;p&gt;文档就说了 global HTTP Session 我也不知道到底是啥。。。。&lt;/p&gt;&lt;p&gt;然后Spring还说了，3.0加入了线程域，默认不开启，需手动开启，我先不考虑它们，等需要的时候，我再翻翻。。&lt;/p&gt;&lt;h4&gt;The singleton scope&lt;/h4&gt;&lt;p&gt;单例作用域&lt;/p&gt;&lt;p&gt;这个作用域的实例，从容器开始就创建了，而且是共享的。可以注入到任何一个协作对象中。&lt;/p&gt;&lt;p&gt;单例作用域也是默认作用域&lt;/p&gt;&lt;h4&gt;The prototype scope&lt;/h4&gt;&lt;p&gt;多例模式&lt;/p&gt;&lt;p&gt;每次对这个bean提出请求的时候，都会导致创建一个新的bean实例&lt;/p&gt;&lt;p&gt;重点：容器是不管理它的整个生命周期的，容器只做它的实例化，配置。这个我很在行。也就是说，只在初始化的时候操作它，然后就交给JVM处理了。&lt;/p&gt;&lt;p&gt;如果你想控制它，请参考 生命周期回调章节。&lt;br/&gt;
bean后置处理器是个不错的选择。&lt;br/&gt;
反正也控制不到哪去。&lt;/p&gt;&lt;p&gt;所以：如果你想在单例bean中多次调用多例bean的新实例，请使用 方法注入 方式。&lt;/p&gt;&lt;p&gt;其实这在日常开发的时候，是个非常顺畅，理所当然的。既然不看它的，你也会这么做。&lt;/p&gt;&lt;h4&gt;Request, session, and global session scopes&lt;/h4&gt;&lt;p&gt;之前提到过，使用这三个作用域必须使用 web-aware 的ApplicationContext&lt;/p&gt;&lt;p&gt;比如：XmlWebApplicationContext&lt;/p&gt;&lt;p&gt;如果使用：ClassPathXmlApplicationContext&lt;/p&gt;&lt;p&gt;会抛出IllegalStateException异常&lt;/p&gt;&lt;p&gt;其实也是，正常在Springboot开发情况，也不会自己主动去修改它，除非我有病。&lt;/p&gt;&lt;p&gt;因为MVC的DispatchServlet已经公开了所有状态。无需担心。&lt;/p&gt;&lt;p&gt;然后需要注意的是，将这三个作用域的bean注入到另一个bean的时候，需要使用代理对象。&lt;/p&gt;&lt;p&gt;然后Spring强调：你不需要使用&lt;br/&gt;
&lt;code&gt;&amp;lt;aop:scoped-proxy/&amp;gt;&lt;/code&gt;&lt;br/&gt;
与单例和多例的bean结合使用。&lt;/p&gt;&lt;p&gt;对不起，我现在不知道怎么在java配置中使用这个代理对象，因为之前我没使用过这种情况。&lt;/p&gt;&lt;p&gt;然后你还可以自定义作用域，我对此并不感冒，我想跳过，有需要再来，这个太高级特性了。&lt;/p&gt;&lt;h3&gt;Aware接口&lt;/h3&gt;&lt;p&gt;其实我对Aware来说，几乎不懂，道听途说。&lt;/p&gt;&lt;p&gt;看了文档理解了含义，但是具体的操作却有点晕。&lt;/p&gt;&lt;p&gt;我看看就会会了。&lt;/p&gt;&lt;p&gt;现在我将我知道的写下来。你有兴趣可以翻翻文档或者也简单看下。&lt;/p&gt;&lt;p&gt;Aware接口存在的意义：&lt;br/&gt;
允许 bean 向容器表明它们需要一定的 基础结构依赖关系&lt;/p&gt;&lt;p&gt;接口表：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;ApplicationContextAware&lt;/li&gt;&lt;li&gt;ApplicationEventPublisherAware&lt;/li&gt;&lt;li&gt;BeanClassLoaderAwar&lt;/li&gt;&lt;li&gt;BeanFactoryAware&lt;/li&gt;&lt;li&gt;BeanNameAware&lt;/li&gt;&lt;li&gt;BootstrapContextAware&lt;/li&gt;&lt;li&gt;LoadTimeWeaverAware&lt;/li&gt;&lt;li&gt;MessageSourceAware&lt;/li&gt;&lt;li&gt;NotificationPublisherAware&lt;/li&gt;&lt;li&gt;PortletConfigAware&lt;/li&gt;&lt;li&gt;PortletContextAware&lt;/li&gt;&lt;li&gt;ResourceLoaderAware&lt;/li&gt;&lt;li&gt;ServletConfigAware&lt;/li&gt;&lt;li&gt;ServletContextAware&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当你的代码用这些接口的时候，表示你的代码将不遵循“控制反转”规则。所以Spring建议：对需要对容器进行编程访问的基础结构 bean 进行使用。&lt;/p&gt;&lt;p&gt;啊！！！我好像懂了，好像是说，如果你想弄几个类来操作IoC容器，可以继承这些接口。&lt;/p&gt;&lt;h2&gt;容器的扩展&lt;/h2&gt;&lt;p&gt;Spring提供了特别多的继承接口来使我们不需要傻乎乎的去实现ApplicationContext这个接口。接下来是集成接口的介绍&lt;/p&gt;&lt;h3&gt;通过 BeanPostProcessor 来定制 beans&lt;/h3&gt;&lt;p&gt;这个接口提供了好多回调方法，你可以实现它，然后进行想干啥干啥。&lt;/p&gt;&lt;p&gt;容器在bean实例化，配置后调用它。&lt;/p&gt;&lt;p&gt;你可以实现一个或多个。。多个，这不有病吗？你要写什么？写 《权力意志》吗？&lt;/p&gt;&lt;p&gt;如果你实现多个这个接口，也要考虑实现Ordered接口，然后就可以设置order属性来控制调用顺序。&lt;/p&gt;&lt;p&gt;ps: 一个BeanPostProcessor的实现类，只在它自己的容器内才有效用。&lt;/p&gt;&lt;p&gt;org.springframework.beans.factory.config.BeanPostProcessor接口完全由两个回调方法组成，&lt;/p&gt;&lt;p&gt;如果你定义一个Bean继承了这个接口，那么这个后处理器将对所有的bean都生效。这个bean也是Application检测到的。&lt;/p&gt;&lt;p&gt;实现BeanPostProcessor接口的类是特殊的, 容器会对其进行不同的处理。作为应用程序上下文的特殊启动阶段的一部分, 它们直接引用的BeanPostProcessors和 bean 都在启动ApplicationContext实例化。接下来, 所有的BeanPostProcessors都以排序的方式进行注册, 并应用于容器中的所有其他 bean。&lt;/p&gt;&lt;p&gt;如果你有beans 装配进 BeanPostProcessor 。因为BeanPostProcessor是在特殊阶段初始化的， 所以可能 导致 被装配进 的bean出现一些问题，比如：自动代理属性失效。。&lt;/p&gt;&lt;p&gt;eg:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package scripting;  
  
import org.springframework.beans.factory.config.BeanPostProcessor;  
import org.springframework.beans.BeansException;  
  
public class InstantiationTracingBeanPostProcessor implements BeanPostProcessor {  
  
 // simply return the instantiated bean as-is  
 public Object postProcessBeforeInitialization(Object bean, String beanName)  
 throws BeansException {  
 return bean; // we could potentially return any object reference here...  
 }  
  
 public Object postProcessAfterInitialization(Object bean, String beanName)  
 throws BeansException {  
 System.out.println(&amp;quot;Bean &amp;#x27;&amp;quot; \+ beanName + &amp;quot;&amp;#x27; created : &amp;quot; \+ bean.toString());  
 return bean;  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Spring 2.0 AOP&lt;/h1&gt;&lt;p&gt;Spring框架最重要的就是 IoC 和 AOP了。&lt;/p&gt;&lt;p&gt;一个容器，一个面向切片编程。&lt;/p&gt;&lt;p&gt;其次就是底层数据的处理。&lt;/p&gt;&lt;p&gt;我们这个笔记只会记录这三个方面。&lt;/p&gt;&lt;p&gt;AOP 分为 2.0 和 1.2。我们先讨论2.0的，下一章讨论1.2。&lt;/p&gt;&lt;p&gt;AOP主要就是用于声明式事务管理，另外主要的地方就是我们自定义了。&lt;/p&gt;&lt;p&gt;我的AOP菜的要死，每天总有几个小时大脑死机，活跃的时候一干就是10几个小时。要不第二天脑子又不太灵光了，动态代理难啊。。。。因为之前每次看动态代理的时候大脑都处于死机状态，哈哈。&lt;/p&gt;&lt;p&gt;我给大家举个例子，如果你想尝试理解AOP的话，请想象你正在切个黄瓜，切成两段或者多段，咱们要做的就是向这些断点里面填酱料。&lt;/p&gt;&lt;p&gt;然后，AOP很抽象，都是泪。又不得不看，谁叫我想理解事务的浅原理呢。&lt;/p&gt;&lt;h2&gt;概念&lt;/h2&gt;&lt;p&gt;这里为了避免歧义，因为后面也要一个个解释他们，所以这里我要贴英文原文。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Aspect：a modularization of a concern that cuts across multiple classes.&lt;/li&gt;&lt;li&gt;Join point: a point during the execution of a program, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution.&lt;/li&gt;&lt;li&gt;Advice: action taken by an aspect at a particular join point. Different types of advice include “around,” “before” and “after” advice. (Advice types are discussed below.) Many AOP frameworks, including Spring, model an advice as an interceptor, maintaining a chain of interceptors around the join point.&lt;/li&gt;&lt;li&gt;Pointcut: a predicate that matches join points. Advice is associated with a pointcut expression and runs at any join point matched by the pointcut (for example, the execution of a method with a certain name). The concept of join points as matched by pointcut expressions is central to AOP, and Spring uses the AspectJ pointcut expression language by default.&lt;/li&gt;&lt;li&gt;Introduction: declaring additional methods or fields on behalf of a type. Spring AOP allows you to introduce new interfaces (and a corresponding implementation) to any advised object. For example, you could use an introduction to make a bean implement an IsModified interface, to simplify caching. (An introduction is known as an inter-type declaration in the AspectJ community.)&lt;/li&gt;&lt;li&gt;Target object: object being advised by one or more aspects. Also referred to as the advised object. Since Spring AOP is implemented using runtime proxies, this object will always be a proxied object.&lt;/li&gt;&lt;li&gt;AOP proxy: an object created by the AOP framework in order to implement the aspect contracts (advise method executions and so on). In the Spring Framework, an AOP proxy will be a JDK dynamic proxy or a CGLIB proxy.&lt;/li&gt;&lt;li&gt;Weaving: linking aspects with other application types or objects to create an advised object. This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里每一个都很重要，我们要学习的就是这八个概念，之前的章节我都将这些名字翻译成了中文，从现在开始，能用英文表达原意的英文单词，我会用原英文来表示。不用尝试翻译它，它就是它，不是别的东西。它在这里就是这个意思。&lt;/p&gt;&lt;p&gt;Advice分类：&lt;/p&gt;&lt;p&gt;和事物的概念是不是很像。。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Before advice:&lt;/li&gt;&lt;li&gt;After returning advice:&lt;/li&gt;&lt;li&gt;After throwing advice:&lt;/li&gt;&lt;li&gt;After (finally) advice:&lt;/li&gt;&lt;li&gt;Around advice:&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Spring对aop代理的介绍：&lt;br/&gt;
spring aop 默认为对 aop 代理使用标准 j2se 动态代理 。这使得任何接口 (或一组接口) 都可以代理。&lt;/p&gt;&lt;p&gt;spring aop 还可以使用 cglib 代理。这对于代理类是必需的, 而不是接口所必需的。如果业务对象不实现接口, 则默认情况下使用 cglib。由于编程到接口而不是类是很好的做法, 业务类通常会实现一个或多个业务接口。在需要建议未在接口上声明的方法, 或者需要将代理对象作为具体类型传递给方法的情况下, 可以强制使用 cglib(希望是罕见的)。&lt;/p&gt;&lt;p&gt;然后我想说基本的操作就是：&lt;/p&gt;&lt;p&gt;PointCut：决定在哪里切入&lt;br/&gt;
Advice：决定在切入点干什么&lt;br/&gt;
然后他俩组成切面Aspect&lt;br/&gt;
最后由Proxy来操作&lt;/p&gt;&lt;p&gt;Spring大多数操作都已经默认集成了AOP，所以这意味着，我们平时写代码的时候如果没有特殊需求，根本不会感知AOP的存在，但是为了理解一些概念，我们还是有必要了解Spring的AOP的。&lt;/p&gt;&lt;h2&gt;@AspectJ support&lt;/h2&gt;&lt;p&gt;虽然注解名字和 @AspectJ 是一样的，但是Sprig采用的还是自己的 AOP。&lt;/p&gt;&lt;h3&gt;使用 java 配置启用 @AspectJ 支持&lt;/h3&gt;&lt;p&gt;要使用Java启用@AspectJ支持，请 @Configuration添加 @EnableAspectJAutoProxy注释：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Configuration   
@EnableAspectJAutoProxy  
 public  class AppConfig {  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;像这样。。。&lt;/p&gt;&lt;p&gt;然后我想说，本人偏爱Springboot，这个注解在Springboot中，当引入依赖后，这个注解是默认开启的，哈哈。&lt;/p&gt;&lt;h3&gt;声明一个切面(aspect)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package org.xyz;  
import org.aspectj.lang.annotation.Aspect;  
  
@Aspect  
public class NotVeryUsefulAspect {  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是光一个@Aspect注解，上下文是发觉不到它的，所以我们还需要一个注解&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package org.xyz;  
import org.aspectj.lang.annotation.Aspect;  
  
@Aspect  
@Component  
public class NotVeryUsefulAspect {  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;声明切入点(pointcut)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Pointcut(&amp;quot;execution(* transfer(..))&amp;quot;)// the pointcut expression  
private void anyOldTransfer() {}// the pointcut signature 
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;支持的切入点指示符&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;execution:这个就是上面那个例子的指示符，这也是我们最常用的指示符。它是对方法的匹配。&lt;/li&gt;&lt;li&gt;within：使用“within(类型表达式)”匹配指定类型内的方法。我的理解就是指定类内的方法，你可以指定某包下的任何方法，或者指定类下的所有方法，或者注解也可以。&lt;/li&gt;&lt;li&gt;this：当前对象实现了参数内接口的方法。&lt;/li&gt;&lt;li&gt;target：target中使用的表达式必须是类型全限定名，不支持通配符。然后这个也是实现了权限定名的实现类的方法&lt;/li&gt;&lt;li&gt;args：前面还是类型全限定名，不支持通配符。是匹配传入的参数类型。然后这个方法我认为贼蠢，能不用就不用，像我这样的彩笔，估计用不到了，对不起了，Spring team&lt;/li&gt;&lt;li&gt;@within：匹配所以持有指定注解类型内的方法；注解类型也必须是全限定类型名；&lt;/li&gt;&lt;li&gt;@target：匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解；注解类型也必须是全限定类型名；&lt;/li&gt;&lt;li&gt;@args：匹配当前执行的方法传入的参数持有指定注解的执行；注解类型也必须是全限定类型名；&lt;/li&gt;&lt;li&gt;@annotation：匹配当前执行方法持有指定注解的方法；注解类型也必须是全限定类型名；&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;很多，很杂，我很乱。“剪不断，理还乱，是离愁，别是一番滋味在心头。”&lt;/p&gt;&lt;p&gt;在此我想说，编程语言并不是个神圣的东西，它出自人类，既然出自人类，它必不完美，甚至错漏百出，杂乱无杂。生活也一样，即使不完美，我们也要慢慢走下去，尽可能在不完美的基础上做的完美一些。&lt;/p&gt;&lt;h3&gt;切入点表达式&lt;/h3&gt;&lt;p&gt;可以使用’&amp;amp;&amp;amp;’，’||’组合切入点表达式 和’！’。也可以通过名称引用切入点表达式。&lt;/p&gt;&lt;p&gt;下面是例子：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;anyPublicOperation 如果方法执行连接点表示任何公共方法的执行，则匹配&lt;/li&gt;&lt;li&gt;inTrading 如果方法执行在trading module中则匹配&lt;/li&gt;&lt;li&gt;tradingOperation 如果方法执行在trading module中的任何公共方法，则匹配&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Pointcut(&amp;quot;execution(public * *(..))&amp;quot;)  
private void anyPublicOperation() {}  
  
@Pointcut(&amp;quot;within(com.xyz.someapp.trading..*)&amp;quot;)  
private void inTrading() {}  
  
@Pointcut(&amp;quot;anyPublicOperation() &amp;amp;&amp;amp; inTrading()&amp;quot;)  
private void tradingOperation() {}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;切入点这个东西，我个人的做法是不全弄懂，搞两个最基础的。等到用的时候可以像查字典一样去寻找它，如果情况允许的话，你可以自己弄个详细的例子列表放在自己的博客上面。查找的时候也是有处可寻，也可以帮助到他人。&lt;/p&gt;&lt;p&gt;我们通常情况下，是需要搞一个大的模块来进行切面编程的。所以例子就像这样：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package com.xyz.someapp;  
  
import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.Pointcut;  
  
@Aspect  
public class SystemArchitecture {  
  
 /**  
 \* A join point is in the web layer if the method is defined  
 \* in a type in the com.xyz.someapp.web package or any sub-package  
 \* under that.  
 */  
 @Pointcut(&amp;quot;within(com.xyz.someapp.web..*)&amp;quot;)  
 public void inWebLayer() {}  
  
 /**  
 \* A join point is in the service layer if the method is defined  
 \* in a type in the com.xyz.someapp.service package or any sub-package  
 \* under that.  
 */  
 @Pointcut(&amp;quot;within(com.xyz.someapp.service..*)&amp;quot;)  
 public void inServiceLayer() {}  
  
 /**  
 \* A join point is in the data access layer if the method is defined  
 \* in a type in the com.xyz.someapp.dao package or any sub-package  
 \* under that.  
 */  
 @Pointcut(&amp;quot;within(com.xyz.someapp.dao..*)&amp;quot;)  
 public void inDataAccessLayer() {}  
  
 /**  
 \* A business service is the execution of any method defined on a service  
 \* interface. This definition assumes that interfaces are placed in the  
 \* &amp;quot;service&amp;quot; package, and that implementation types are in sub-packages.  
 *  
 \* If you group service interfaces by functional area (for example,  
 \* in packages com.xyz.someapp.abc.service and com.xyz.def.service) then  
 \* the pointcut expression &amp;quot;execution(* com.xyz.someapp..service.*.*(..))&amp;quot;  
 \* could be used instead.  
 *  
 \* Alternatively, you can write the expression using the &amp;#x27;bean&amp;#x27;  
 \* PCD, like so &amp;quot;bean(*Service)&amp;quot;. (This assumes that you have  
 \* named your Spring service beans in a consistent fashion.)  
 */  
 @Pointcut(&amp;quot;execution(* com.xyz.someapp.service.*.*(..))&amp;quot;)  
 public void businessService() {}  
  
 /**  
 \* A data access operation is the execution of any method defined on a  
 \* dao interface. This definition assumes that interfaces are placed in the  
 \* &amp;quot;dao&amp;quot; package, and that implementation types are in sub-packages.  
 */  
 @Pointcut(&amp;quot;execution(* com.xyz.someapp.dao.*.*(..))&amp;quot;)  
 public void dataAccessOperation() {}  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;execution是最常用的指示符&lt;/p&gt;&lt;p&gt;标准的表达式为：&lt;/p&gt;&lt;p&gt;&lt;code&gt;execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;我也没弄懂它们都什么意思，哈哈。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;用于任何public方法&lt;br/&gt;execution(public (..))&lt;/li&gt;&lt;li&gt;用于任何方法开头为set的方法&lt;br/&gt;execution( &lt;em&gt;set&lt;/em&gt;(..))&lt;/li&gt;&lt;li&gt;用于任何AccountService接口内的任何方法&lt;br/&gt;execution( &lt;em&gt;com.xyz.service.AccountService.&lt;/em&gt;(..))&lt;/li&gt;&lt;li&gt;用于任何service包下的任何类任何方法&lt;br/&gt;execution( &lt;em&gt;com.xyz.service.&lt;/em&gt;.*(..))&lt;/li&gt;&lt;li&gt;分包下的同样适用&lt;br/&gt;execution( &lt;em&gt;com.xyz.service..&lt;/em&gt;.*(..))&lt;/li&gt;&lt;li&gt;service包中的任何连接点&lt;br/&gt;within(com.xyz.service.*)&lt;/li&gt;&lt;li&gt;子包也同样适用&lt;br/&gt;within(com.xyz.service..*)&lt;/li&gt;&lt;li&gt;代理实现AccountService接口的任何连接点&lt;br/&gt;this(com.xyz.service.AccountService)&lt;/li&gt;&lt;li&gt;目标对象实现AccountService接口的任何连接点&lt;br/&gt;target(com.xyz.service.AccountService)&lt;/li&gt;&lt;li&gt;任何连接点&lt;br/&gt;args(java.io.Serializable)&lt;/li&gt;&lt;li&gt;目标对象具有@Transactional注释的任何连接点&lt;br/&gt;@target(org.springframework.transaction.annotation.Transactional)&lt;/li&gt;&lt;li&gt;任何连接点，其中目标对象的声明类型具有 @Transactional注释&lt;br/&gt;@within(org.springframework.transaction.annotation.Transactional)&lt;/li&gt;&lt;li&gt;任何连接点，其中执行方法具有 @Transactional注释：&lt;br/&gt;@annotation(org.springframework.transaction.annotation.Transactional)&lt;/li&gt;&lt;li&gt;任何连接点（仅在Spring AOP中执行的方法），它接受一个参数，并且传递的参数的运行时类型具有@Classified 注释：&lt;br/&gt;@args(com.xyz.security.Classified)&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;声明建议&lt;/h3&gt;&lt;p&gt;建议与切入点表达式相关联，并在切入点匹配的方法执行之前，之后或周围运行。切入点表达式可以是对命名切入点的简单引用，也可以是在适当位置声明的切入点表达式。&lt;/p&gt;&lt;p&gt;####在建议之前&lt;br/&gt;
在使用@Before注释在方面声明建议之前 ：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.Before;  
  
@Aspect  
 public  class BeforeExample {  
  
 @Before（“com.xyz.myapp.SystemArchitecture.dataAccessOperation（）”）  
 public  void doAccessCheck（）{  
 // ...  
 }  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果用表达式就这样：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.Before;  
  
@Aspect  
 public class BeforeExample {  
  
 @Before（“execution（* com.xyz.myapp.dao。*。*（..））”）  
 public void doAccessCheck（）{  
 // ...  
 }  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;After returning advice&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.AfterReturning;  
  
@Aspect  
public class AfterReturningExample {  
  
 @AfterReturning(&amp;quot;com.xyz.myapp.SystemArchitecture.dataAccessOperation()&amp;quot;)  
 public void doAccessCheck() {  
 // ...  
 }  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有时您需要在advice体中访问返回的实际值。你可以使用它的 @AfterReturning形式绑定返回值：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.AfterReturning;  
  
@Aspect  
public class AfterReturningExample {  
  
 @AfterReturning(  
 pointcut=&amp;quot;com.xyz.myapp.SystemArchitecture.dataAccessOperation()&amp;quot;,  
 returning=&amp;quot;retVal&amp;quot;)  
 public void doAccessCheck(Object retVal) {  
 // ...  
 }  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;returning属性中使用的名称必须与advice方法中的参数名称相对应。当方法执行返回时，返回值将作为相应的参数值传递给advice方法。&lt;/p&gt;&lt;h4&gt;After throwing advice&lt;/h4&gt;&lt;p&gt;在一个方法抛出异常时使用&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.AfterThrowing;  
  
@Aspect  
public class AfterThrowingExample {  
  
 @AfterThrowing(&amp;quot;com.xyz.myapp.SystemArchitecture.dataAccessOperation()&amp;quot;)  
 public void doRecoveryActions() {  
 // ...  
 }  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你想只在抛出某个固定异常才才运行advice&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.AfterThrowing;  
  
@Aspect  
public class AfterThrowingExample {  
  
 @AfterThrowing(  
 pointcut=&amp;quot;com.xyz.myapp.SystemArchitecture.dataAccessOperation()&amp;quot;,  
 throwing=&amp;quot;ex&amp;quot;)  
 public void doRecoveryActions(DataAccessException ex) {  
 // ...  
 }  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;throwing属性中使用的名称必须与advice方法中的参数名称相对应。&lt;/p&gt;&lt;h4&gt;After (finally) advice&lt;/h4&gt;&lt;p&gt;它在所有advice最后运行，通常用于释放什么的。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.After;  
  
@Aspect  
public class AfterFinallyExample {  
  
 @After(&amp;quot;com.xyz.myapp.SystemArchitecture.dataAccessOperation()&amp;quot;)  
 public void doReleaseLock() {  
 // ...  
 }  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Around advice&lt;/h4&gt;&lt;p&gt;这个是个非常强大的advice，也是我使用最多的。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.Around;  
import org.aspectj.lang.ProceedingJoinPoint;  
  
@Aspect  
public class AroundExample {  
  
 @Around(&amp;quot;com.xyz.myapp.SystemArchitecture.businessService()&amp;quot;)  
 public Object doBasicProfiling(ProceedingJoinPoint pjp) throws Throwable {  
 // do something  
 Object retVal = pjp.proceed();  
 // do something  
 return retVal;  
 }  
  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Object retVal = pjp.proceed();&lt;/p&gt;&lt;p&gt;这个代表的就是主体方法，&lt;/p&gt;&lt;p&gt;你可以在它周围做一些事&lt;/p&gt;&lt;p&gt;pjp.proceed();这个语句，无论你写多少个，它都只会调用一次。&lt;/p&gt;&lt;p&gt;返回的值，就是主体方法应该返回的值&lt;/p&gt;&lt;h4&gt;Access to the current JoinPoint&lt;/h4&gt;&lt;p&gt;这个我要贴原文，我并没有太大的心思去了解它。&lt;/p&gt;&lt;p&gt;Any advice method may declare as its first parameter, a parameter of type org.aspectj.lang.JoinPoint (please note that around advice is required to declare a first parameter of type ProceedingJoinPoint, which is a subclass of JoinPoint. The JoinPoint interface provides a number of useful methods such as getArgs() (returns the method arguments), getThis() (returns the proxy object), getTarget() (returns the target object), getSignature() (returns a description of the method that is being advised) and toString() (prints a useful description of the method being advised). Please do consult the Javadocs for full details.&lt;/p&gt;&lt;h4&gt;将参数传递给 advice&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Before(&amp;quot;com.xyz.myapp.SystemArchitecture.dataAccessOperation() &amp;amp;&amp;amp;&amp;quot; +  
 &amp;quot;args(account,..)&amp;quot;)  
public void validateAccount(Account account) {  
 // ...  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;advice 参数和泛型&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public  interface Sample &amp;lt;T\&amp;gt; {  
 void sampleGenericMethod（T param）;  
 void sampleGenericCollectionMethod（Collection&amp;gt; T&amp;gt; param）;  
}  
  
@Before(&amp;quot;execution(* ..Sample+.sampleGenericMethod(*)) &amp;amp;&amp;amp; args(param)&amp;quot;)  
public void beforeSampleMethod(MyType param) {  
 // Advice implementation  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此样式不能用于定义集合，像这样：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Before(&amp;quot;execution(* ..Sample+.sampleGenericCollectionMethod(*)) &amp;amp;&amp;amp; args(param)&amp;quot;)  
public void beforeSampleMethod(Collection&amp;lt;MyType&amp;gt; param) {  
 // Advice implementation  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Spring AOP API&lt;/h3&gt;&lt;p&gt;前一章描述了Spring 2.0及更高版本使用@AspectJ和基于模式的方面定义对AOP的支持。在本章中，我们将讨论较低级别的Spring AOP API以及Spring 1.2应用程序中使用的AOP支持。对于新应用程序，我们建议使用前一章中描述的Spring 2.0及更高版本的AOP支持，但在使用现有应用程序时，或者在阅读书籍和文章时，您可能会遇到Spring 1.2样式示例。Spring 3.0向后兼容Spring 1.2，本章中描述的所有内容在Spring 3.0中完全支持。&lt;/p&gt;&lt;p&gt;因为自己写的，感觉没太大的价值，关于这章，所以。。。。&lt;br/&gt;
大家可以到这个网页直接阅读关于这个章节的 中文官方文档！&lt;br/&gt;
&lt;a href=&quot;https://lfvepclr.gitbooks.io/spring-framework-5-doc-cn/content/37-Spring_AOP_Usage.html&quot;&gt;https://lfvepclr.gitbooks.io/spring-framework-5-doc-cn/content/37-Spring_AOP_Usage.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;不过对于AOP我们还是要仔细学习一下代理的。&lt;/p&gt;&lt;h3&gt;静态代理&lt;/h3&gt;&lt;p&gt;静态代理很简单，举个例子：&lt;/p&gt;&lt;p&gt;我们日常生活中，都要找人解决各种各样问题。&lt;/p&gt;&lt;p&gt;我们先不管到底解决的是什么问题，我们同意写成do()。&lt;/p&gt;&lt;p&gt;静态代理的一个重要的地方就是需要固定的接口。&lt;/p&gt;&lt;p&gt;大体流程是这样的：&lt;/p&gt;&lt;p&gt;平时我们找人做事，我们需要直接找到这个人，但是个人的经历非常有限，而且能做的事情非常少。&lt;/p&gt;&lt;p&gt;比如我们在这个人的接口上面定义了他能做某件事，所以这个人就只能做某件事，为什么不能干别的，因为我们没定义。因为定义了，就违反了OOP编程的概念。&lt;/p&gt;&lt;p&gt;我再把这个例子具体一点，你也许就能明白许多。&lt;/p&gt;&lt;p&gt;比如我们定义一个Person接口，它的唯一方法是do();&lt;br/&gt;
再定义一个实现类，歌手，然后实现这个方法，我们告诉这个歌手，你只能唱歌。&lt;/p&gt;&lt;p&gt;这个时候，当我们想调用歌手的时候。发现歌手很忙。而且他只能唱歌。毕竟术业有专攻。这个时候我们怎么办。&lt;/p&gt;&lt;p&gt;我们需要给这个歌手一个经纪人。我们这里称为代理类。&lt;/p&gt;&lt;p&gt;然后我们就以后不直接找这个歌手了，我们直接找这个经纪人，也就是这个代理类，歌手负责唱歌，代理类负责做所有其它的事情。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface Person{  
  
 void do();  
}  
  
  
  
public class Singer implements Person{  
  
 @Override  
 public void do(){  
 sout(&amp;quot;我能唱歌！&amp;quot;);  
 }  
}  
  
  
public class PersonProxy{  
  
 private Person person;  

 public PersonProxy(Person person){  
 this.person = person  
 }  

 // 加这么多 o 就是想表面，名字不是一样的。但是do很恰当。  
 public void dooooo(){  
 // do something!  

 person.do();  
  
 // do something!  
 }  
}  
  
  
public class main{  
 psvm{  
 PersonProxy personproxy = new PersonProxy(new Singer);  
  
 personproxy.dooooo();  
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到现在你懂了吗？ 当然在代码里面是不能用 do 这个关键字的。&lt;/p&gt;&lt;p&gt;当我们想用 歌手的时候就传歌手，就很自由。&lt;/p&gt;&lt;p&gt;静态代理对于一个 经常敲代码的人来说， 即使没有学过，也会很自然的写出来，但是静态代理的缺点就是，很难扩展。&lt;/p&gt;&lt;p&gt;比如：我们要在歌手唱歌之前和后，不断变换业务，那会怎么样？你是选择做超多的代理类还是？如果要复用呢？你又如何做？&lt;/p&gt;&lt;h3&gt;动态代理&lt;/h3&gt;&lt;p&gt;使用动态代理，我们实现一个接口。&lt;/p&gt;&lt;p&gt;InvocationHandler 顾名思义： 调用处理器&lt;/p&gt;&lt;p&gt;流程控制都由它处理。&lt;/p&gt;&lt;p&gt;它长这样：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface InvocationHandler {  
  
 public Object invoke(Object proxy, Method method, Object\[\] args)  
 throws Throwable;  
  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;记得刚学动态代理的时候，反射和设计模式，总不能很好的互相适应，每次都感觉摸不到知识。后来通过不断的看，总算把它掌握了。&lt;/p&gt;&lt;p&gt;参数的名字：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;proxy：调用此方法的代理实例&lt;/li&gt;&lt;li&gt;method：就是反射那个Method类，在这里就是正在调用的方法&lt;/li&gt;&lt;li&gt;args：这个是在这个方法内调用方法时方法的参数&lt;/li&gt;&lt;li&gt;返回值：这个返回值，真的是，看了好多篇博文，大家真的是非常默契，点到即止，一到这里就没了。所以我特地查了API，找到了答案&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;原文是：the value to return from the method invocation on the proxy instance. If the declared return type of the interface method is a primitive type, then the value returned by this method must be an instance of the corresponding primitive wrapper class; otherwise, it must be a type assignable to the declared return type. If the value returned by this method is @code null and the interface method’s return type is primitive, then a @code NullPointerException will be thrown by the method invocation on the proxy instance. If the value returned by this method is otherwise not compatible with the interface method’s declared return type as described above,a @code ClassCastException will be thrown by the method invocation on the proxy instance.&lt;/p&gt;&lt;p&gt;中文意思是：从代理实例上的方法调用返回的值。如果接口方法声明的返回类型是原始类型，那么该方法返回的值必须是对应原始包装类的实例;否则，它必须是可分配给声明的返回类型的类型。如果此方法返回的值为@code null，且接口方法的返回类型为原始类型，则方法调用将在代理实例上抛出@code NullPointerException。如果此方法返回的值与上述接口方法声明的返回类型不兼容，则方法调用将在代理实例上抛出@code ClassCastException。&lt;/p&gt;&lt;p&gt;懂了没？&lt;/p&gt;&lt;p&gt;然后我们还需要一个 Proxy 类&lt;/p&gt;&lt;p&gt;这个类的作用就是：动态生成代理类和对象&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static Object newProxyInstance(ClassLoader loader,  
 Class&amp;lt;?&amp;gt;\[\] interfaces,  
 InvocationHandler h)  
 throws IllegalArgumentException  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个类 需要传入 类加载器，要操作的接口，和 你定义的调用处理器。 并返回一个 代理对象。&lt;/p&gt;&lt;p&gt;来，我们直接上代码：&lt;br/&gt;
我们把do改成doSomething，你们可以直接复制代码进行测试，我推荐这么做，因为动态代理，稍难理解。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface Person{  
  
 void doSomething();  
}  
  
  
  
public class Singer implements Person{  
  
 @Override  
 public void doSomething(){  
 sout(&amp;quot;我能唱歌！&amp;quot;);  
 }  
}  
  
// 注意这里我不采用名字 PersonProxy，用 PersonHandler  
  
public class PersonHandler implements InvocationHandler{  
  
 private Person person;  
  
 public PersonProxy(Person person){  
 this.person = person  
 }  
  
 // 我们会实现这个方法  
 @Override  
 public Object invoke(Object proxy, Method method, Object\[\] args) {  
    
 // 这个方法就是控制流程了，你可以在这里做一些事情。  
 // do something  
  
 //这个方法就是被代理的类内的方法。  
 method.invoke(person, args);  
  
 // do something  
  
 // 因为原始的方法没有返回值，所以我们这里返回null  
 return null;  
 }  
    
}  
  
  
public class Main{  
    
 psvm{  
 // 把要处理的对象搞进来  
 Singer singer = new Singer();  
  
 // 此类的处理器。多态真的太棒了。然后把要处理的对象传进去。  
 PersonHandler personHandler = new PersonHandler(singer);  
  
 // 这里我们会先做个代理对象  
 // 第一个参数：类加载器，这里我们随便选个默认加载器  
 // 第二个参数：处理类的接口，这里就是 Person  
 // 第三个参数：我们定义的处理器，这里就是 personHandler   
 Person proxy = (Person)Peoxy.newProxyInstance(  
 ClassLoader.getSystemClassLoader(),  
 new Class\[\]{Person.class},  
 personHandler   
 )  
  
 // 这里我们就可以调用包裹了Singer所有方法的代理类，  
 // 这个代理类 可以 调用 Singer 的所有方法，  
 // 因为我们就定义了一个 doSomething，所以我们就调用了一个方法，  
 // 但是这个方法就是：上面所谓的流程。  
 // 你可以在 handler 里面，进行在这个方法上面下面干你想做的事情。  
 // 这个就是动态代理了。  
 proxy.doSomething();  
    
 }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;他们最大的区别就是，静态代理只代理一个类，&lt;br/&gt;
而动态代理可以代理，一个接口下的多个类。&lt;/p&gt;&lt;h1&gt;资源 Resource&lt;/h1&gt;&lt;p&gt;这个我先放在这里，最近真的好忙，或者说，一直都很忙，学不过来，有做不完的事。有时间，我们再整理这个部分，这个也是最后一个部分。&lt;/p&gt;&lt;p&gt;因为急，就把文档翻译翻译放在这里。文档的英文单词，读的是真费劲，借助了大量的翻译软件。&lt;/p&gt;&lt;p&gt;java.net.URL遗憾的是，Java的各种URL前缀的标准类和标准处理程序不足以完全访问低级资源。例如，没有标准化的URL实现可用于访问需要从类路径或相对于a获取的资源 ServletContext。虽然可以为专用URL 前缀注册新的处理程序（类似于现有的前缀处理程序 http:），但这通常非常复杂，并且 URL接口仍然缺少一些理想的功能，例如检查资源是否存在的方法指着。&lt;/p&gt;&lt;h2&gt;Resource接口&lt;/h2&gt;&lt;p&gt;Spring的Resource接口用于抽象对低级资源的访问，是一个更强大的接口。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface Resource extends InputStreamSource {  
  
 boolean exists();  
  
 boolean isOpen();  
  
 URL getURL() throws IOException;  
  
 File getFile() throws IOException;  
  
 Resource createRelative(String relativePath) throws IOException;  
  
 String getFilename();  
  
 String getDescription();  
}  
  
public interface InputStreamSource {  
  
 InputStream getInputStream() throws IOException;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Resource界面中一些最重要的方法是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;getInputStream()：找到并打开资源，返回InputStream从资源中读取的内容。预计每次调用都会返回一个新的InputStream。呼叫者有责任关闭流。&lt;/li&gt;&lt;li&gt;exists()：返回一个 boolean指示此资源是否实际存在。&lt;/li&gt;&lt;li&gt;isOpen()：返回一个 boolean指示此资源是否有打开的stream。如果true，InputStream不能多次读取，必须只读一次然后关闭以避免资源泄漏。其它默认实现默认都是flase，但不包括 InputStreamResource。&lt;/li&gt;&lt;li&gt;getDescription()：返回此资源的描述，用于处理资源时的错误输出。这通常是完全限定的文件名或资源的实际URL。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;其他方法允许您获取表示资源的实际 URL或File对象（如果底层实现兼容，并支持该功能）。&lt;/p&gt;&lt;p&gt;虽然ResourceSpring和Spring都使用了很多接口，但是在你自己的代码中使用它作为通用实用程序类非常有用，用于访问资源，即使你的代码不知道或不关心任何其他Spring部分 虽然这会将您的代码耦合到Spring，但它实际上只将它耦合到这一小组实用程序类，这些实用程序类作为更有能力的替代品URL，并且可以被认为等同于您将用于此目的的任何其他库。&lt;/p&gt;&lt;p&gt;重要的是要注意 Resource抽象不会取代功能：它尽可能地包装默认API。例如，一个 UrlResource包装URL，并使用包装 URL来完成它的工作。&lt;/p&gt;&lt;h2&gt;内置Resource实现&lt;/h2&gt;&lt;p&gt;现在有超多的默认实现类，可以随意选择。&lt;/p&gt;&lt;h3&gt;UrlResource&lt;/h3&gt;&lt;p&gt;所述UrlResource包裹着一个 java.net.URL，并且可以被用于访问任何对象，该对象是通过URL正常访问，如文件，一个HTTP，FTP 等所有URL具有标准化的对象，以使得适当的标准化的前缀被用来指示另一个URL类型。这包括file:访问文件系统路径， http:通过HTTP协议 ftp:访问资源，通过FTP访问资源等。&lt;/p&gt;&lt;p&gt;UrlResource由Java代码使用UrlResource构造函数显式创建，但通常在调用API方法时隐式创建，该方法接受一个String表示路径的参数。对于后一种情况，JavaBeans PropertyEditor最终将决定Resource要创建哪种类型。如果路径字符串包含一些众所周知的前缀，例如 classpath:，它将Resource为该前缀创建一个合适的专用 。但是，如果它不识别前缀，它将假设这只是一个标准的URL字符串，并将创建一个UrlResource。&lt;/p&gt;&lt;h3&gt;ClassPathResource&lt;/h3&gt;&lt;p&gt;此类表示应从类路径获取的资源。这使用线程上下文类加载器，给定的类加载器或给定的类来加载资源。&lt;/p&gt;&lt;p&gt;此Resource实现支持解析，就java.io.File好像类路径资源驻留在文件系统中一样，但不支持驻留在jar中且尚未（通过servlet引擎或任何环境）扩展到文件系统的类路径资源。为了解决这个问题，各种Resource 实现总是支持java.net.URL。&lt;/p&gt;&lt;p&gt;ClassPathResource由Java代码使用ClassPathResource 构造函数显式创建，但通常在调用API方法时隐式创建，该方法接受一个String表示路径的参数。对于后一种情况，JavaBeans PropertyEditor将识别classpath:字符串路径上的特殊前缀，并ClassPathResource在此情况下创建 。&lt;/p&gt;&lt;h3&gt;FileSystemResource&lt;/h3&gt;&lt;p&gt;这是句柄的Resource实现java.io.File。它显然支持解决方案作为一个File和一个 URL。我们可以使用 FileSystemResource 的 getFile() 函数获取 File 对象，使用 getURL() 获取 URL 对象。&lt;/p&gt;&lt;h3&gt;ServletContextResource&lt;/h3&gt;&lt;p&gt;这是为了获取 web 根路径的 ServletContext 资源而提供的 Resource 实现。&lt;/p&gt;&lt;p&gt;这始终支持流访问和URL访问，但仅允许 java.io.File在扩展Web应用程序归档并且资源实际位于文件系统上时进行访问。它是否在这样的文件系统上展开，或直接从JAR或其他地方（如DB）（可以想象）访问，实际上是依赖于Servlet容器。&lt;/p&gt;&lt;h3&gt;InputStreamResource&lt;/h3&gt;&lt;p&gt;这是针对 InputStream 提供的 Resource 实现。只有在没有Resource 适用的具体实施时才应使用此选项。在可能ByteArrayResource的Resource情况下，优选 或 任何基于文件的 实现。&lt;/p&gt;&lt;p&gt;相对于其他Resource 的实现，这是一个描述符 已经打开资源-因此返回 true的isOpen()。如果需要将资源描述符保留在某处，或者需要多次读取流，请不要使用它。&lt;/p&gt;&lt;h3&gt;ByteArrayResource&lt;/h3&gt;&lt;p&gt;这是Resource给定字节数组的实现。它ByteArrayInputStream为给定的字节数组创建一个 。&lt;/p&gt;&lt;p&gt;它对于从任何给定的字节数组加载内容非常有用，而不必求助于单次使用 InputStreamResource。&lt;/p&gt;&lt;h2&gt;ResourceLoader&lt;/h2&gt;&lt;p&gt;ResourceLoader 接口是用来加载 Resource 对象的，换句话说，就是当一个对象需要获取 Resource 实例时，可以选择实现 ResourceLoader 接口。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface ResourceLoader {  
 Resource getResource(String location);  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所有应用程序上下文都实现了 ResourceLoader接口，因此可以使用所有应用程序上下文来获取 Resource实例。&lt;/p&gt;&lt;p&gt;当您调用getResource()特定的应用程序上下文，并且指定的位置路径没有特定的前缀时，您将返回一个 Resource适合该特定应用程序上下文的类型。例如，假设针对ClassPathXmlApplicationContext实例执行了以下代码片段 ：&lt;/p&gt;&lt;p&gt;1  &lt;/p&gt;&lt;p&gt;Resource template = ctx.getResource(&amp;quot;some/resource/path/myTemplate.txt&amp;quot;);  &lt;/p&gt;&lt;p&gt;将返回的是一个 ClassPathResource; 如果对一个FileSystemXmlApplicationContext实例执行相同的方法，你会得到一个FileSystemResource。对于一个 WebApplicationContext，你会得到一个 ServletContextResource，等等。&lt;/p&gt;&lt;p&gt;因此，您可以以适合特定应用程序上下文的方式加载资源。&lt;/p&gt;&lt;p&gt;另一方面，您也ClassPathResource可以通过指定特殊classpath:前缀强制 使用，而不管应用程序上下文类型如何 ：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Resource template = ctx.getResource(&amp;quot;classpath:some/resource/path/myTemplate.txt&amp;quot;); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;类似地，可以UrlResource通过指定任何标准java.net.URL 通过前缀来强制使用：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Resource template = ctx.getResource(&amp;quot;file:/some/resource/path/myTemplate.txt&amp;quot;);  
  
Resource template = ctx.getResource(&amp;quot;http://myhost.com/resource/path/myTemplate.txt&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下表总结了将Strings 转换为 Resources 的策略 ：&lt;/p&gt;&lt;h3&gt;资源字符串&lt;/h3&gt;&lt;p&gt;&lt;code&gt;classpath:com/myapp/config.xml&lt;/code&gt;&lt;/p&gt;&lt;p&gt;从类路径加载。&lt;/p&gt;&lt;p&gt;&lt;code&gt;file:/data/config.xml&lt;/code&gt;&lt;/p&gt;&lt;p&gt;从文件系统加载URL&lt;/p&gt;&lt;p&gt;&lt;code&gt;http://myserver/logo.png&lt;/code&gt;&lt;/p&gt;&lt;p&gt;作为URL加载&lt;/p&gt;&lt;p&gt;&lt;code&gt;/data/config.xml&lt;/code&gt;&lt;/p&gt;&lt;p&gt;取决于 ApplicationContext。&lt;/p&gt;&lt;h2&gt;ResourceLoaderAware界面&lt;/h2&gt;&lt;p&gt;该ResourceLoaderAware接口是一个特殊的标记接口，它希望被提供有对象ResourceLoader参考。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public  interface ResourceLoaderAware {  
  
 void setResourceLoader（ResourceLoader resourceLoader）;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当一个类实现&lt;code&gt;ResourceLoaderAware&lt;/code&gt;并部署到应用程序上下文中时（作为Spring管理的bean），它被&lt;code&gt;ResourceLoaderAware&lt;/code&gt;应用程序上下文识别 。然后，应用程序上下文将调用&lt;code&gt;setResourceLoader(ResourceLoader)&lt;/code&gt;，将自身作为参数提供（请记住，Spring中的所有应用程序上下文都实现了ResourceLoader 接口）。&lt;/p&gt;&lt;p&gt;当然，将 &lt;code&gt;ApplicationContext&lt;/code&gt; 作为一个 &lt;code&gt;ResourceLoader&lt;/code&gt; 对象注入，bean也可以实现&lt;code&gt;ApplicationContextAware&lt;/code&gt; 接口并直接使用提供的应用程序上下文来加载资源，但一般情况下，&lt;code&gt;ResourceLoader&lt;/code&gt;如果需要的话，最好使用专用 接口。代码只会耦合到资源加载接口，可以将其视为实用程序接口，而不是整个Spring ApplicationContext接口。&lt;/p&gt;&lt;h2&gt;Resources作为依赖&lt;/h2&gt;&lt;p&gt;如果bean本身将通过某种动态过程确定并提供资源路径，那么bean使用ResourceLoader接口加载资源可能是有意义的。以某种模板的加载为例，其中所需的特定资源取决于用户的角色。如果资源是静态的，那么ResourceLoader完全消除接口的使用是有意义的，只需让bean公开Resource 它需要的属性，并期望它们被注入其中。&lt;/p&gt;&lt;p&gt;然后注入这些属性变得微不足道的是，所有应用程序上下文都注册并使用PropertyEditor可以将String路径转换 为 Resource对象的特殊JavaBean 。因此，如果 myBean具有类型的模板属性 Resource，则可以使用该资源的简单字符串进行配置，如下所示：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;bean id=&amp;quot;myBean&amp;quot; class=&amp;quot;...&amp;quot;&amp;gt;  
&amp;lt;property name=&amp;quot;template&amp;quot; value=&amp;quot;some/resource/path/myTemplate.txt&amp;quot;/&amp;gt;  
&amp;lt;/bean&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，资源路径没有前缀，因为应用程序上下文本身将用作 ResourceLoader，资源本身将通过，或 （根据情况）加载ClassPathResource， 具体取决于上下文的确切类型。FileSystemResourceServletContextResource&lt;/p&gt;&lt;p&gt;如果需要强制使用特定 Resource类型，则可以使用前缀。以下两个示例显示了如何强制a ClassPathResource和a UrlResource（后者用于访问文件系统文件）。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;property name=&amp;quot;template&amp;quot; value=&amp;quot;classpath:some/resource/path/myTemplate.txt&amp;quot;&amp;gt;  
&amp;lt;property name=&amp;quot;template&amp;quot; value=&amp;quot;file:///some/resource/path/myTemplate.txt&amp;quot;/&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;应用程序上下文和Resource路径&lt;/h2&gt;&lt;h3&gt;构建应用程序上下文&lt;/h3&gt;&lt;p&gt;应用程序上下文构造函数（对于特定的应用程序上下文类型）通常将字符串或字符串数​​组作为资源的位置路径（例如构成上下文定义的XML文件）。&lt;/p&gt;&lt;p&gt;当这样的位置路径没有前缀时，Resource从该路径构建并用于加载bean定义的特定 类型取决于并且适合于特定的应用程序上下文。例如，如果您创建 ClassPathXmlApplicationContext如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ApplicationContext ctx = new ClassPathXmlApplicationContext(&amp;quot;conf/appContext.xml&amp;quot;);  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bean定义将从类路径加载， ClassPathResource将被使用。但是如果你创建 FileSystemXmlApplicationContext如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ApplicationContext ctx = new FileSystemXmlApplicationContext(&amp;quot;conf/appContext.xml&amp;quot;);  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bean定义将从文件系统位置加载，在这种情况下相对于当前工作目录。&lt;/p&gt;&lt;p&gt;请注意，在位置路径上使用特殊类路径前缀或标准URL前缀将覆盖Resource为加载定义而创建的默认类型 。所以这个FileSystemXmlApplicationContext……&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ApplicationContext ctx = new FileSystemXmlApplicationContext(&amp;quot;classpath:conf/appContext.xml&amp;quot;);  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;…实际上将从类路径加载其bean定义。但是，它仍然是一个FileSystemXmlApplicationContext。如果它随后是一个ResourceLoader，则任何未加前缀的路径仍将被视为文件系统路径。&lt;/p&gt;&lt;h3&gt;应用程序上下文构造函数资源路径中的通配符&lt;/h3&gt;&lt;p&gt;从前文可知，应用上下文构造器的中的资源路径可以是单一的路径（即一对一地映射到目标资源）；另外资源路径也可以使用高效的通配符——可包含 classpath&lt;em&gt;：前缀 或 ant 风格的正则表达式（使用 spring 的 PathMatcher 来匹配）。&lt;br/&gt;通配符机制的其中一种应用可以用来组装组件式的应用程序。应用程序里所有组件都可以在一个共知的位置路径发布自定义的上下文片段，则最终应用上下文可使用 classpath&lt;/em&gt;: 在同一路径前缀(前面的共知路径）下创建，这时所有组件上下文的片段都会被自动组装。&lt;br/&gt;
谨记，路径中的通配符特定用于应用上下文的构造器，只会在应用构造时有效，与其 Resource 自身类型没有任何关系。不可以使用 classpth*：来构造任一真实的 Resource，因为一个资源点一次只可以指向一个资源。（如果直接使用 PathMatcher 的工具类，也可以在路径中使用通配符）&lt;/p&gt;&lt;p&gt;Ant 风格模式&lt;/p&gt;&lt;p&gt;以下是一些使用了 Ant 风格的位置路径：  &lt;/p&gt;&lt;pre&gt;&lt;code&gt; /WEB-INF/*-context.xml  
 com/mycompany/**/applicationContext.xml  
 file:C:/some/path/*-context.xml  
 classpath:com/mycompany/**/applicationContext.xml 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当位置路径使用了 ant 风格，解释器会遵循一套复杂且预定义的逻辑来解释这些位置路径。解释器会先从位置路径里获取最靠前的不带通配符的路径片段，使用这个路径片段来创建一个 Resource ，并从 Resource 里获取其 URL，若所获取到 URL 前缀并不是 “jar:”,或其他特殊容器产生的特殊前缀（如 WebLogic 的 zip:,WebSphere wsjar),则从 Resource 里获取 java.io.File 对象，并通过其遍历文件系统。进而解决位置路径里通配符;若获取的是 “jar:”的 URL ，解析器会从其获取一个 java.net.JarURLConnection 或手动解析此 URL，并遍历 jar 文件的内容进而解决位置路径的通配符。&lt;br/&gt;
对可移植性的影响&lt;br/&gt;
如果指定的路径已经是文件URL（显式地或隐含地，因为基本的ResourceLoader是一个文件系统的，那么通配符将保证以完全可移植的方式工作。&lt;br/&gt;
如果指定的路径是类路径位置，则解析器必须通过Classloader.getResource（）调用获取最后一个非通配符路径段URL。 由于这只是路径的一个节点（而不是最后的文件），在这种情况下，它实际上是未定义的（在ClassLoader javadocs中）返回的是什么样的URL。 实际上，它始终是一个java.io.File，它表示类路径资源解析为文件系统位置的目录或某种类型的jar URL，其中类路径资源解析为一个jar位置。 尽管如此，这种操作仍然存在可移植性问题。&lt;br/&gt;
如果为最后一个非通配符段获取了一个jar URL，解析器必须能够从中获取java.net.JarURLConnection，或者手动解析jar URL，以便能够遍历该jar的内容，然后解析 通配符。 这将在大多数环境中正常工作，但在其他环境中将会失败，并且强烈建议您在依赖它之前，彻底地在您的特定环境中彻底测试来自jar的资源的通配符解析。&lt;br/&gt;
classpath&lt;em&gt;: 的可移植性&lt;br/&gt;当构造基于 xml 文件的应用上下文时，位置路径可以使用 classpath&lt;/em&gt;：前缀：  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ApplicationContext ctx = new ClassPathXmlApplicationContext(&amp;quot;classpath*:conf/appContext.xml&amp;quot;);  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;classpath&lt;em&gt;：的使用表示类路径下所有匹配文件名称的资源都会被获取(本质上就是调用了 ClassLoader.getResources(…) 方法），接着将获取到的资源组装成最终的应用上下文。&lt;br/&gt;通配符路径依赖了底层 classloader 的 getResource 方法。可是现在大多数应用服务器提供了自身的 classloader 实现，其处理 jar 文件的形式可能各有不同。要在指定服务器测试 classpath&lt;/em&gt;: 是否有效，简单点可以使用 getClass().getClassLoader().getResources(“”) 去加载类路径 jar包里的一个文件。尝试在两个不同的路径加载名称相同的文件，如果返回的结果不一致，就需要查看一下此服务器中与 classloader 行为设置相关的文档。&lt;br/&gt;
在位置路径的其余部分，classpath&lt;em&gt;: 前缀可以与 PathMatcher 结合使用，如：” classpath&lt;/em&gt;:META-INF/&lt;em&gt;-beans.xml”。这种情况的解析策略非常简单：取位置路径最靠前的无通配符片段，调用 ClassLoader.getResources() 获取所有匹配的类层次加载器可加载的的资源，随后将 PathMacher 的策略应用于每一个获得的资源（起过滤作用）。&lt;br/&gt;通配符的补充说明&lt;br/&gt;除非所有目标资源都存于文件系统，否则classpath&lt;/em&gt;：和 ant 风格模式的结合使用，都只能在至少有一个确定根包路径的情况下，才能达到预期的效果。换句话说，就是像 classpath&lt;em&gt;:&lt;/em&gt;.xml 这样的 pattern 不能从根目录的 jar 文件中获取资源，只能从根目录的扩展目录获取资源。此问题的造成源于 jdk ClassLoader.getResources() 方法的局限性——当向 ClassLoader.getResources() 传入空串时(表示搜索潜在的根目录)，只能获取的文件系统的文件位置路径，即获取不了 jar 中文件的位置路径。&lt;br/&gt;
如果在多个类路径上存在所搜索的根包，那使用 classpath: 和 ant 风格模式一起指定的资源不保证找到匹配的资源。因为使用如下的 pattern classpath:com/mycompany/&lt;em&gt;&lt;em&gt;/service-context.xml&lt;br/&gt;去搜索只在某一个路径存在的指定资源com/mycompany/package1/service-context.xml&lt;br/&gt;时,解析器只会对 getResource(“com/mycompany”) 返回的(第一个) URL 进行遍历和解释，则当在多个类路径存在基础包节点 “com/mycompany” 时(如在多个 jar 存在这个基础节点),解析器就不一定会找到指定资源。因此，这种情况下建议结合使用 classpath&lt;/em&gt;: 和 ant 风格模式，classpath&lt;/em&gt;：会让解析器去搜索所有包含基础包节点的类路径。&lt;/p&gt;&lt;h3&gt;FileSystemResource 注意事项&lt;/h3&gt;&lt;p&gt;FileSystemResource 没有依附 FileSystemApplicationContext，因为 FileSystemApplicationContext 并不是一个真正的 &lt;code&gt;ResourceLoader。FileSystemResource 并没有按约定规则来处理绝对和相对路径。相对路径是相对与当前工作而言，而绝对路径则是相对文件系统的根目录而言。 然而为了向后兼容，当 FileSystemApplicationContext 是一个 ResourceLoader 实例时，我们做了一些改变 —— 不管 FileSystemResource&lt;/code&gt; 实例的位置路径是否以 / 开头， FileSystemApplicationContext 都强制将其作为相对路径来处理。事实上，这意味着以下例子等效：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ApplicationContext ctx = new FileSystemXmlApplicationContext(&amp;quot;conf/context.xml&amp;quot;);  
ApplicationContext ctx = new FileSystemXmlApplicationContext(&amp;quot;/conf/context.xml&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有：（即使它们的意义不一样 —— 一个是相对路径，另一个是绝对路径。）&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;FileSystemXmlApplicationContext ctx = ...;  
ctx.getResource(&amp;quot;some/resource/path/myTemplate.txt&amp;quot;);  
FileSystemXmlApplicationContext ctx = ...;  
ctx.getResource(&amp;quot;/some/resource/path/myTemplate.txt&amp;quot;);  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实践中，如果确实需要使用绝对路径，建议放弃 FileSystemResource / FileSystemXmlApplicationContext 在绝对路劲的使用，而强制使用 file: 的 UrlResource。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Resource 只会是 UrlResource，与上下文的真实类型无关  
ctx.getResource(&amp;quot;file:///some/resource/path/myTemplate.txt&amp;quot;);  
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// 强制 FileSystemXmlApplicationContext 通过 UrlResource 加载资源  
ApplicationContext ctx = new FileSystemXmlApplicationContext(&amp;quot;file:///conf/context.xml&amp;quot;);  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[java建造者模式]]></title><description><![CDATA[建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。 一个 Builder 类会一步一步构造最终的对象。该 Builder…]]></description><link>https://www.abellee.cn/2018/12/20/java建造者模式/</link><guid isPermaLink="false">https://www.abellee.cn/2018/12/20/java建造者模式/</guid><pubDate>Thu, 20 Dec 2018 01:30:33 GMT</pubDate><content:encoded>&lt;p&gt;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;&lt;p&gt;一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。&lt;/p&gt;&lt;p&gt;通过一个例子来演示代码：&lt;/p&gt;&lt;p&gt;比如我们要装修我们的卧室和厨房。也就是组装卧室和厨房。&lt;/p&gt;&lt;p&gt;我们先创建两个类，一个表明家具，一个表明房间。&lt;/p&gt;&lt;p&gt;房间接口   &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface Room{  
 Sofa sofa();  
 Knife knife();  
 Bed bed();  
 TV tv();  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;家具接口  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface Furniture{  
 String name();  
 Room room();  
 Integer price();  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;房间建造接口  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface RoomBuilder{  
 Sofa buliderSofa();  
 Knife buliderKnife();  
 Bed buliderBed();  
 TV buliderTV();  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;房间装配接口  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface RoomAssemble{  
 Room roomBulder();  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;房间建造实现类  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class RoomBuilderImpl implements RoomBuilder{  
    
 @Override  
 Sofa sofa(){  
    return new Sofa(){  
 ...  
 }  
 };  
 @Override  
 Knife knife(){  
    return new Knife(){  
 ...  
 }  
 };  
 @Override  
 Bed bed(){  
    return new Bed(){  
 ...  
 }  
 };  
 @Override  
 TV tv(){  
    return new TV(){  
 ...  
 }  
 };  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;房间装配实现类  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public RoomAssembleImpl implements RoomAssemble{  
  
 private RoomBuilder builder;  
  
 @Override  
 public Room roomBulder(){  
 Sofa sofa = builder.builderSofa();  
 Knife knife = builder.buliderKnife();  
 Bed bed = builder.builderBed();  
 TV tv = builder.builderTV();  
  
 Room room = new Room();  
  
 room.setSofa(sofa);  
 room.setKnife(knife);  
 room.setBed(bed);  
 room.setTV(tv);  
  
 return room;  
 };  
  
 ...构造器  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;家具类&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Sofa implements Furniture{  
    
 @Override  
 String name(){  
    return &amp;quot;沙发&amp;quot;;  
 };  
  
 @Override  
 Room room(){  
    return new Bedroom();  
 };  
  
 @Override  
 Interger price(){  
    return 3000;  
 };  
}  
  
public class TV implements Furniture{  
    
 @Override  
 String name(){  
    return &amp;quot;电视&amp;quot;;  
 };  
  
 @Override  
 Room room(){  
    return new Bedroom();  
 };  
  
 @Override  
 Interger price(){  
    return 8000;  
 };  
}  
  
public class Bed implements Furniture{  
    
 @Override  
 String name(){  
    return &amp;quot;床&amp;quot;;  
 };  
  
 @Override  
 Room room(){  
    return new Bedroom();  
 };  
  
 @Override  
 Interger price(){  
    return 120000;  
 };  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class knife implements Furniture{  
    
 @Override  
 String name(){  
    return &amp;quot;刀&amp;quot;;  
 };  
  
 @Override  
 Room room(){  
    return new Kitchen();  
 };  
  
 @Override  
 Interger price(){  
    return 100;  
 };  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上就结束了。&lt;br/&gt;
我在例子上把能装配的都装配了，然后装配只进行了一层装配，比较简单。&lt;br/&gt;
你也可以只装配几个家具来组装不同的房间，这就是建造者模式的意义。自定义构建你想要的整体。&lt;/p&gt;&lt;p&gt;你也可以选择我下面的扩展代码，装配个房子，先把家具塞进房间，然后再将你选择的不同的房间装配进房子，来构造各式各样的房子。&lt;/p&gt;&lt;p&gt;实现room接口&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Kitchen implements room{  
    
 @Override  
 String name(){  
    return &amp;quot;厨房&amp;quot;;  
 };  
}  
  
public class Bedroom implements room{  
    
 @Override  
 String name(){  
    return &amp;quot;卧室&amp;quot;;  
 };  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实现Furniture接口&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Oven implements Furniture{  
    
 @Override  
 String name(){  
    return &amp;quot;烤箱&amp;quot;;  
 };  
  
 @Override  
 Room room(){  
    return new Kitchen();  
 };  
  
 @Override  
 Interger price(){  
    return 500;  
 };  
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Pan implements Furniture{  
    
 @Override  
 String name(){  
    return &amp;quot;平底锅&amp;quot;;  
 };  
  
 @Override  
 Room room(){  
    return new Kitchen();  
 };  
  
 @Override  
 Interger price(){  
    return 200;  
 };  
}
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[java工厂模式]]></title><description><![CDATA[Spring的笔记写了一半，突然想复习一下工厂模式，所以写一篇。 前言 面向对象设计的基本原则 谈到工厂模式我要先提一下，面向对象设计的基本原则： 单一职责原则（Single Responsibility Principle…]]></description><link>https://www.abellee.cn/2018/12/20/java工厂模式/</link><guid isPermaLink="false">https://www.abellee.cn/2018/12/20/java工厂模式/</guid><pubDate>Thu, 20 Dec 2018 01:18:36 GMT</pubDate><content:encoded>&lt;p&gt;Spring的笔记写了一半，突然想复习一下工厂模式，所以写一篇。&lt;/p&gt;&lt;h1&gt;前言&lt;/h1&gt;&lt;h2&gt;面向对象设计的基本原则&lt;/h2&gt;&lt;p&gt;谈到工厂模式我要先提一下，面向对象设计的基本原则：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;单一职责原则（Single Responsibility Principle）&lt;/p&gt;&lt;p&gt;每一个类应该专注于做一件事情。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;&lt;p&gt;里氏替换原则（Liskov Substitution Principle）&lt;/p&gt;&lt;p&gt;超类存在的地方，子类是可以替换的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;依赖倒置原则（Dependence Inversion Principle）&lt;/p&gt;&lt;p&gt;实现尽量依赖抽象，不依赖具体实现。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;接口隔离原则（Interface Segregation Principle）&lt;/p&gt;&lt;p&gt;应当为客户端提供尽可能小的单独的接口，而不是提供大的总的接口。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;迪米特法则（Law Of Demeter）&lt;/p&gt;&lt;p&gt;又叫最少知识原则，一个软件实体应当尽可能少的与其他实体发生相互作用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;开闭原则（Open Close Principle）&lt;/p&gt;&lt;p&gt;面向扩展开放，面向修改关闭。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;组合/聚合复用原则（Composite/Aggregate Reuse Principle CARP）&lt;/p&gt;&lt;p&gt;尽量使用组合/聚合达到复用，尽量少用继承。原则： 一个类中有另一个类的对象。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;工厂模式的核心本质&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;通过用工厂的方法来new对象，来实现对象的实例化。&lt;/li&gt;&lt;li&gt;调用者和实现者 相互解藕&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;简单工厂模式&lt;/h2&gt;&lt;p&gt;简单工厂模式，虽然简单，但是它也是最常用的工厂模式。&lt;/p&gt;&lt;p&gt;什么都不说，这章，我们直接撸代码。&lt;/p&gt;&lt;p&gt;先来个狗的抽象类。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface Dog{  
    void bark();  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再来个旺财的实现类。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Money implements Dog{  
  
    @Override  
    public void bark(){  
        system.out.println(&amp;quot;旺财叫！&amp;quot;);  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后来个来福的实现类。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Lucky implements Dog{  
  
    @Override  
    public void bark(){  
        system.out.println(&amp;quot;来福叫！&amp;quot;);  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们的依赖关系为：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Dog &amp;lt;——- Money  
^  
|—&amp;lt;——-Lucky
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们平时想要调用这两个实现类，我们通常会这样：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class client{  
  
    public static void main(String\[\] args){  
        Dog money = new Money();  
        Dog Lucky = new Lucky();  


        money.bark();  
        Lucky.barck();  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出应该是：&lt;/p&gt;&lt;p&gt;旺财叫！&lt;br/&gt;
来福叫！&lt;/p&gt;&lt;p&gt;这样造成的问题是：&lt;br/&gt;
client既要知道Dog，还要知道Dog的分类才能调用成功。&lt;/p&gt;&lt;p&gt;然后我们来一个Dog的工厂类&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class DogFactory{  
    
    public static Dog getDog(String type){  

        switch(type){  
        case &amp;quot;Money&amp;quot;:  
            return new Money();  
            break;  
        case &amp;quot;Lucky&amp;quot;:  
            return new Lucky();  
            break;  
        default:  
            throw new DogNotFoundException(DOG_NOT_FOUND);  
        }  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们就可以这样那拿到我们想要的狗了：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Client{  
 public static void main(String\[\] args){  
 Dog money = DogFactory.getDog(&amp;quot;Money&amp;quot;);  
 Dog Lucky = DogFactory.getDog(&amp;quot;Lucky&amp;quot;);  
  
 money.bark();  
 Lucky.barck();  
 }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出应该还是：&lt;/p&gt;&lt;p&gt;旺财叫！&lt;br/&gt;
来福叫！&lt;/p&gt;&lt;p&gt;现在的依赖关系虽然较复杂，但是已经很解藕了。&lt;/p&gt;&lt;p&gt;现在客户端，只需要知道，我要Dog，我要什么狗。然后就不亲自去造狗，而是直接去找工厂要。工厂知道后，就开始找有没有这个狗，有就返回给客户端，没有嘛，就报一个简单的异常。&lt;/p&gt;&lt;p&gt;然后，你不止可以选择switch的方式来创建工厂类还可以用if else和静态方法调用。&lt;/p&gt;&lt;p&gt;if else&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class DogFactory{  
    
    public static Dog getDog(String type){  

        if(&amp;quot;Money&amp;quot;.equals(type)){  
            return new Money();  
        }else(&amp;quot;Lucky&amp;quot;.equals(type)){  
            return new Lucky();  
        }  
        // 异常省略了。  
    }  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;静态方法&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class DogFactory{  
    
    public static Dog getMoney(){  
        return new Money();  
    }  

    public static Dog getLucky(){  
        return new Lucky();  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然工厂模式的命名以 createXX 更好，但是我总觉得创造一个 旺财怪怪的，所以改成了get。&lt;/p&gt;&lt;h2&gt;工厂方法模式&lt;/h2&gt;&lt;p&gt;我们还是先搞三个类&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface Dog{  
    void bark();  
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Money implements Dog{  
  
    @Override  
    public void bark(){  
        system.out.println(&amp;quot;旺财叫！&amp;quot;);  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Lucky implements Dog{  
  
    @Override  
    public void bark(){  
        system.out.println(&amp;quot;来福叫！&amp;quot;);  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个模式，每个实现类都需要自己的工厂类&lt;/p&gt;&lt;p&gt;所以我们创建 旺财 和 来福 各自的工厂类 还有 Dog工厂的抽象类&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface DogFactory{  
  
    Dog getDog();  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class MoneyFactory implements DogFactory{  
  
    @Override  
    public Dog getDog(){  
        return new Money();  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class LuckyFactory implements DogFactory{  
  
    @Override  
    public Dog getDog(){  
        return new Lucky();  
    }  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后写客户端&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Client{  
  
    public static void main(String [] args){  
        Money money = MoneyFactory.getDog();  
        Lucky lucky = LuckyFactory.getDog();  

        money.bark();  
        Lucky.bark();  
    }  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就保证了开闭原则，扩展时不修改原有代码，但是类太XX多了。&lt;br/&gt;
我也认为这样设计很蠢，贼蠢。&lt;/p&gt;&lt;h2&gt;抽象工厂模式&lt;/h2&gt;&lt;p&gt;抽象工厂模式，是为了解决多层次情况。比如：我们现在把来福和旺财看成两类狗，然后再加入狗的颜色属性&lt;/p&gt;&lt;p&gt;然后我们需要输出也就是得到：&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;p&gt;黑色旺财叫！&lt;/p&gt;&lt;p&gt;白色旺财叫！&lt;/p&gt;&lt;p&gt;黑色来福叫！&lt;/p&gt;&lt;p&gt;白色来福叫！&lt;/p&gt;&lt;p&gt;核心思想就是，我们通过工厂类来指定一个来福工厂类还是旺财工厂类，&lt;br/&gt;
然后用它们各自工厂类的创建狗方法来生成上面的结果。&lt;/p&gt;&lt;p&gt;然后我们再让整体结构复杂一点，添加点属性。&lt;/p&gt;&lt;p&gt;所以我们的整体结构现在变成了现在这个样子：&lt;/p&gt;&lt;p&gt;白色狗抽象类和具体实现类  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface WhiteDog{  
 void bark();  
}  
  
public class MoneyWhiteDog implements WhiteDog{  
 public void bark(){  
 sout(&amp;quot;白色旺财叫！&amp;quot;)  
 };  
}  
  
public class LuckyWhiteDog implements WhiteDog{  
 public void bark(){  
 sout(&amp;quot;白色来福叫！&amp;quot;)  
 };  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;黑色狗抽象类和具体实现类  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface BlackDog{  
    void bark();  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class MoneyBlackDog implements BlackDog{  
    public void bark(){  
        sout(&amp;quot;黑色旺财叫！&amp;quot;)  
    };      
}  
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class LuckyBlackDog implements BlackDog{  
    public void bark(){  
        sout(&amp;quot;黑色来福叫！&amp;quot;)  
    };  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;狗的工厂抽象类  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface DogFactory{  
    WhiteDog createWhiteDog();  
    BlackDog createBlackDog();  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;旺财工厂类  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class MoneyFactory implements DogFactory{  
    
    @Override  
    WhiteDog createWhiteDog(){  
        return new MoneyWhiteDog;  
    };  

    BlackDog createBlackDog(){  
        return new MoneyBlackDog  
    };  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;来福工厂类  &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class LuckyFactory implements DogFactory{  
    
    @Override  
    WhiteDog createWhiteDog(){  
        return new LuckyWhiteDog;  
    };  

    BlackDog createBlackDog(){  
        return new LuckyBlackDog  
    };  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static void main(String [] args){  
    DogFactory dogFactory = new MoneyFactory();  

    MoneyWhiteDog moneyWhiteDog = dogFactory.createWhiteDog();  

    moneyWhiteDog.bark();  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不出意外的话，输出是：“白色旺财叫！”&lt;/p&gt;</content:encoded></item><item><title><![CDATA[自己写的一个好玩的滑稽减压HTML]]></title><description><![CDATA[先贴演示地址 https://www.abellee.cn/comic/ 谷歌浏览器演示很棒！ 代码]]></description><link>https://www.abellee.cn/2018/12/08/自己写的一个好玩的滑稽减压HTML/</link><guid isPermaLink="false">https://www.abellee.cn/2018/12/08/自己写的一个好玩的滑稽减压HTML/</guid><pubDate>Sat, 08 Dec 2018 01:03:33 GMT</pubDate><content:encoded>&lt;h1&gt;先贴演示地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.abellee.cn/comic/&quot;&gt;https://www.abellee.cn/comic/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;谷歌浏览器演示很棒！&lt;/p&gt;&lt;h1&gt;代码&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;zh-CN&amp;quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;comic&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;script&amp;gt;
    var quantity = Math.floor( Math.random() * 20 ) + 1;

    var comicWidth = 200;
    var offset = 1;
    var timeInterval = 15;

    var comicHeight = comicWidth;
    var height = window.innerHeight;
    var width = window.innerWidth;
    window.onload = function() {
        init();

        setInterval(function(){
            resize();
            move();
        }, timeInterval);

        function resize() {
            height = window.innerHeight;
            width = window.innerWidth;
        }

        function move() {
            var comics = document.querySelectorAll(&amp;#x27;.comic&amp;#x27;);
            for (var i = 0; i &amp;lt; comics.length; i++) {
                moveItem(comics[i], offset);
            }
        }

        function moveItem(element, offset){
            var itemWidth = parseInt(element.style.width, 10);
            var itemScale = itemWidth * element.scale;
            var style = element.style;

            var xaxis = element.xaxis;
            var yaxis = element.yaxis;

            var top = parseInt(style.top, 10);
            var left = parseInt(style.left, 10);

            if(element.xaxis){
                style.left = compute(left, offset);
            }
            if(!element.xaxis){
                style.left = compute(left, -offset);
            }
            if(left &amp;lt;= 0){
                element.xaxis = true;
            }
            if(left &amp;gt;= width - itemScale){
                element.xaxis = false;
            }
            if(element.yaxis){
                style.top = compute(top, offset);
            }
            if(!element.yaxis){
                style.top = compute(top, -offset);
            }
            if(top &amp;lt;= 0){
                element.yaxis = true;
            }
            if(top &amp;gt;= height - itemScale){
                element.yaxis = false;
            }
        }

        function compute(m, n) {
            return (m + n) + &amp;#x27;px&amp;#x27;;
        }
    }



    function init() {
        appendComic(quantity);
        initComics();
    }

    function initComics() {
        var comics = document.querySelectorAll(&amp;#x27;.comic&amp;#x27;);
        for (var i = 0; i &amp;lt; comics.length; i++) {
            var style = comics[i].style;
            comics[i].xaxis = Math.random() &amp;gt;= 0.5;
            comics[i].yaxis = Math.random() &amp;gt;= 0.5;
            style.position = &amp;#x27;absolute&amp;#x27;;
            style.width = comicWidth + &amp;#x27;px&amp;#x27;;
            style.height = comicHeight + &amp;#x27;px&amp;#x27;;
            style.left = Math.random() * (width - comicWidth) + &amp;#x27;px&amp;#x27;;
            style.top = Math.random() * (height - comicHeight) + &amp;#x27;px&amp;#x27;;
        }
    }

    function appendComic(quantity) {
        for (var index = 0; index &amp;lt; quantity; index++) {
            var comicNode = document.createElement(&amp;#x27;div&amp;#x27;);
            comicNode.classList.add(&amp;#x27;comic&amp;#x27;);

            var scale = Math.random();
            comicNode.scale = scale;
            comicNode.style.transform = &amp;#x27;scale(&amp;#x27; + scale + &amp;#x27;)&amp;#x27;
            comicNode.style.transformOrigin = &amp;#x27;top left&amp;#x27;;

            var mouth = document.createElement(&amp;#x27;div&amp;#x27;);
            mouth.classList.add(&amp;#x27;mouth&amp;#x27;);

            var left_eye = document.createElement(&amp;#x27;div&amp;#x27;);
            left_eye.classList.add(&amp;#x27;eye&amp;#x27;);
            left_eye.classList.add(&amp;#x27;eye_left&amp;#x27;);

            var right_eye = document.createElement(&amp;#x27;div&amp;#x27;);
            right_eye.classList.add(&amp;#x27;eye&amp;#x27;);
            right_eye.classList.add(&amp;#x27;eye_right&amp;#x27;);

            var left_eye1 = document.createElement(&amp;#x27;div&amp;#x27;);
            left_eye1.classList.add(&amp;#x27;eye1&amp;#x27;);
            var left_eye2 = document.createElement(&amp;#x27;div&amp;#x27;);
            left_eye2.classList.add(&amp;#x27;eye2&amp;#x27;);
            var left_eye3 = document.createElement(&amp;#x27;div&amp;#x27;);
            left_eye3.classList.add(&amp;#x27;eye3&amp;#x27;);
            var left_eye4 = document.createElement(&amp;#x27;div&amp;#x27;);
            left_eye4.classList.add(&amp;#x27;eye4&amp;#x27;);
            var left_eye5 = document.createElement(&amp;#x27;div&amp;#x27;);
            left_eye5.classList.add(&amp;#x27;eye5&amp;#x27;);
            var left_eye6 = document.createElement(&amp;#x27;div&amp;#x27;);
            left_eye6.classList.add(&amp;#x27;eye6&amp;#x27;);

            var right_eye1 = document.createElement(&amp;#x27;div&amp;#x27;);
            right_eye1.classList.add(&amp;#x27;eye1&amp;#x27;);
            var right_eye2 = document.createElement(&amp;#x27;div&amp;#x27;);
            right_eye2.classList.add(&amp;#x27;eye2&amp;#x27;);
            var right_eye3 = document.createElement(&amp;#x27;div&amp;#x27;);
            right_eye3.classList.add(&amp;#x27;eye3&amp;#x27;);
            var right_eye4 = document.createElement(&amp;#x27;div&amp;#x27;);
            right_eye4.classList.add(&amp;#x27;eye4&amp;#x27;);
            var right_eye5 = document.createElement(&amp;#x27;div&amp;#x27;);
            right_eye5.classList.add(&amp;#x27;eye5&amp;#x27;);
            var right_eye6 = document.createElement(&amp;#x27;div&amp;#x27;);
            right_eye6.classList.add(&amp;#x27;eye6&amp;#x27;);

            left_eye.appendChild(left_eye1);
            left_eye.appendChild(left_eye2);
            left_eye.appendChild(left_eye3);
            left_eye.appendChild(left_eye4);
            left_eye.appendChild(left_eye5);
            left_eye.appendChild(left_eye6)

            right_eye.appendChild(right_eye1);
            right_eye.appendChild(right_eye2);
            right_eye.appendChild(right_eye3);
            right_eye.appendChild(right_eye4);
            right_eye.appendChild(right_eye5);
            right_eye.appendChild(right_eye6);

            comicNode.appendChild(mouth);

            comicNode.appendChild(left_eye);
            comicNode.appendChild(right_eye);

            document.querySelector(&amp;#x27;.container&amp;#x27;).appendChild(comicNode);
        }
    }

&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
    .container {
        width: 100%;
        height: 100%;
    }

    .comic {
        background: #fd8;
        border-radius: 50%;
        box-shadow: 3px 8px 20px 2px rgba(0, 0, 0, 0.3), 
                        /* 内阴影 */
                        0px 0px 20px 10px rgba(238, 170, 85, 0.8)inset;
        /* position: absolute; */
        transform-origin: 50% 100%;
        animation: rotate3 0.5s infinite linear;
    }

    .mouth {
        width: 80%;
        height: 70%;
        border-bottom: 0.3rem solid rgb(80, 64, 31);
        border-left: 0px solid transparent;
        border-right: 0 solid transparent;
        border-radius: 50% / 50%;
        position: absolute;
        bottom: 12.5%;
        left: 10%;
    }

    .eye {
        position: absolute;
        height: 100%;
        width: 100%;
        top: 50%;
        transform: translate(-50%, -25%) rotate(45deg);
    }

    .eye_left {
        left: 20%;
    }

    .eye_right {
        left: 80%;
    }

    .eye1 {
        position: absolute;
        top: 1.5%;
        left: 1.5%;
        width: 38%;
        height: 38%;
        overflow: hidden;
    }

    .eye1::before {
        content: &amp;quot;&amp;quot;;
        width: 300%;
        height: 300%;
        position: absolute;
        border: 0.75rem solid #fff;
        border-radius: 150%;
    }

    .eye2 {
        position: absolute;
        top: 0;
        left: 0;
        width: 70px;
        height: 70px;
        overflow: hidden;
    }

    .eye3 {
        position: absolute;
        top: 14px;
        left: 14px;
        width: 65px;
        height: 65px;
        overflow: hidden;
    }

    .eye2::before,
    .eye3::before {
        content: &amp;quot;&amp;quot;;
        width: 300px;
        height: 300px;
        position: absolute;
        border: 5px solid #fb7;
        border-radius: 120px;
    }

    .eye4 {
        position: absolute;
        top: 72px;
        left: 9px;
        width: 24px;
        height: 12px;
        overflow: hidden;
        transform: rotate(-160deg);
    }

    .eye5 {
        position: absolute;
        top: 15px;
        left: 66px;
        width: 24px;
        height: 12px;
        overflow: hidden;
        transform: rotate(70deg);
    }

    .eye4::before,
    .eye5::before {
        content: &amp;quot;&amp;quot;;
        position: absolute;
        width: 14px;
        height: 14px;
        border: 5px solid #fb7;
        border-radius: 120px;
    }

    .eye6 {
        position: absolute;
        top: 62px;
        left: 17px;
        width: 15px;
        height: 15px;
        background: rgb(37, 37, 37);
        border-radius: 10px;
    }

&amp;lt;/style&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[独自]]></title><description><![CDATA[独自 烟雨梨花巷，谁人识我家。
家中独人坐，车行往来忙。]]></description><link>https://www.abellee.cn/2018/05/16/独自/</link><guid isPermaLink="false">https://www.abellee.cn/2018/05/16/独自/</guid><pubDate>Wed, 16 May 2018 16:55:25 GMT</pubDate><content:encoded>&lt;p&gt;独自&lt;/p&gt;&lt;p&gt;烟雨梨花巷，谁人识我家。
家中独人坐，车行往来忙。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[相思]]></title><description><![CDATA[2018年4月8日记 相思   江南花已开，破碎旧时梦。 一别十七载，愿亲常安在。 西柳厦耸立，小院已不在。 每当夜思亲，仍记白布围。]]></description><link>https://www.abellee.cn/2018/04/08/相思/</link><guid isPermaLink="false">https://www.abellee.cn/2018/04/08/相思/</guid><pubDate>Sun, 08 Apr 2018 01:08:21 GMT</pubDate><content:encoded>&lt;p&gt;2018年4月8日记 相思  &lt;/p&gt;&lt;p&gt;江南花已开，破碎旧时梦。&lt;br/&gt;
一别十七载，愿亲常安在。&lt;br/&gt;
西柳厦耸立，小院已不在。&lt;br/&gt;
每当夜思亲，仍记白布围。&lt;/p&gt;</content:encoded></item></channel></rss>